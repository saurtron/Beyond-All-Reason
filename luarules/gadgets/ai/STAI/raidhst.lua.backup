RaidHST = class(Module)

function RaidHST:Name()
	return "RaidHST"
end

function RaidHST:internalName()
	return "raidhst"
end

function RaidHST:Init()
	self.squadID = 1
	self.DebugEnabled = true
	self.raiders = {}
	self.squads = {}
-- 	self.pathValidFuncs = {}
	self.minRaidCount = 8
	self.wave = 5
end

function RaidHST:SetRaidCount()
	self.minRaidCount = math.min(5 + self.ai.ecohst.Metal.income,15)
	self:EchoDebug('minRaidCount',self.minRaidCount)
end


function RaidHST:Update()
	if self.ai.schedulerhst.moduleTeam ~= self.ai.id or self.ai.schedulerhst.moduleUpdate ~= self:Name() then return end
	self.wave = 5 + math.min(math.ceil(self.ai.ecohst.Energy.income/1000),20)
	self:EchoDebug('start update')
	self:SetRaidCount()
	self:doSquads()
	for squadID,squad in pairs(self.squads) do
		if #squad.members < 1 then
			self:resetSquad(squad)
			return
		end
		self:EchoDebug('update squad',squadID)
		self:getSquadPosition(squad)
		self:visualDBG(squad)
		if squad.lock then
			self:EchoDebug('squad is lock: target path, ontarget',squad.target,squad.path,squad.onTarget)
			if self:squadOnTarget(squad) then
				self:EchoDebug('execute attack')
				self:doAttack(squad)

			elseif squad.target and squad.path then
				self:EchoDebug('go to next path')
				self:goToNextNode(squad)
			elseif not squad.target and not squad.onTarget then
				self:EchoDebug('search another target')
				self:targeting(squad)
			end
 		else
			if #squad.members > self.minRaidCount then
				squad.lock = true
			end
		end
	end
	self:EchoDebug('stop update')
end

function RaidHST:running(squad)
	self:EchoDebug(squad.target,squad.path,#squad.members >= self.minRaidCount)
	if squad.lock and squad.target and squad.onTarget then
		return true
	elseif squad.lock and  squad.path and squad.target then
		return true
	elseif not squad.lock then
-- 		self:resetSquad(squad)
		return false
	end
end

function RaidHST:doSquads()
	self:EchoDebug('doSquads')
	for id,raider in pairs(self.raiders) do
		local squadID = self.squadID
		if not self.squads[squadID] then
			self:EchoDebug('new squad')
			local u = self.game:GetUnitByID(id)
			self.squads[squadID] = {}
			self.squads[squadID].members = {}
			self.squads[squadID].formation = {}
			self.squads[squadID].membersPos = {}
			self.squads[squadID].squadID = squadID
			self.squads[squadID].unitName = raider.name
			self.squads[squadID].mclass = raider.mclass
			self.squads[squadID].mtype = raider.mtype
			self.squads[squadID].lock = false
			self.squads[squadID].onTarget = false
			self.squads[squadID].target = nil
			self.squads[squadID].path = nil
			--self.squads[squadID].graph = self.ai.maphst:GetPathGraph(raider.mtype)
			--self.squads[squadID].validFunc = self:GetPathValidFunc(raider.name)
			--self.squads[squadID].modifierFunc =  self.ai.targethst:GetPathModifierFunc(raider.name)
			self.squads[squadID].colour = {math.random(),math.random(),math.random(),1}
		end
		if not self.squads[squadID].lock and not raider.inSquad then
			self:EchoDebug(id,'added to ',squadID)
			table.insert(self.squads[squadID].members,id)
			raider.inSquad = squadID
			if #self.squads[squadID].members >= self.minRaidCount then
				self.squads[squadID].lock = true
				self.squadID = self.squadID + 1
				self:EchoDebug('squad created',squadID,'members',#self.squads[squadID].members)
			end
		end
	end
end

function RaidHST:targeting(squad,targetType)
	if squad.target and squad.path then
		self:EchoDebug('have already a target')
		return
	end
	if squad.onTarget == true then
		self:EchoDebug('we are in attack')
		return
	end
	local target = nil
	target = self:getRaidCell4(squad)

	if not target then
		self:EchoDebug('no target for ' ,squad.squadID)
		return
	end
	for squadID, othersquad in pairs(self.squads) do
		if othersquad.target and othersquad.target.X == target.X and othersquad.target.Z == target.Z then
			target = nil
			return
		end
	end

	squad.path = self.ai.maphst:getPath(squad.unitName,squad.position,target.POS,true)
	if squad.path  then
		squad.target = target
	end
	if squad.target and squad.path then return true end --tell me im ready to raids
end

function RaidHST:getRaidCell2(squad)
	if not squad then return end
	local leader = self.game:GetUnitByID(squad.members[1])
	local raidPower = self.ai.armyhst.unitTable[squad.unitName].metalCost * #squad.members
	self:EchoDebug('raidPower',raidPower)

	local bestValue = math.huge
	local bestTarget = nil
	for X, cells in pairs(self.ai.loshst.ENEMY) do
		for Z,cell in pairs (cells) do
			if cell.ARMED < raidPower and cell.MOBILE <= 0 then
				self:EchoDebug('power',cell.ARMED,cell.X,cell.Z)
				if self.ai.maphst:UnitCanGoHere(leader, cell.POS) then
	-- 				local Relativedistance = self.ai.tool:distance(cell.POS,squad.position) / self.ai.maphst.elmoMapMaxDistance
					local Relativedistance = self.ai.tool:distance(cell.POS, self.ai.targethst.enemyCenter or squad.position) / self.ai.maphst.elmoMapMaxDistance
					local RelativeValue = Relativedistance * cell.IMMOBILE
					if RelativeValue < bestValue  then
						bestTarget = cell
						bestValue = RelativeValue
					end
				end
			end
		end
	end
	self:EchoDebug('bestTarget',bestTarget)
	return bestTarget
end

function RaidHST:getRaidCell4(squad)
	local leader = self.game:GetUnitByID(squad.members[1])
	local bestValue = 0
	local bestTarget = nil
	local bestDist = math.huge
	local worstDist = 0

	for ref, blob in pairs(self.ai.targethst.IMMOBILE_BLOBS) do
		if self.ai.maphst:UnitCanGoHere(leader, blob.position) then
			local dist = self.ai.tool:distance(blob.position,self.ai.targethst.enemyCenter)
			if dist > worstDist then
				worstDist = dist
				bestTarget = blob.refCell
			end
		end
	end
	return bestTarget
end

function RaidHST:getSquadPosition(squad)
	local members = squad.members
	self:EchoDebug(#members,'in squad',squad.squadID,'search pos')
-- 	local squadPos = {x=0,y=0,z=0}
	squad.position = squad.position or {}
	squad.position.x = 0
	squad.position.y = 0
	squad.position.z = 0
-- 	squad.membersPos = {}
	for index,id in pairs(members) do
		local unit = self.game:GetUnitByID(id)
		if unit:IsAlive() then
			--local unitPos = unit:GetPosition()
			squad.membersPos[index] = squad.membersPos[index] or {}
			squad.membersPos[index].x , squad.membersPos[index].y, squad.membersPos[index].z = unit:GetRawPos()


			squad.position.x = squad.position.x + squad.membersPos[index].x
			squad.position.z = squad.position.z + squad.membersPos[index].z
		else
			table.remove(self.raiders,self.id)
			table.remove(squad.members,index)
		end
	end
	squad.position.x = squad.position.x / # members
	squad.position.z = squad.position.z / # members
	squad.position.y = Spring.GetGroundHeight(squad.position.x,squad.position.z)
-- 	squad.position = {x = squadPos.x, y = squadPos.y, z = squadPos.z}
	self:EchoDebug('actual squad.position',squad.position.x,squad.position.z)
end

function RaidHST:goToNextNode(squad)
	if not squad.path or not squad.path[1]  then
		self:EchoDebug('gotonextNode no next path')
-- 		self:resetSquad(squad)
		return
	end	self:EchoDebug('goToNextNode',squad.position.x,squad.position.z,'path1',squad.path[1].x,squad.path[1].z,'dist',self.ai.tool:distance(squad.position,squad.path[1]))
	local squadToPath1 = 0
	local arrival = true
	for index,mPos in pairs(squad.membersPos) do
		local memberID = squad.members[index]
		if not squad.formation[memberID] then
			self:EchoDebug('set start at',squad.path[1].x,squad.path[1].z)
			squad.formation[memberID] = squad.path[1]
		end

		self:EchoDebug(index,memberID,mPos,squad.formation[memberID].x,squad.formation[memberID].y,squad.formation[memberID].z,squadToPath1)
		squadToPath1 = squadToPath1 + self.ai.tool:distance(mPos ,squad.formation[memberID])
		if self.ai.tool:distance(mPos ,squad.formation[memberID]) > 256 then
			arrival = false
		end
	end
	if arrival then
		table.remove(squad.path,1)
	end
 	if squad.path[1] then
		self:EchoDebug('in moving')
 		self:squadMove(squad)
	else
		self:EchoDebug('end path??')
 	end
end

function RaidHST:squadMove(squad)
	local pos = squad.path[1]
	local X
	local Z
	local range = self.ai.armyhst.unitTable[squad.unitName].losRadius / 2
	local ref = 0
	for index,id in pairs(squad.members) do
		ref = index/10

		if squad.position.x < pos.x then
			X = range * math.sin(ref) * -1
		else
			X = (range * math.sin(ref))
		end
		if squad.position.z < pos.z then
			Z = range * math.cos(ref) * -1
		else
			Z = (range * math.cos(ref))
		end

		local unit = self.game:GetUnitByID(id)
		local x = pos.x + X
		local z = pos.z + Z
		local y = Spring.GetGroundHeight(x,z)
		self:EchoDebug('go to next node',id,x,z)
		squad.formation[id] = squad.formation[id] or {}
		squad.formation[id].x = x
		squad.formation[id].y = y
		squad.formation[id].z = z
		self.map:DrawPoint(squad.formation[id], {1,1,1,1}, squad.squadID, 6)
		unit:Move(squad.formation[id])
	end
end

function RaidHST:squadOnTarget(squad)
	if not squad.target then
		squad.onTarget = nil
		squad.path = nil
		self:EchoDebug('no target on target')
		return nil
	end
	if self.ai.tool:distance(squad.position,squad.target.POS) < 256 then
		self:EchoDebug('im on target')
		squad.onTarget = true
		squad.path = nil
		self:Roam(squad)
		return true
	else
		self:EchoDebug('away from target')
		squad.onTarget = nil
		self:Hold(squad)
		return nil
	end
end

function RaidHST:doAttack(squad)
	self:EchoDebug('do attack')
	if self.ai.loshst.ENEMY[squad.target.X] and self.ai.loshst.ENEMY[squad.target.X][squad.target.Z] then
		for index,id in pairs(squad.members) do
			local unit = self.game:GetUnitByID(id)
			local rx = math.random(-100,100)
			local rz = math.random(-100,100)
			vpos = squad.target.POS
			unit:AttackMove({x=vpos.x+rx,y= Spring.GetGroundHeight(vpos.x+rx,vpos.z+rz),z=vpos.z+rz})
		end
	else
		squad.target = nil
		squad.path = nil
		squad.onTarget = nil
	end
end

function RaidHST:Roam(squad)
	for index,unitID in pairs(squad.members) do
		local unit = self.game:GetUnitByID(unitID)
		unit:Roam()
	end
end

function RaidHST:Hold(squad)
	for index,unitID in pairs(squad.members) do
		local unit = self.game:GetUnitByID(unitID)
		unit:HoldPosition()
	end
end

function RaidHST:resetSquad(squad)
	self:EchoDebug('reset',squad.squadID)
	for index,unitID in pairs(squad.members) do
		self.raiders[unitID]['inSquad'] = nil
	end
	squad.members = {}
	squad.formation = {}
	squad.membersPos = {}
	squad.lock = false
	squad.onTarget = false
	squad.position = nil
	squad.target = nil
	squad.path = nil
end

function RaidHST:visualDBG(squad)
	local ch = 6
	if not self.ai.drawDebug then
		return
	end

	if squad.position then
		self.map:DrawPoint(squad.position, squad.colour, 'P',squad.squadID, ch)
	end
	if squad.path then
		for i , p in pairs(squad.path) do
			self.map:DrawPoint(p, squad.colour, i, ch)
		end
	end
	if squad.target then
		self.map:DrawPoint(squad.target.POS, squad.colour, squad.squadID .. 'target', ch)
	end
end




--[[
function RaidHST:getRaidCell1(squad)
	if not squad then return end
	local leader = self.game:GetUnitByID(squad.members[1])
	local bestDist = math.huge
	local bestTarget = nil
	for X, cells in pairs(self.ai.loshst.ENEMY) do
		for Z, cell in pairs(cells) do
			if self.ai.maphst:UnitCanGoHere(leader, cell.POS) then
				local dist = self.ai.tool:distance(cell.POS,squad.position) < bestDist
				if dist < bestDist  then
					bestTarget = cell
					bestDist = dist
				end
			end
		end
	end
	self:EchoDebug('bestTarget',bestTarget)
	return bestTarget
end
]]

--[[
function RaidHST:FindPath(squad)
 	if not squad.pathfinder then
 		self:EchoDebug('no pathfinder??')
 		return
 	end
 	local path, remaining, maxInvalid = squad.pathfinder:Find(10)
 	self:EchoDebug(tostring(remaining) .. " remaining to find path",path,maxInvalid)
 	if path then
 		local pt = {}
 		self:EchoDebug("got path of", #path, "nodes", maxInvalid, "maximum invalid neighbors!!!!!!!!!!!!!!!!!!")
  		for index,cell in pairs(path) do
 			table.insert(pt,cell.position)
  			self:EchoDebug('path','index',index,'pos',cell.x,cell.z)
  		end
 		squad.path = pt

 		if maxInvalid == 0 then
 			self:EchoDebug("path is entirely clear of danger, not using")
 		end
 		squad.pathfinder = nil
 	elseif remaining == 0 then
 		self:EchoDebug("no path found")
 		squad.pathfinder = nil
 	else
 		self:EchoDebug('no path found in findPATH()')
 	end
end
]]

--[[
function RaidHST:GetPathValidFunc(unitName)
	if self.pathValidFuncs[unitName] then
		return self.pathValidFuncs[unitName]
	end
	local valid_node_func = function ( node )
		return self.ai.targethst:IsSafeCell(node.position, unitName, 1)
	end
	self.pathValidFuncs[unitName] = valid_node_func
	return valid_node_func
end
]]

	--[[
	for index,id in pairs(squad.members) do
		local unit = self.game:GetUnitByID(id)
		local rx = math.random(-50,50)
		local rz = math.random(-50,50)
		if vulnerable and vulnerable.position then
			self:EchoDebug('nearby vulnerable',vulnerable)
			local vpos = vulnerable.position
			unit:AttackMove({x=vpos.x+rx,y= Spring.GetGroundHeight(vpos.x+rx,vpos.z+rz),z=vpos.z+rz})

		elseif squad.target then
			self:EchoDebug('random attack')
			unit:AttackMove({x=squad.target.POS.x+rx,y= Spring.GetGroundHeight(squad.target.POS.x+rx,squad.target.POS.z+rz),z=squad.target.POS.z+rz})
			squad.path = nil
			squad.target = nil
			self:resetSquad(squad)
		end
	end
	]]

-- function RaidHST:nearbyVulnerable(members)
-- 	for index,id in pairs(members) do
-- 		local unit = self.game:GetUnitByID(id)
-- 		local vulnerable = self.ai.targethst:NearbyVulnerable(unit:GetPosition())
-- 		if vulnerable then
-- 			return vulnerable
-- 		end
-- 	end
-- end



	--squad.pathfinder = self.ai.maphst:getPath(squad.unitName,squad.position,target.POS,false)
	--[[
	squad.pathfinder = squad.graph:PathfinderPosPos(squad.position, target.POS, nil, squad.validFunc, nil, squad.modifierFunc)
	if squad.pathfinder then
		self:EchoDebug('pathfinder',type(squad.pathfinder))
 		self:FindPath(squad)
--		squad.path = self.ai.maphst:gridThePath(squad.pathfinder)
		if squad.path  then
			self:EchoDebug('path catch')
			squad.target = target
			table.insert(squad.path,#squad.path+1,squad.target.POS)
			self:EchoDebug('squad.target',squad.target.x,squad.target.z)
		end
	else
		self:EchoDebug('no pathfinding!')
	end]]
--[[


function RaidHST:nearestEnemy(squad) --TEST control this function can give false
	local members = squad.members
	local ene =  self.ai.maphst:getCellsFields(squad.target.POS,{'ENEMY'},1,self.ai.loshst.ENEMY) > 0
	return ene
end

]]


--[[
function RaidHST:getRaidCell3(squad)
	if not squad then return end
	if not self.ai.targethst.distals then return end
	local leader = self.game:GetUnitByID(squad.members[1])
	local bestDist = math.huge
	local bestTarget = nil
	local worstDist = 0
	for i, cell in pairs(self.ai.targethst.distals) do
		if self.ai.maphst:UnitCanGoHere(leader, cell.POS) then
			local dist = self.ai.tool:distance(cell.POS,self.ai.targethst.enemyCenter)
			--local dist = self.ai.tool:distance(cell.POS,squad.position) < bestDist
			if dist > worstDist  then
				worstDist = dist
				bestTarget = cell
				bestDist = dist
			end
		end
	end
	self:EchoDebug('best distals Target',bestTarget)
	return bestTarget
end
]]
