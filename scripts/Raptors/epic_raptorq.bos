piece body,head,tail,lthighf,lkneef,lshinf,lfootf,rthighf,rkneef,rshinf,rfootf,lthighb,lkneeb,lshinb,lfootb,rthighb,rkneeb,rshinb,rfootb,lforearml,lbladel,rforearml,rbladel,lforearmu,lbladeu,rforearmu,rbladeu,spike1,spike2,spike3,spike1emit,spike2emit,spike3emit,firepoint,aimy1;

static-var aMoving, isMoving, gun_1, shot5pitch, shot5heading;

// Signal definitions
#define SIGNAL_AIM1 256
#define SIGNAL_AIM2 512

#include "../recoil_common_includes.h"

static-var animSpeed, maxSpeed, animFramesPerKeyframe;

#define MOVESCALE 125 //Higher values are bigger, 100 is default
#define MOVESPEED 11
#define animAmplitude 107
#define SIGNAL_MOVE 1

#include "raptor_queen_walk_v2.h"


// REMEMBER TO animspeed = 5 in Create() !!
UnitSpeed(){
	maxSpeed = get MAX_SPEED; // this returns cob units per frame i think
	animFramesPerKeyframe = MOVESPEED; //we need to calc the frames per keyframe value, from the known animtime
	maxSpeed = maxSpeed + (maxSpeed /(2*animFramesPerKeyframe)); // add fudge
	while(TRUE){
		animSpeed = (get CURRENT_SPEED);
		if (animSpeed<1) animSpeed=1;
		animSpeed = (maxSpeed * MOVESPEED) / animSpeed; 
		//get PRINT(maxSpeed, animFramesPerKeyframe, animSpeed); //how to print debug info from bos
		if (animSpeed<2) animSpeed=2;
		if (animspeed>10) animSpeed = 10;
		sleep 164;
	}
}
StartMoving(reversing){
	signal SIGNAL_MOVE;
	isMoving=TRUE;
	start-script Walk();
}
StopMoving(){
	signal SIGNAL_MOVE;
	isMoving=FALSE;
	call-script StopWalking();
}


Create()
{
	emit-sfx 1026 from body;
	emit-sfx 1026 from head;
	emit-sfx 1026 from tail;
	animSpeed = 6;
	start-script UnitSpeed();
}



QueryWeapon1(pieceIndex)
	{	pieceIndex=firepoint; }

AimFromWeapon2(pieceIndex)
	{	pieceIndex=spike1emit;	}

QueryWeapon2(pieceIndex)
	{	pieceIndex=spike1emit; }

AimFromWeapon3(pieceIndex)
	{	pieceIndex=spike2emit;	}

QueryWeapon3(pieceIndex)
	{	pieceIndex=spike2emit; }

AimFromWeapon4(pieceIndex)
	{	pieceIndex=spike3emit;	}

QueryWeapon4(pieceIndex)
	{	pieceIndex=spike3emit; }

AimFromWeapon5(pieceIndex)
	{	pieceIndex=aimy1;	}

QueryWeapon5(pieceIndex)
	{	pieceIndex=firepoint; }

	
AimWeapon1(heading,pitch)
	{
	//get PRINT(1, heading,pitch);
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;	
	if (heading > <60> ) heading = <60>;
	if (heading < <-60> ) heading = <-60>;
	if (pitch > <60> ) pitch = <60>;
	if (pitch < <-60> ) pitch = <-60>;
	turn aimy1 to y-axis heading speed <150>;
	turn aimy1 to x-axis 0 -pitch speed <100>;
		
	wait-for-turn head around y-axis;
	
	return(TRUE);
	}
	
AimWeapon2()
	{
	return(TRUE);
	}

AimWeapon3()
	{
	return(TRUE);
	}

AimWeapon4()
	{
	return(TRUE);
	}

AimWeapon5(heading,pitch)
	{
	
	//get PRINT(5, heading,pitch);
	shot5pitch = pitch;
	shot5heading = heading;
	return(TRUE);
	}


Shot1()
	{
	++gun_1;
	if (gun_1 > 4)
		{
		gun_1 = 1;
		}
	if (gun_1 == 1)
		{
		turn lforearmu to y-axis <-140> speed <600>;
		turn lbladeu to y-axis <140> speed <600>;
		wait-for-turn lbladeu around y-axis;
		turn lforearmu to y-axis <0> speed <120>;
		turn lbladeu to y-axis <0> speed <120>;
		}
	if (gun_1 == 2)
		{
		turn lforearml to y-axis <-140> speed <600>;
		turn lbladel to y-axis <140> speed <600>;
		wait-for-turn lbladel around y-axis;
		turn lforearml to y-axis <0> speed <120>;
		turn lbladel to y-axis <0> speed <120>;
		}
	if (gun_1 == 3)
		{
		turn rforearmu to y-axis <140> speed <600>;
		turn rbladeu to y-axis <-140> speed <600>;
		wait-for-turn rbladeu around y-axis;
		turn rforearmu to y-axis <0> speed <120>;
		turn rbladeu to y-axis <0> speed <120>;
		}
	if (gun_1 == 4)
		{
		turn rforearml to y-axis <140> speed <600>;
		turn rbladel to y-axis <-140> speed <600>;
		wait-for-turn rbladel around y-axis;
		turn rforearml to y-axis <0> speed <120>;
		turn rbladel to y-axis <0> speed <120>;
		}
	}
	

Shot2()
{
 set CHANGE_TARGET to 2;
}

Shot3()
{
 set CHANGE_TARGET to 3;
}

Shot4()
{
set CHANGE_TARGET to 4;
}

Shot5()
{
        turn aimy1 to x-axis 0 -shot5pitch speed <400>;
        turn aimy1 to y-axis shot5heading speed <300>;
	    wait-for-turn aimy1 around x-axis;
		turn lforearmu to y-axis <-140> speed <600>;
		turn lbladeu to y-axis <140> speed <600>;
		turn lforearml to y-axis <-140> speed <600>;
		turn lbladel to y-axis <140> speed <600>;	
		turn rforearmu to y-axis <140> speed <600>;
		turn rbladeu to y-axis <-140> speed <600>;
		turn rforearml to y-axis <140> speed <600>;
		turn rbladel to y-axis <-140> speed <600>;
		wait-for-turn lbladeu around y-axis;
		wait-for-turn lbladel around y-axis;
		wait-for-turn rbladeu around y-axis;
		wait-for-turn rbladel around y-axis;	
		turn lforearmu to y-axis <0> speed <120>;
		turn lbladeu to y-axis <0> speed <120>;
		turn lforearml to y-axis <0> speed <120>;
		turn lbladel to y-axis <0> speed <120>;
		turn rforearmu to y-axis <0> speed <120>;
		turn rbladeu to y-axis <0> speed <120>;
		turn rforearml to y-axis <0> speed <120>;
		turn rbladel to y-axis <0> speed <120>;		
}


HitByWeaponId(z,x,weapon_id,shot_power)
	{
	if (weapon_id == 51)
	  {
	   emit-sfx 1025 from head;
	   emit-sfx 1025 from body;
	   emit-sfx 1024 from rthighf;
	   emit-sfx 1025 from rthighb;
	   emit-sfx 1024 from lthighf;
	   emit-sfx 1025 from lthighb;
	  }
	return 100;
	}

Killed( severity, corpsetype )
	{
	corpsetype = 1;
	emit-sfx 1025 from body;
	emit-sfx 1025 from head;
	emit-sfx 1025 from rbladeu;
	emit-sfx 1025 from lbladel;
	emit-sfx 1025 from tail;
	emit-sfx 1025 from rthighf;
	emit-sfx 1025 from rthighb;
	emit-sfx 1025 from lthighf;
	emit-sfx 1025 from lthighb;
	emit-sfx 1024 from rfootf;
	emit-sfx 1024 from rfootb;
	emit-sfx 1024 from lfootf;
	emit-sfx 1024 from lfootb;
	sleep 50;
	emit-sfx 2048+4 from body;
	emit-sfx 2048+4 from head;
	emit-sfx 2048+4 from tail;
	emit-sfx 2048+4 from lthighf;
	emit-sfx 2048+4 from rthighf;
	emit-sfx 2048+4 from rthighb;
	emit-sfx 2048+4 from lthighb;
	emit-sfx 2048+4 from spike1;
	emit-sfx 2048+4 from spike2;
	emit-sfx 2048+4 from spike3;
	explode head type FALL | FIRE | EXPLODE_ON_HIT  | NOHEATCLOUD ;
	explode lforearml type FALL | EXPLODE_ON_HIT  | NOHEATCLOUD ;
	explode lbladel type FALL | EXPLODE_ON_HIT  | NOHEATCLOUD ;
	explode rforearml type FALL | EXPLODE_ON_HIT  | NOHEATCLOUD ;
	explode rbladel type FALL | EXPLODE_ON_HIT  | NOHEATCLOUD ;
	explode lforearmu type FALL | EXPLODE_ON_HIT  | NOHEATCLOUD ;;
	explode lbladeu type FALL | EXPLODE_ON_HIT  | NOHEATCLOUD ;
	explode rforearmu type FALL | EXPLODE_ON_HIT  | NOHEATCLOUD ;
	explode rbladeu type FALL | EXPLODE_ON_HIT  | NOHEATCLOUD ;
	explode spike1 type FALL | EXPLODE_ON_HIT  | NOHEATCLOUD ;
	explode spike2 type FALL | EXPLODE_ON_HIT  | NOHEATCLOUD ;
	explode spike3 type FALL | EXPLODE_ON_HIT  | NOHEATCLOUD ;
	explode tail type FALL | EXPLODE_ON_HIT  | NOHEATCLOUD ;
	explode body type FALL | EXPLODE_ON_HIT  | NOHEATCLOUD ;
	explode lthighf type FALL | EXPLODE_ON_HIT  | NOHEATCLOUD ;
	explode lkneef type FALL | EXPLODE_ON_HIT  | NOHEATCLOUD ;
	explode lshinf type FALL | EXPLODE_ON_HIT  | NOHEATCLOUD ;
	explode lfootf type FALL | EXPLODE_ON_HIT  | NOHEATCLOUD ;
	explode rthighf type FALL | EXPLODE_ON_HIT  | NOHEATCLOUD ;
	explode rkneef type FALL | EXPLODE_ON_HIT  | NOHEATCLOUD ;
	explode rshinf type FALL | EXPLODE_ON_HIT  | NOHEATCLOUD ;
	explode rfootf type FALL | EXPLODE_ON_HIT  | NOHEATCLOUD ;
	explode lthighb type FALL | EXPLODE_ON_HIT  | NOHEATCLOUD ;
	explode lkneeb type FALL | EXPLODE_ON_HIT  | NOHEATCLOUD ;
	explode lshinb type FALL | EXPLODE_ON_HIT  | NOHEATCLOUD ;
	explode lfootb type FALL | EXPLODE_ON_HIT  | NOHEATCLOUD ;
	explode rthighb type FALL | EXPLODE_ON_HIT  | NOHEATCLOUD ;
	explode rkneeb type FALL | EXPLODE_ON_HIT  | NOHEATCLOUD ;
	explode rshinb type FALL | EXPLODE_ON_HIT  | NOHEATCLOUD ;
	explode rfootb type FALL | EXPLODE_ON_HIT  | NOHEATCLOUD ;
	return( 0 );
	}