piece base,torso, thigh1l, thigh1r, thigh2l, thigh2r, thigh3l, thigh3r, leg1l, leg1r, leg2l, leg2r, leg3l, leg3r, foot1l, foot1r, foot2l, foot2r, foot3l, foot3r, thor1, thor2, thor3, thor4, thor5, thor6, wingl, wingr, flare;

#include "../recoil_common_includes.h"

#define SIGNAL_AIM1 256

static-var maxSpeed, animFramesPerKeyframe, isMoving, animSpeed, isDying, gun_1;

// For N:\animations\Raptors\raptor_walk_remaster_v2.blend Created by https://github.com/Beherith/Skeletor_S3O V((0, 3, 5))
#define MOVESCALE 100 // Higher values are bigger, 100 is default, for bigger/smaller units
#define MOVESPEED 4 // At this movespeed and animamplitude, the ideal maxvelocity is 2.1 
#define animAmplitude 100
#define SIGNAL_MOVE 1
#include "raptor_walk_6legged.h"

/*
#define IDLEMOVESCALE 41
#define IDLEAMPLITUDE 100
#define IDLESPEED 15
#include "raptor_idle_2legged_v2.h"


#define DEATHSCALE 41 //Higher values are bigger, 100 is default
#define DEATHAMPLIDUTE 100 //Higher values are bigger, 100 is default
#define DEATHSPEED 6
#include "raptor_death_2legged_v2.h"
*/
//use call-script DeathAnim(); from Killed()



#define BASEPIECE torso //needed for HitByWeapon
#define HITSPEED <45.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 4
#define MAXTILT 100

HitByWeapon(anglex, anglez, damage)	// angle[x|z] is always [-500;500], damage is multiplied by 100
{
	var amount;//, speedz, speedx;
	amount = damage / (100 * UNITSIZE);
	var randpiece;
	randpiece = 0;
	if (amount < 3  ) return (0);
	//if (RAND(1, MAXTILT) < amount){
	if (1){
		randpiece = RAND(1, 3);
		if (randpiece == 1) emit-sfx 1024 from BASEPIECE;
		if (randpiece == 2) emit-sfx 1024 from wingl;
		if (randpiece == 3) emit-sfx 1024 from wingr;
	}
	if (amount > MAXTILT){
		amount = MAXTILT;
	}	
	if (anglex ==0 ) { //this happens when hit by lasers
		if (anglez == 0){
			amount = amount / 2;
			anglex = RAND(1,500);
			anglez = RAND(1,500);
		}
	} 
	//get PRINT(anglex, anglez, amount, randpiece);
	//speedz = HITSPEED * get ABS(anglez) / 500; //nevermind this, the random error this produces actually looks better than the accurate version
	turn BASEPIECE to z-axis (anglez * amount) / 100  speed HITSPEED;
	turn BASEPIECE to x-axis <0> - (anglex * amount) /100 speed HITSPEED;
	wait-for-turn BASEPIECE around z-axis;
	wait-for-turn BASEPIECE around x-axis;
	turn BASEPIECE to z-axis <0.0> speed HITSPEED / 6;
	turn BASEPIECE to x-axis <0.0> speed HITSPEED / 6;
}

static-var isSmoking;
BleedUnit(healthpercent, randpiece) // ah yes, clever use of stack variables 
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		
		if( healthpercent < 66 )
		{
			randpiece = RAND(1, 3);
			if (randpiece == 1) emit-sfx 1024 from BASEPIECE;
			if (randpiece == 2) emit-sfx 1024 from wingl;
			if (randpiece == 3) emit-sfx 1024 from wingr;
		} 
		else {
			isSmoking = 0;
			return;
			//break; // bos2cob.py does not like this one!
		}
		if (healthpercent < 4) healthpercent = 4; 
		sleep healthpercent * 50;
	}
	sleep 97;
	isSmoking = 0;
}

HitByWeaponId(anglex, anglez, weaponid, dmg) //weaponID is always 0,lasers and flamers give angles of 0
{
	if( get BUILD_PERCENT_LEFT) return (100);
	if (isSmoking == 0)	{ 
		isSmoking = 1;
		start-script BleedUnit();
	}
	//get PRINT(anglex, anglez, weaponid, dmg);
	start-script HitByWeapon(dmg, anglez,anglex); //I dont know why param order must be switched, and this also runs a frame later :(
	return (100); //return damage percent
}


//#include "raptor_death_2legged_ptaq.h"


//#include "raptor_killed_2legged.h"



//#include "raptor_swim_2legged_v1.h"

//#include "raptor_create_move.h"

UnitSpeed(){
	maxSpeed = get MAX_SPEED; // this returns cob units per frame i think
	animFramesPerKeyframe = MOVESPEED; //we need to calc the frames per keyframe value, from the known animtime
	maxSpeed = maxSpeed + (maxSpeed /(2*animFramesPerKeyframe)); // add fudge
	while(TRUE){
		animSpeed = (get CURRENT_SPEED);
		if (animSpeed<1) animSpeed=1;
		animSpeed = (maxSpeed * MOVESPEED) / animSpeed; 
		//get PRINT(maxSpeed, animFramesPerKeyframe, animSpeed); //how to print debug info from bos
		if (animSpeed<2) animSpeed=2;
		if (animspeed> 2* MOVESPEED) animSpeed = 2 * MOVESPEED;
		sleep 197;
	}
}


StartMoving(reversing){
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	isMoving=TRUE;
	start-script UnitSpeed();
	start-script Walk();
}

StopMoving(){
	signal SIGNAL_MOVE;
	isMoving=FALSE;
	if (!isDying){
		call-script StopWalking();
		//start-script Idle();
	}
}

Create()
{
	isDying = FALSE;
	animSpeed = MOVESPEED;
	
	call-script StopWalking();
	emit-sfx 1024 + 2 from torso;
	emit-sfx 1024 + 2 from torso;
	emit-sfx 1024 + 2 from torso;
	emit-sfx 1024 + 2 from torso;
	turn base to x-axis <-90> now;
	move base to y-axis [-0.5] *MOVESCALE now;
	move base to y-axis [0] speed [1]*MOVESCALE;
	turn base to x-axis <0> speed <180>;
	var smoke;
	smoke = 0;
	while(smoke < 9){
	//for (smoke = 0; smoke < 8; smoke = smoke+1){
		smoke = smoke + 1;
		sleep 90;
		emit-sfx 1024 + 2 from torso;
	}
	gun_1 = 1;
	return (0);
}

	
RestoreAfterDelay()
{
	sleep 3000;
	var tailspeed;
	tailspeed = 4;
	turn wingr to y-axis <0>         speed <90> / tailspeed;
	turn wingl to y-axis <0>         speed <90> / tailspeed;
	turn flare to x-axis <13.049453> speed <-93.210378> / tailspeed;
	turn thor1 to x-axis <-35.725175> speed <-255.179819> / tailspeed;
	turn thor2 to x-axis <-21.799876> speed <-155.713396> / tailspeed;
	turn thor3 to x-axis <-6.812812> speed <-48.662942> / tailspeed;
	turn thor4 to x-axis <4.699225> speed <-33.565894> / tailspeed;
	turn thor5 to x-axis <15.162363> speed <-108.302590> / tailspeed;
	turn thor6 to x-axis <19.165533> speed <-136.896664> / tailspeed;
}




QueryWeapon1(pieceIndex)
	{	pieceIndex=flare; }


AimWeapon1(heading,pitch)
	{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	
	var tailspeed;
	tailspeed = 5;
	turn wingr to y-axis <-35>         speed <360> / tailspeed;
	turn wingl to y-axis <35>         speed <360> / tailspeed;
	turn flare to x-axis <0> speed <-93.210378> / tailspeed;
	turn thor1 to x-axis <0> speed <-255.179819> / tailspeed;
	turn thor2 to x-axis <0> speed <-155.713396> / tailspeed;
	turn thor3 to x-axis <0> speed <-48.662942> / tailspeed;
	turn thor4 to x-axis <0> speed <-33.565894> / tailspeed;
	turn thor5 to x-axis <0> speed <-108.302590> / tailspeed;
	turn thor6 to x-axis <0> speed <-136.896664> / tailspeed;
		
	wait-for-turn wingr around y-axis;
	start-script RestoreAfterDelay();
	
	return(TRUE);
	}
	
Shot1()
	{	
	var tailspeed;
	tailspeed = 1;
	var shotpos;
	shotpos = -1;
	turn flare to x-axis <13.049453>/shotpos speed <-93.210378> / tailspeed;
	turn thor1 to x-axis <-35.725175>/shotpos speed <-255.179819> / tailspeed;
	turn thor2 to x-axis <-21.799876>/shotpos speed <-155.713396> / tailspeed;
	turn thor3 to x-axis <-6.812812>/shotpos speed <-48.662942> / tailspeed;
	turn thor4 to x-axis <4.699225>/shotpos speed <-33.565894> / tailspeed;
	turn thor5 to x-axis <15.162363>/shotpos speed <-108.302590> / tailspeed;
	turn thor6 to x-axis <19.165533>/shotpos speed <-136.896664> / tailspeed;
	}

Killed( severity, corpsetype )
{
	isDying = TRUE;
	corpsetype = 1;
	signal SIGNAL_MOVE;
	emit-sfx 1025 from torso;
	if (RAND(0,100)<severity) explode torso type FALL | NOHEATCLOUD;
	if (RAND(0,100)<severity) explode leg1l type FALL | NOHEATCLOUD;
	if (RAND(0,100)<severity) explode thigh2l type FALL | NOHEATCLOUD;
	if (RAND(0,100)<severity) explode foot3l type FALL | NOHEATCLOUD;
	if (RAND(0,100)<severity) explode leg1r type FALL | NOHEATCLOUD;
	if (RAND(0,100)<severity) explode thigh2r type FALL | NOHEATCLOUD;
	if (RAND(0,100)<severity) explode foot3r type FALL | NOHEATCLOUD;
	return( 0 );
}