#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece   base, aimy1, aimx1, turret, sleeve, sleeve2, barrel, flare, fflap, lflap, rflap, lflaph, rflaph;

static-var  deployed, restore_delay, statechg_DesiredState, statechg_StateChanging, tilt;

// Signal definitions
#define SIG_AIM				2


activatescr()
{
	turn lflaph to x-axis <100> speed <50>;
	turn rflaph to x-axis <100> speed <50>;
	turn fflap to x-axis <100> speed <50>;
	wait-for-turn fflap around x-axis;


	move aimy1 to y-axis [20] speed [20];
	wait-for-move aimy1 along y-axis;
	
	wait-for-move aimy1 along y-axis;
	move sleeve to y-axis [10] speed [33];
	wait-for-move sleeve along y-axis;
	
	move sleeve2 to y-axis [10] speed [33];
	wait-for-move sleeve2 along y-axis;
	
	move barrel to y-axis [10] speed [33];
	wait-for-move barrel along y-axis;
	deployed = 1;
	return (0);
}

deactivatescr()//jesus this is a daisy chain
{

	deployed = 0;
	
	turn aimy1 to y-axis <0> speed <30>;
	turn aimx1 to x-axis <0> speed <30>;
	
	move aimy1 to y-axis [0] speed [10];
	wait-for-move aimy1 along y-axis;
	
	move sleeve to y-axis [0] speed [10];
	move sleeve2 to y-axis [0] speed [10];
	move barrel to y-axis [0] speed [10];
	
	turn lflaph to x-axis <0> speed <50>;
	turn rflaph to x-axis <0> speed <50>;
	turn fflap to x-axis <0> speed <50>;
	

	sleep 1000;
	return (0);

}

Go()
{
	call-script activatescr();
	return (0);
}

Stop()
{
	sleep 4000;
	call-script deactivatescr();
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	turn lflaph to y-axis <120> now;
	turn lflap to y-axis <-120> now;
	turn rflaph to y-axis <-120> now;
	turn rflap to y-axis <120> now;
	
	hide flare;
	deployed = 0;
	restore_delay = 3000;
	call-script InitState();
	return (0);
}

#define SMOKEPIECE base
#include "smokeunit_thread_nohit.h"

Activate()
{
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	start-script RequestState(1);
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
	return (0);
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	set-signal-mask 0;
	start-script RequestState(1);
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( deployed==0 )//deny until deployed
	{
		sleep 250;
	}

	turn aimy1 to y-axis heading speed <50>;
	tilt = (pitch/4);//this should not be needed yet here we are
	turn aimx1 to x-axis tilt speed <30>;
	
	wait-for-turn aimy1 around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	emit-sfx 1024 + 0 from flare;
	emit-sfx 1024 + 1 from flare;
	move sleeve to y-axis [5] now;
	move sleeve2 to y-axis [5] now;
	move barrel to y-axis [5] now;
	sleep 100;
	move sleeve to y-axis [10] speed [5];
	move sleeve2 to y-axis [10] speed [4];
	move barrel to y-axis [10] speed [3];
	
	start-script RequestState(1);
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = barrel;
	return (0);
}
AimFromPrimary (piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode sleeve type BITMAPONLY | NOHEATCLOUD;
		explode lflap type FIRE | SMOKE | FALL | BITMAPONLY | NOHEATCLOUD;
		explode barrel type BITMAPONLY | NOHEATCLOUD;
		explode sleeve2 type BITMAPONLY | NOHEATCLOUD;
		explode rflap type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode sleeve type BITMAPONLY | NOHEATCLOUD;
		explode barrel type FALL | NOHEATCLOUD;
		explode sleeve2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode sleeve type BITMAPONLY | NOHEATCLOUD;
		explode lflap type BITMAPONLY | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve2 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode rflap type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode sleeve type BITMAPONLY | NOHEATCLOUD;
		explode lflap type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode sleeve2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode rflap type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
