

#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"


piece base, blade1, blade2, blade3, blade4, blade5, blade6, cagelight1, cagelight2, cagelight3, siloVent, 
flare, cagelight_emit1, cagelight_emit2, cagelight_emit3, ventSmoke;
static-var  restore_delay, shotcount, issmoking;

static-var  silo_state;
// 0 = closed
// 1 = opening
// 2 = opened
// 3 = closing, fired missile
// 4 = closing, no missile fired

#define SMOKEPIECE base
#include "smokeunit_thread_nohit.h"

// Signal definitions
#define SIG_AIM				2

SmokeItUp()
{	
	if (issmoking == 0 OR TRUE)
	{
		issmoking = 1;
		emit-sfx 257 from ventSmoke;
		sleep 500;
		issmoking = 1;
		emit-sfx 257 from ventSmoke;
		sleep 500;
		issmoking = 1;
		emit-sfx 257 from ventSmoke;
		sleep 500;
		issmoking = 1;
		emit-sfx 257 from ventSmoke;
		sleep 500;
		issmoking = 1;
		emit-sfx 257 from ventSmoke;
		sleep 500;
		issmoking = 1;
		emit-sfx 257 from ventSmoke;
		sleep 500;
		issmoking = 1;
		emit-sfx 257 from ventSmoke;
		sleep 500;
		issmoking = 1;
		emit-sfx 257 from ventSmoke;
		sleep 500;
		issmoking = 1;
		emit-sfx 257 from ventSmoke;
		sleep 500;
		issmoking = 1;
		emit-sfx 257 from ventSmoke;
		sleep 500;
		issmoking = 0;
	}
}

Create()
{
	issmoking = 0;
	hide flare;
	hide cagelight_emit1;
	hide cagelight_emit2;
	hide cagelight_emit3;
	hide ventSmoke;

	move cagelight1 to y-axis [-2] now;
	move cagelight2 to y-axis [-2] now;
	move cagelight3 to y-axis [-2] now;

	shotcount = 0;
	restore_delay = 15000;
	silo_state = 0;
	return (0);
}

lua_UnitScriptLight(lightIndex, count) 
{
	return 0;
}

OpenSilo()
{
	if ( (silo_state==0) OR (silo_state==4) )
	{
		// the sound effect
		emit-sfx 4096 + 1 from flare;
	}
	if ( NOT (silo_state==3) )
	{
		// 8.5 seconds to open up
		silo_state = 1;
		show cagelight_emit1;
		show cagelight_emit2;
		show cagelight_emit3;
		move cagelight1 to y-axis [0] speed [0.5];
		move cagelight2 to y-axis [0] speed [0.5];
		move cagelight3 to y-axis [0] speed [0.5];
		spin cagelight1 around y-axis speed <420> accelerate <10>;
		spin cagelight2 around y-axis speed <420> accelerate <10>;
		spin cagelight3 around y-axis speed <420> accelerate <10>;

		//turn door1 to z-axis <127.5> speed <15>;
		//turn door2 to z-axis <-127.5> speed <15>;

		turn blade1 to y-axis <-35> speed <4.118>;
		turn blade2 to y-axis <-35> speed <4.118>;
		turn blade3 to y-axis <-35> speed <4.118>;
		turn blade4 to y-axis <-35> speed <4.118>;
		turn blade5 to y-axis <-35> speed <4.118>;
		turn blade6 to y-axis <-35> speed <4.118>;

		turn siloVent to x-axis <-45> speed <8>;
		wait-for-turn blade1 around y-axis;
		
		silo_state = 2;
	}
}

CloseSiloDoors()
{
	// 30 seconds to close from <127.5> open position
	show ventSmoke;
	start-script SmokeItUp();
	stop-spin cagelight1 around y-axis decelerate <10>;
	stop-spin cagelight2 around y-axis decelerate <10>;
	stop-spin cagelight3 around y-axis decelerate <10>;
	move cagelight1 to y-axis [-2] speed [0.5];
	move cagelight2 to y-axis [-2] speed [0.5];
	move cagelight3 to y-axis [-2] speed [0.5];

	turn siloVent to x-axis <0> speed <4>;

	turn blade1 to y-axis <0> speed <1.167>;
	turn blade2 to y-axis <0> speed <1.167>;
	turn blade3 to y-axis <0> speed <1.167>;
	turn blade4 to y-axis <0> speed <1.167>;
	turn blade5 to y-axis <0> speed <1.167>;
	turn blade6 to y-axis <0> speed <1.167>;

	wait-for-move cagelight1 along y-axis;
	hide cagelight_emit1;
	hide cagelight_emit2;
	hide cagelight_emit3;
	
	wait-for-turn blade1 around y-axis;
	hide ventSmoke;
	silo_state = 0;
}

CloseSilo_Fired()
{
	silo_state = 3;
	signal SIG_AIM; // kill any OpenSilo threads
	start-script CloseSiloDoors();
}

RestoreAfterDelay()
{
	sleep restore_delay;
	if ( NOT (silo_state==3) )
	{
		silo_state = 4;
		start-script CloseSiloDoors();
	}
	return (0);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	start-script OpenSilo();
	start-script RestoreAfterDelay();
	if (silo_state == 2)
	{
		return (1);
	}
	return (0);
}

FirePrimary()
{
	shotcount = shotcount + 1;
	call-script lua_UnitScriptLight(1, shotcount);
	call-script lua_UnitScriptLight(2, shotcount);
	start-script CloseSilo_Fired();
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode blade1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode blade2 type BITMAPONLY | NOHEATCLOUD;
		explode flare type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode blade1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode blade2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode blade1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode blade2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode blade1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode blade2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
