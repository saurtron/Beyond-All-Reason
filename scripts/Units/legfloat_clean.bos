
#include "../recoil_common_includes.h"

piece  hull, lankle, lwheel, rankle, rwheel, turret, gun, barrel,
       flare, aaturret, aagun, aabarrel, aaflare, smoke, fwater;

static-var  restore_delay, oldheading, isAiming, Stunned, moving;

// Signal definitions
#define SIGNAL_AIM1 256
#define SIGNAL_AIM2 512


Steering(heading, steery, currentspeed)
{
	signal 8;
	set-signal-mask 8;
	while( TRUE )
	{
		if( get GROUND_WATER_HEIGHT(get UNIT_XZ) > 0 )
		{
			move hull to y-axis [0] speed [8];
			turn rankle to x-axis <0.0> speed <100.0>;
			turn lankle to x-axis <0.0> speed <100.0>;
			heading = get HEADING;
			steery = ( heading - oldheading ) * 3;
			turn rankle to y-axis steery speed <75.0>;
			turn lankle to y-axis steery speed <75.0>;
			currentspeed = <5.5> * ((get CURRENT_SPEED) * 100 / get MAX_SPEED);
			if( currentspeed < <100> )
			{
				currentspeed = <100>;
			}
			spin rwheel around x-axis speed currentspeed;
			spin lwheel around x-axis speed currentspeed;
			sleep 66;
			oldheading = heading;
		}
		if( get GROUND_WATER_HEIGHT(get UNIT_XZ) <= 0 )
		{
			move hull to y-axis [-8] speed [2.5000000];
			turn rankle to y-axis <0.0> speed <75.0>;
			turn lankle to y-axis <0.0> speed <75.0>;
			stop-spin rwheel around x-axis decelerate <5.0>;
			stop-spin lwheel around x-axis decelerate <5.0>;
			sleep 50;
			turn rankle to x-axis <-30.0> speed <50.0>;
			turn lankle to x-axis <-30.0> speed <50.0>;
		}
	}
}

Wake()
{
	var waketime;
    var bowtime;
    bowtime = 0;
	while( TRUE )
	{
	if( get GROUND_WATER_HEIGHT(get UNIT_XZ) < 0 )
		{
        	emit-sfx 1024 + 1 from smoke;
        	if (bowtime AND moving) emit-sfx 1024 + 2 from hull;
        	bowtime = !bowtime;
        	waketime = (get CURRENT_SPEED) * 100 / get MAX_SPEED;
        	if( waketime < 20 ) waketime = 20;
        	sleep 15000 / waketime;
        }
    if( get GROUND_WATER_HEIGHT(get UNIT_XZ) >= 0 )
		{
			sleep 500;
		}
    }
}


StartMoving(reversing)
{
	start-script Steering();
	moving = 1;
	turn hull to x-axis <-7.0> speed <11.0>;
	wait-for-turn hull around x-axis;
	turn hull to x-axis <0.0> speed <11.0>;
}

StopMoving()
{
	moving = 0;
	turn hull to x-axis <1.0> speed <5.0>;
	wait-for-turn hull around x-axis;
	turn hull to x-axis <0.0> speed <5.0>;
	signal 8;
	stop-spin rwheel around x-axis;
	stop-spin lwheel around x-axis;
}
#define SMOKE_PIECE hull
#include "../damagedsmoke.h"
Create()
{
	hide flare;
	hide fwater;
	moving= 0;
	restore_delay = 3000;
	start-script Wake();
	SLEEP_UNTIL_UNITFINISHED;
	start-script DamagedSmoke();
}

SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 2;
}

ExecuteRestoreAfterDelay()
{
	if(Stunned)
	{
		return (1);
	}
	set-signal-mask 0;
	turn turret to y-axis <0.0> speed <90.0>;
	turn gun to x-axis <0.0> speed <50.0>;
	turn aaturret to y-axis <0.0> speed <120.0>;
	turn aagun to x-axis <0.0> speed <70.0>;
	stop-spin aabarrel around z-axis decelerate <5.0>;
}

SetStunned(State)
{
	Stunned = State;
	if( !Stunned )
	{
		start-script ExecuteRestoreAfterDelay();
	}
}

RestoreAfterDelay()
{
	stop-spin aabarrel around z-axis decelerate <5.0>;
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	turn turret to y-axis heading speed <60.0>;
	turn gun to x-axis <0.0> - pitch speed <30.0>;
	wait-for-turn turret around y-axis;
	wait-for-turn gun around x-axis;
	isAiming = heading;
	start-script RestoreAfterDelay();
	return (1);
}

Rock_Main_Cannon()
{
	if( get GROUND_WATER_HEIGHT(get UNIT_XZ) >= 0 )
	{
		turn hull to z-axis <0.0> - (GET KSIN(isAiming)) * 3 / 2 speed <125.0>;
		turn hull to x-axis <0.0> - (GET KCOS(isAiming)) * 9 / 10 speed <75.0>;
		wait-for-turn hull around z-axis;
		wait-for-turn hull around x-axis;
		turn hull to z-axis <0.0> speed <45.0>;
		turn hull to x-axis <0.0> speed <27.0>;
	}
	if( get GROUND_WATER_HEIGHT(get UNIT_XZ) < 0 )
	{
		turn hull to z-axis <0.0> - (GET KSIN(isAiming)) * 3 speed <125.0>;
		turn hull to x-axis <0.0> - (GET KCOS(isAiming)) * 9 / 5 speed <75.0>;
		wait-for-turn hull around z-axis;
		wait-for-turn hull around x-axis;
		turn hull to z-axis <0.0> speed <15.0>;
		turn hull to x-axis <0.0> speed <9.0>;
	}
}

AimWeapon2(heading, pitch)
{ 
    var gun_xz;
    gun_xz = get PIECE_XZ(gun);                                //get packed gun coordinates
    var gun_x;
    gun_x = (gun_xz & 0xffff0000) / 0x00010000;                //unpack x coordinates of gun (credit for unpack code goes to Beherith)
    var gun_z;
    gun_z = (gun_xz & 0x0000ffff);                            //unpack z coordinates of gun
    
    var turret_xz;
    turret_xz = get PIECE_XZ(turret);                        //get packed turret coordinates
    var turret_x;
    turret_x = (turret_xz & 0xffff0000) / 0x00010000;        //unpack x coordinates of turret
    var turret_z;
    turret_z = (turret_xz & 0x0000ffff);                    //unpack z coordinates of turret
    
    var aim_x;
    var aim_z;
    aim_x = gun_x - turret_x;                                //calculate relative coordinates of the gun to the turret (how far away it is in each direction)
    aim_z = gun_z - turret_z;
    
    
    var hull_xz;
    hull_xz = get PIECE_XZ(hull);                            //get packed hull coordinates
    var hull_x;
    hull_x = (hull_xz & 0xffff0000) / 0x00010000;            //unpack x coordinates of hull
    var hull_z;
    hull_z = (hull_xz & 0x0000ffff);                        //unpack z coordinates of hull
    
    var smoke_xz;
    smoke_xz = get PIECE_XZ(smoke);                            //get packed smoke coordinates
    var smoke_x;
    smoke_x = (smoke_xz & 0xffff0000) / 0x00010000;            //unpack x coordinates of smoke
    var smoke_z;
    smoke_z = (smoke_xz & 0x0000ffff);                        //unpack z coordinates of smoke
    
    var face_x;
    var face_z;
    face_x = hull_x - smoke_x;                                //calculate relative coordinates of the hull to the smoke (how far away it is in each direction)
    face_z = hull_z - smoke_z;
	
	var cauaim;
    var cauface;
    cauaim = get ATAN(aim_z, aim_x);                        //use arctan (ATAN) to calculate the angle of the turret. The result is in cau, which is the unit this code format uses for angles. Its up to 32768 (180°), positive or negative depending on direction
    cauface = get ATAN(face_z, face_x);                        //use arctan (ATAN) to calculate the angle of the hull. The result is in cau, which is the unit this code format uses for angles. Its up to 32768 (180°), positive or negative depending on direction
    
    var trueaim;
    trueaim = cauaim - cauface;                                //calculate angle of turret relative to the hull
    
    signal SIGNAL_AIM2;
    set-signal-mask SIGNAL_AIM2;
    turn aaturret to y-axis heading + trueaim speed <300.0>;    //add the result to the y axis heading
    turn aagun to x-axis <0.0> - pitch speed <65.0>;        //the rest of the AimWeapon2 script
    wait-for-turn aaturret around y-axis;
    wait-for-turn aagun around x-axis;
    start-script RestoreAfterDelay();
    return (1);
}

FireWeapon1()
{
	start-script Rock_Main_Cannon();
	emit-sfx 1024 + 0 from flare;
	emit-sfx 1024 + 3 from fwater;
	move barrel to z-axis [-3.0] speed [500.0];
	wait-for-move barrel along z-axis;
	move barrel to z-axis [0.0] speed [3.0];
}

FireWeapon2()
{
	spin aabarrel around z-axis speed <900.0>;
	return (1);
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = gun;
}

AimFromWeapon2(pieceIndex)
{
	pieceIndex = aagun;
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flare;
}

QueryWeapon2(pieceIndex)
{
	pieceIndex = aaflare;
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode hull type BITMAPONLY | 128;
		explode turret type BITMAPONLY | 128;
		explode barrel type FIRE | SMOKE | FALL | 128;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode hull type BITMAPONLY | 128;
		explode turret type FALL | 128;
		explode gun type FALL | 128;
		explode barrel type FIRE | SMOKE | FALL | 128;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode hull type FIRE | SMOKE | FALL | 128;
		explode turret type EXPLODE_ON_HIT | SMOKE | FALL | 128;
		explode gun type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | 128;
		explode barrel type EXPLODE_ON_HIT | SMOKE | FALL | 128;
		return (corpsetype);
	}
	corpsetype = 3;
	explode hull type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | 128;
	explode turret type EXPLODE_ON_HIT | FIRE | FALL | 128;
	explode gun type EXPLODE_ON_HIT | FIRE | FALL | 128;
	explode barrel type EXPLODE_ON_HIT | FIRE | FALL | 128;
	return (corpsetype);
}
