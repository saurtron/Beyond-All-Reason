#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1a, flare1b, flare2a, flare2b,  base, turret1,
       turret2, sleeve1, sleeve2, barrel1a, barrel1b, barrel2a, barrel2b,
        ground, wake, bow, barrelblast;

static-var  weapon1barrel, weapon2barrel, restore_delay, gun_1, gun_2, oldHead, aimy1target, aimy1position, Func_Var_1, Func_Var_2, Static_Var_4, Static_Var_5;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_MOVE			8
#define SIG_ROCK			16


SetDirection(heading)
{
	var spd;
	spd = (get ABS(oldHead) - get ABS(heading)) / 2;
	turn ground to y-axis heading speed spd;
	turn base to y-axis 0-heading speed spd;
	oldHead = heading;
}

/// semi temporary old rock code, replace when possible
ProjXPW(Func_Var_1, Func_Var_2)
{
	if( Func_Var_2 < -21840 )
	{
		Static_Var_4 = Func_Var_1 * ( Func_Var_2 + 32760 ) / 10920;
	}
	else if( Func_Var_2 > 21840 )
	{
		Static_Var_4 = Func_Var_1 * ( 32760 - Func_Var_2 ) / 10920;
	}
	else if( Func_Var_2 < -10920 )
	{
		Static_Var_4 = 0 - Func_Var_1;
	}
	else if( Func_Var_2 > 10920 )
	{
		Static_Var_4 = Func_Var_1;
	}
	else
	{
		Static_Var_4 = Func_Var_1 * Func_Var_2 / 10920;
	}
}

RockZ(Func_Var_1, Func_Var_2)
{
	signal SIG_ROCK;
	set-signal-mask SIG_ROCK;
	call-script ProjXPW(10920 / Func_Var_2,Func_Var_1);
	Static_Var_5 = Static_Var_5 + Static_Var_4;
	Static_Var_4 = get ABS(Static_Var_5);
	while( Static_Var_4 > 91 )
	{
		turn base to z-axis Static_Var_5 speed Static_Var_4 * <0.016484>;
		wait-for-turn base around z-axis;
		Static_Var_5 = Static_Var_5 * -1 / 2;
		Static_Var_4 = get ABS(Static_Var_5);
	}
	turn base to z-axis <0.000000> speed <1.5>;
}

// end rocky stuff


MoveBarrelBlast(flarepiece) // Pass whichever piece you want to locate on XZ
{

	var flarepiece_xz;	
	
	flarepiece_xz = get PIECE_XZ(flarepiece); // returns packed xz worldpos of piece
	/*
	var flare_x;
	var flare_z;
	flare_z = (flarepiece_xz & 0x0000ffff); // silly unpack
	flare_x = (flarepiece_xz & 0xffff0000) / 0x00010000; // yes this works
	//get PRINT(get GAME_FRAME, flarepiece, flare_x, flare_z);
	
	var unit_xz;
	unit_xz = get UNIT_XZ(0); // returns packed xz worldpos of unit
	var unit_x;
	var unit_z;
	unit_z = (unit_xz & 0x0000ffff);
	unit_x = (unit_xz & 0xffff0000) / 0x00010000;
	
	//Transform from world space to unit space	
	flare_x = flare_x - unit_x;
	flare_z = flare_z - unit_z;
	
	var unit_h;
	unit_h = get HEADING(0); // gets the units angle
	
	var sin_h ;
	var cos_h ; 
	sin_h = get KSIN(unit_h); // transform into sine and cosine
	cos_h = get KCOS(unit_h);
	// When the unit is pointing towards +Z, the heading is 0, the sinh is 0, the cosh is 1024
	
	
	//get PRINT(666, unit_h, sin_h, cos_h);
	// rotate the vector by HEADING angle
	var delta_x;
	var delta_z;
	delta_x = (flare_x * cos_h + flare_z * sin_h) / 1024;
	delta_z = (flare_z * cos_h - flare_x * sin_h) /1024;
	
	
	//get PRINT(get GAME_FRAME, 0, delta_x, delta_z);
	// move the piece into the correct pos, and rotate it upward
	move barrelblast to x-axis [-1] * (delta_x) now; // x is inverted, fuck if I know why
	move barrelblast to z-axis [1] * (delta_z) now;
	turn barrelblast to x-axis <-90> now;
	
	// emit the effect
	emit-sfx 1024 + 0 from barrelblast;
	*/
}

// Pass whichever piece you want to locate on XZ, AND the turret that it rotates around in Y
// Also tell how many percent further out you want the emit to happend (100% is exactly under flarepiece, 200% is 2x further from TURRET)
MoveBarrelBlastTurret(flarepiece, turretpiece, percentfurther) 
{
	
	var flarepiece_xz;	
	flarepiece_xz = get PIECE_XZ(flarepiece); // returns packed xz worldpos of piece
	/*
	var flare_x;
	var flare_z;
	flare_z = (flarepiece_xz & 0x0000ffff); // silly unpack
	flare_x = (flarepiece_xz & 0xffff0000) / 0x00010000; // yes this works
	//get PRINT(get GAME_FRAME, flarepiece, flare_x, flare_z);
	
	var unit_xz;
	unit_xz = get UNIT_XZ(0); // returns packed xz worldpos of unit
	var unit_x;
	var unit_z;
	unit_z = (unit_xz & 0x0000ffff);
	unit_x = (unit_xz & 0xffff0000) / 0x00010000;
	
	var turret_xz;
	turret_xz = get PIECE_XZ(turretpiece); // returns packed xz worldpos of unit
	var turret_x;
	var turret_z;
	turret_z = (turret_xz & 0x0000ffff);
	turret_x = (turret_xz & 0xffff0000) / 0x00010000;
	
	//Transform from world space to unit space
	// Make flare relative to turret here
	flare_x = flare_x - turret_x;
	flare_z = flare_z - turret_z;
	
	// Make turret relative to unit:
	turret_x = turret_x - unit_x;
	turret_z = turret_z - unit_z;
	
	get PRINT(flare_x, flare_z, turret_x, turret_z);
	var unit_h;
	unit_h = get HEADING(0); // gets the units angle
	
	var sin_h ;
	var cos_h ; 
	sin_h = get KSIN(unit_h); // transform into sine and cosine
	cos_h = get KCOS(unit_h);
	// When the unit is pointing towards +Z, the heading is 0, the sinh is 0, the cosh is 1024
	
	
	//get PRINT(666, unit_h, sin_h, cos_h);
	// rotate the vector by HEADING angle
	var delta_x;
	var delta_z;
	delta_x = percentfurther *(flare_x * cos_h + flare_z * sin_h) /(1024*100);
	delta_z = percentfurther *(flare_z * cos_h - flare_x * sin_h) /(1024*100);
	
	delta_x = delta_x + (turret_x * cos_h + turret_z * sin_h) /1024;
	delta_z = delta_z + (turret_z * cos_h - turret_x * sin_h) /1024;
	
	
	//get PRINT(get GAME_FRAME, 0, delta_x, delta_z);
	// move the piece into the correct pos, and rotate it upward
	move barrelblast to x-axis [-1] * (delta_x) now; // x is inverted, fuck if I know why
	move barrelblast to z-axis [1] * (delta_z) now;
	turn barrelblast to x-axis <-90> now;
	
	// emit the effect
	emit-sfx 1024 + 0 from barrelblast;
	*/
}

#define BASEPIECE base
#define HITSPEED <20.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 10
#define MAXTILT 100

#include "unit_hitbyweaponid_and_smoke.h"

RockOnWaves()
{
	var rockDir, rockAng, rockSpeed;
	rockDir = <-0.1>;
	rockAng = <-0.1>;
	while( TRUE )
	{
		while( get ABS(rockAng) < <1.11> )
		{
			rockSpeed = <1.25> - get ABS(rockAng);
			turn ground to x-axis rockAng speed rockSpeed*2;
			wait-for-turn ground around x-axis;
			rockAng = rockAng + rockDir;
		}
		rockDir = 0 - rockDir;
		rockAng = rockAng + rockDir + rockDir;
	}
}


Create()
{
	hide bow;
	hide wake;
	hide flare2b;
	hide flare2a;
	hide flare1a;
	hide flare1b;
	hide ground;
	weapon1barrel = TRUE;
	weapon2barrel = 1;
	gun_1 = flare1a;
	gun_2 = flare1a;
	aimy1target = 0;
	aimy1position = 0;
	restore_delay = 3000;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script RockOnWaves();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 8;
}

RestorePrimary()
{
	sleep restore_delay;
	turn turret1 to y-axis <0.000000> speed <55.000000>;
	turn sleeve1 to x-axis <0.000000> speed <30.000000>;
	weapon1barrel = 1;
}

RestoreSecondary()
{
	sleep restore_delay;
	turn turret2 to y-axis <0.000000> speed <55.000000>;
	turn sleeve2 to x-axis <0.000000> speed <30.000000>;
	weapon2barrel = 1;
}

waveSplash()
{
	while( TRUE )
	{
		turn base to x-axis <-1.0> speed <1.0>;
		move base to y-axis [0.23] speed [0.17];
		wait-for-turn base around x-axis;
		turn base to x-axis <0.0> speed <1.0>;
		move base to y-axis [0.0] speed [0.17];
		wait-for-turn base around x-axis;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	var waketime;
	start-script waveSplash();
	var bowtime;
	bowtime = 0;
	while( TRUE )
	{
		emit-sfx 1024 + 1 from wake;
		if (bowtime) emit-sfx 1024 + 2 from bow;
        	bowtime = !bowtime;
		waketime = (get CURRENT_SPEED) * 100 / get MAX_SPEED;
		if( waketime < 50 ) waketime = 50;
		sleep 12000 / waketime;
	}
}

StopMoving()
{
	signal SIG_MOVE;
	turn base to x-axis <0.0> speed <1.0>;
	move base to y-axis [0.0] speed [0.17];
}

AimPrimary(heading, pitch)
{

	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret1 to y-axis heading speed <55.000000>;
	turn turret1 to x-axis <0.000000> - pitch speed <30.000000>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn turret1 around x-axis;
	while( gun_1 )
	{
		wait-for-move barrel1a along z-axis;
		wait-for-move barrel1b along z-axis;
		weapon1barrel = TRUE;
		gun_1 = flare1a;
	}
	start-script RestorePrimary();



	aimy1target = heading;
	return (1);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turret2 to y-axis heading speed <55.000000>;
	turn turret2 to x-axis <0.000000> - pitch speed <30.000000>;
	wait-for-turn turret2 around y-axis;
	wait-for-turn turret2 around x-axis;
	while( gun_2 )
	{
		wait-for-move barrel2a along z-axis;
		wait-for-move barrel2b along z-axis;
		weapon2barrel = 1;
		gun_2 = flare1a;
	}
	start-script RestoreSecondary();
	aimy1target = heading;
	return (1);
}

FirePrimary()
{
	start-script RockZ(-13, aimy1target);

	if( weapon1barrel == 1 )
	{
	    emit-sfx 1024 + 0 from flare1a;
		move barrel1a to z-axis [-2.500000] now;
		sleep 100;
		move barrel1a to z-axis [0.000000] speed [1.000000];
		call-script MoveBarrelBlast(barrel1a);
	}
	if( weapon1barrel == 2 )
	{
	    emit-sfx 1024 + 0 from flare1b;
		move barrel1b to z-axis [-2.500000] now;
		sleep 100;
		move barrel1b to z-axis [0.000000] speed [1.000000];
	}
	++weapon1barrel;
	if (weapon1barrel > 2)
	{
	weapon1barrel = 1;
	}
}

FireSecondary()
{
	start-script RockZ(-13, aimy1target);
	if( weapon2barrel == 2 )
	{
	    emit-sfx 1024 + 0 from flare2a;
		move barrel2a to z-axis [-2.500000] now;
		sleep 100;
		move barrel2a to z-axis [0.000000] speed [1.000000];
		call-script MoveBarrelBlastTurret(barrel2a, turret2, 300);
	}
	if( weapon2barrel == 1 )
	{
	    emit-sfx 1024 + 0 from flare2b;
		move barrel2b to z-axis [-2.500000] now;
		sleep 100;
		move barrel2b to z-axis [0.000000] speed [1.000000];
	}
	++weapon2barrel;
	if (weapon2barrel > 2)
	{
	weapon2barrel = 1;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret1;
}

QueryPrimary(piecenum)
{
	if( weapon1barrel == 1 )
	{
		piecenum = flare1a;
	}
	if( weapon1barrel == 2 )
	{
		piecenum = flare1b;
	}
}

AimFromSecondary(piecenum)
{
	piecenum = turret2;
}

QuerySecondary(piecenum)
{
	if( weapon2barrel == 1 )
	{
		piecenum = flare2a;
	}
	if( weapon2barrel == 2 )
	{
		piecenum = flare2b;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode ground type BITMAPONLY | NOHEATCLOUD;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret2 type BITMAPONLY | NOHEATCLOUD;
		explode sleeve2 type BITMAPONLY | NOHEATCLOUD;
		explode barrel2b type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare2b type BITMAPONLY | NOHEATCLOUD;
		explode barrel2a type BITMAPONLY | NOHEATCLOUD;
		//explode flare2a type BITMAPONLY | NOHEATCLOUD;
		//explode turret1 type BITMAPONLY | NOHEATCLOUD;
		//explode sleeve1 type BITMAPONLY | NOHEATCLOUD;
		//explode barrel1a type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare1a type BITMAPONLY | NOHEATCLOUD;
		//explode barrel1b type BITMAPONLY | NOHEATCLOUD;
		//explode flare1b type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode ground type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret2 type FALL | NOHEATCLOUD;
		explode sleeve2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel2b type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare2b type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel2a type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare2a type FALL | NOHEATCLOUD;
		//explode turret1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode sleeve1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode barrel1a type FALL | NOHEATCLOUD;
		//explode flare1a type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode barrel1b type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare1b type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode ground type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret2 type SMOKE | FALL | NOHEATCLOUD;
		explode sleeve2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel2b type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare2b type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel2a type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode flare2a type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode turret1 type BITMAPONLY | NOHEATCLOUD;
		//explode sleeve1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode barrel1a type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare1a type SMOKE | FALL | NOHEATCLOUD;
		//explode barrel1b type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare1b type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode ground type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode sleeve2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode barrel2b type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode flare2b type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode barrel2a type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare2a type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode turret1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode sleeve1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode barrel1a type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode flare1a type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode barrel1b type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare1b type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
