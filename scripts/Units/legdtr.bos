#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turretbase, turretstrut, barrel, flare, firepoint, lida, lidb, aimfrom, aimpoint;

static-var  is_open, restore_delay, Stunned;

// Signal definitions
#define SIG_AIM				2

Close()
{
	set-signal-mask SIG_AIM;
	is_open = 0;
	turn barrel to x-axis <30> speed <50>;
	wait-for-turn barrel around x-axis;
	turn turretstrut to x-axis <60> speed <50>;
	wait-for-turn turretstrut around x-axis;
	move turretbase to y-axis [-40] speed [50];
	wait-for-move turretbase along y-axis;
	turn lida to z-axis <180> speed <160>;
	turn lidb to z-axis <-180> speed <160>;
	wait-for-turn lida around z-axis;
	hide aimpoint;
	hide aimfrom;
	hide flare;
	hide firepoint;
	set ARMORED to 1;
}

Open()
{
	set ARMORED to 0;
	turn lida to z-axis <0> speed <400>;
	turn lidb to z-axis <0> speed <400>;
	wait-for-turn lidb around z-axis;
	move turretbase to y-axis [0] speed [150]; //move turretbase, turretstrut, barrel to original open spot
	wait-for-move turretbase along y-axis; // wait for turretbase, turretstrut, barrel to move
	turn turretstrut to x-axis <0> speed <150>; // turn turretstrut, barrel, around x-axis to partially open position
	// wait-for-turn turretstrut around x-axis; // wait for turretstrut
	turn barrel to x-axis <0> speed <150>; // turn barrel around x-axis to fully open position
	wait-for-turn barrel around x-axis;
	is_open = 1;	
}

Create()
{
	hide aimpoint;
	hide aimfrom;
	hide flare;
	hide firepoint;
	restore_delay = 2000;
	is_open = 0;
	// move turretbase to y-axis [-20] now;
	// move turretstrut to y-axis [-10] now;
	// move barrel to y-axis [-5] now;

	while ( get BUILD_PERCENT_LEFT )
	{
		sleep 250;
	}
	sleep 250;
	if ( is_open == 0 )
	{
		start-script Close();
	}
}


ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	hide aimpoint;
	hide aimfrom;
	hide flare;
	hide firepoint;
	start-script Close();
}

SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}

RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;

	if ( is_open == 0 )
	{
		start-script Open();
		start-script RestoreAfterDelay();
	}

	while( is_open == 0 )
	{
		sleep 150;
	}

	turn turretbase to y-axis heading speed <200.000000>;
	turn barrel to x-axis <0.000000> - pitch speed <200.000000>;
	wait-for-turn turretbase around y-axis;
	wait-for-turn barrel around x-axis;
	start-script RestoreAfterDelay();
	return(1);
}

FirePrimary()
{
	emit-sfx 1024 + 0 from flare;
}

QueryPrimary(piecenum)
{
	if (is_open == 1)
	{
		piecenum = flare;
	}
	else
	{
		piecenum = aimfrom;
	}
}

SweetSpot(piecenum)
{
	piecenum = aimpoint;
}

AimFromPrimary(piecenum)
{
	piecenum = flare;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turretbase type BITMAPONLY | NOHEATCLOUD;
		explode turretstrut type BITMAPONLY | NOHEATCLOUD;
		explode barrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turretbase type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turretstrut type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type FALL | NOHEATCLOUD;
		explode flare type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turretbase type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turretstrut type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turretbase type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turretstrut type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}