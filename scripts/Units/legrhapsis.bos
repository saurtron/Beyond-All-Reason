#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

// piece  body, turret, launcher, flare1, flare2, flare3, flare4, flare5, flare6, flare7, flare8;
piece base, turret, sleeve, barrelA, barrelB, flareA1, flareA2, flareA3, flareA4, flareA5, flareA6, flareB1, flareB2, flareB3, flareB4, flareB5, flareB6;

static-var  shoot, restore_delay, Stunned, barrel;

// Signal definitions
#define SIG_AIM				2



ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	set-signal-mask 0;
	stop-spin barrelA around z-axis decelerate <30>;
	stop-spin barrelB around z-axis decelerate <30>;
	turn sleeve to x-axis <-30> speed <50>;
	spin turret around y-axis speed <30>;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

Create()
{
	hide flareA1;
	hide flareA2;
	hide flareA3;
	hide flareA4;
	hide flareA5;
	hide flareA6;
	hide flareB1;
	hide flareB2;
	hide flareB3;
	hide flareB4;
	hide flareB5;
	hide flareB6;

	shoot = 1;
	barrel = 0;

	restore_delay = 3000;
	set-signal-mask SIG_AIM;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script RestoreAfterDelay();
}

#define SMOKEPIECE base
#include "smokeunit_thread_nohit.h"

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	stop-spin turret around y-axis;
	turn turret to y-axis heading speed <200.000000>;
	turn sleeve to x-axis 0 - pitch speed <200.000000>;
	wait-for-turn turret around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

QueryPrimary(piecenum)
{
	if(shoot==1) piecenum = flareB1;
	if(shoot==2) piecenum = flareA1;
}

AimFromPrimary(piecenum)
{
	piecenum = sleeve;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

FirePrimary()
{
	//looks like intentionally no visual flares on rocket type AA?
	//spin barrelA around z-axis speed <600.000000>;
	//shoot++;
	//if (shoot>10) shoot = 5;

	
	if(shoot==1){
		spin barrelA around z-axis speed <900.000000>;
		stop-spin barrelB around z-axis decelerate <50>;
		stop-spin barrelA around z-axis decelerate <30>;
		//++shoot;
	}
	if(shoot==2){
		spin barrelB around z-axis speed <-900.000000>;
		stop-spin barrelA around z-axis decelerate <50>;
		stop-spin barrelB around z-axis decelerate <30>;
		//++shoot;
	}
	++shoot;
	if(shoot==3){
		shoot = 1;
	}
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode sleeve type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FALL | NOHEATCLOUD;
		explode sleeve type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
