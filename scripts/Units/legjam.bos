
#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

// piece  base,dish;
piece base, strut, dishA, dishB, dishC, dishD;

static-var  statechg_DesiredState, statechg_StateChanging;
static-var  Stunned;


Go()
{
	spin strut around y-axis speed <80>;

	move dishD to x-axis [0] speed <600>;
	move dishD to z-axis [0] speed <600>;

	move dishC to x-axis [0] speed <600>;
	move dishC to z-axis [0] speed <600>;

	move dishB to x-axis [0] speed <600>;
	move dishB to z-axis [0] speed <600>;

	move dishA to x-axis [0] speed <600>;
	move dishA to z-axis [0] speed <600>;

	return (0);
}
Stop()
{
	move dishD to x-axis [-3.4] speed <600>;
	move dishD to z-axis [-3.4] speed <600>;

	move dishC to x-axis [3.4] speed <600>;
	move dishC to z-axis [-3.4] speed <600>;

	move dishB to x-axis [3.4] speed <600>;
	move dishB to z-axis [3.4] speed <600>;

	move dishA to x-axis [-3.4] speed <600>;
	move dishA to z-axis [3.4] speed <600>;

	stop-spin strut around y-axis;
	return (0);
}

SetStunned(State)
{
    Stunned = State;
	if (Stunned) {
	    call-script Stop();
	} else {
	    call-script Go();
	}
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	move dishD to x-axis [-3.4] now;
	move dishD to z-axis [-3.4] now;

	move dishC to x-axis [3.4] now;
	move dishC to z-axis [-3.4] now;

	move dishB to x-axis [3.4] now;
	move dishB to z-axis [3.4] now;

	move dishA to x-axis [-3.4] now;
	move dishA to z-axis [3.4] now;

	call-script InitState();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	return (0);
}

#define SMOKEPIECE base
#include "smokeunit_thread_nohit.h"

Activate()
{
	call-script Go();
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	call-script Stop();
	start-script RequestState(1);
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode strut type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode strut type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode strut type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode dishA type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode dishB type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode dishC type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode dishD type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode strut type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode dishA type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode dishB type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode dishC type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode dishD type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
