
#include "../recoil_common_includes.h"

piece  base, turret, flare1, flare2 ;

static-var  gun_1, restore_delay, timeLeft;

// Signal definitions
#define SIGNAL_MOVE 1
#define SIGNAL_AIM1 256
#define SIGNAL_IDLE 8


#define BASEPIECE base
#define HITSPEED <35.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 5
#define MAXTILT 100
#define RECOIL_POWER 100000
#include "../unit_hitbyweaponid_and_smoke.h"

#define TB_BASE base 
#define TB_TURNRATE <11.0> 
#define TB_TILT_X <0.15>
#define TB_BANK_Z <0.15> // Do not define this if you dont want banking
#include "../tilt_bank_mobileunit.h"

Create()
{
	hide flare1;
	hide flare2;
	restore_delay = 3000;
	call-script TB_Init();
}

StartMoving(reversing)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	START_TILTBANK;
}

StopMoving()
{
	signal SIGNAL_MOVE;
	STOP_TILTBANK;
}


SetMaxReloadTime(reloadMS)
{
	restore_delay = 2 *reloadMS;
}

static-var  Stunned;
SetStunned(State)
{
    Stunned = State;
}

TimeToRestore(addTime){
	// This function may not be signal terminated
	// If it has to be, it _must_ be immediately restarted
	// PROBLEM: the time that is slept depends on number of aim calls.
	while((timeLeft > 1) || Stunned){
		addTime = timeLeft;
		timeLeft = 1;
		sleep addTime;
	}
	// The restore section must be atomic :/
	timeLeft = 0;
	turn turret to x-axis <0.0> speed <45>;
}

AimWeapon1(heading, pitch)
{
	if (timeLeft == 0)
	{
		// We 
		start-script TimeToRestore();
	}
	timeLeft = restore_delay;
	
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;

	turn turret to x-axis <-90.0> speed <45>;
	wait-for-turn turret around x-axis;

	return (1);
}

FireWeapon1()
{
	gun_1 = !gun_1;
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flare1 + gun_1;
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare1 type BITMAPONLY | NOHEATCLOUD;
		
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare1 type FALL | NOHEATCLOUD;
		
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type SMOKE | FALL | NOHEATCLOUD;
		explode flare1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode flare1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		
	return corpsetype;
}
