#include "../recoil_common_includes.h"

#define SIGNAL_MOVE 1
#define SIGNAL_BUILD 2

piece base, mlwheel, mrwheel, blwheel, brwheel, flwheel, frwheel, arml, armr, lpanel, rpanel, solar, cylinderdeco, loturret, upturret, nano, beam, cagelight, cagelight_emit;

static-var  restore_delay, readyToBuild, currentSpeed, moveSpeed, wheelSpeed, oldHeading;

#define TB_BASE base 
#define TB_TURNRATE <15.0> 
#define TB_TILT_X <0.1>
#define TB_BANK_Z <0.1> // Do not define this if you dont want banking
#include "../tilt_bank_mobileunit.h"


// Controls wheel spinning and steering
Steering(heading, steery, currentSpeed)
{
	while(1)
	{
		heading = get HEADING;
		steery = (heading - oldheading)*4;
		
		turn flwheel to y-axis steery speed <120>;
		turn frwheel to y-axis steery speed <120>;
		turn blwheel to y-axis 0 - steery speed <120>;
		turn brwheel to y-axis 0 - steery speed <120>;
		
		currentSpeed = (get CURRENT_SPEED)*20/moveSpeed;
		wheelSpeed = currentSpeed * 30; //original speed 7
		if (currentSpeed<1) currentSpeed=1;	// prevent infinite timing	
		
		spin flwheel around x-axis speed  (<1> * wheelSpeed);
		spin frwheel around x-axis speed  (<1> * wheelSpeed);
		spin mlwheel around x-axis speed  (<1> * wheelSpeed);         
		spin mrwheel around x-axis speed  (<1> * wheelSpeed);			
		spin blwheel around x-axis speed  (<1> * wheelSpeed);			
		spin brwheel around x-axis speed  (<1> * wheelSpeed);	
		sleep 66;
		oldheading = heading;
	}
}

StartMoving(reversing)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	start-script Steering();
	START_TILTBANK;
}

StopMoving()
{
	signal SIGNAL_MOVE;
	
    stop-spin flwheel around x-axis;
    stop-spin frwheel around x-axis;
    stop-spin mlwheel around x-axis;
    stop-spin mrwheel around x-axis;
    stop-spin blwheel around x-axis;
    stop-spin brwheel around x-axis;
	
	STOP_TILTBANK;
}

#define BASEPIECE base
#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 3
#define MAXTILT 100

#include "../unit_hitbyweaponid_and_smoke.h"

Create()
{
	hide cagelight_emit;
	restore_delay = 6000;
	readyToBuild = 0;
	call-script TB_Init();
	moveSpeed = get MAX_SPEED;
	oldheading = get HEADING;
	start-script Steering();
	SLEEP_UNTIL_UNITFINISHED;
	spin cylinderdeco around x-axis speed <30>;
	set INBUILDSTANCE to FALSE;
}

StartBuilding(heading, pitch)
{
	signal SIGNAL_BUILD;	
	set-signal-mask SIGNAL_BUILD;
	
	if (!readyToBuild){
		turn arml to z-axis <30> speed <180>;
		turn armr to z-axis <-30> speed <180>;
		turn lpanel to z-axis <-20> speed <120>;
		turn rpanel to z-axis <20> speed <120>;
		turn solar to x-axis <-25> speed <50>;
		
		sleep (100);
		
		move loturret to y-axis [4] speed [12];
		move upturret to y-axis [4] speed [12];
		wait-for-move loturret along y-axis;

		move nano to z-axis [3] speed [12];
		move cagelight to y-axis [2] speed [12];
		move loturret to y-axis [4] speed [12];
		move upturret to y-axis [5] speed [12];
		readyToBuild = 1;
	}
	
	turn upturret to y-axis heading speed <160>;
	wait-for-turn upturret around y-axis;

	set INBUILDSTANCE to TRUE;

	show cagelight_emit;
	spin cagelight_emit around y-axis speed <250>;
	
	spin cylinderdeco around x-axis speed <240> accelerate <10>;
	
	readyToBuild = 1;
}

StopBuilding()
{
	signal SIGNAL_BUILD;	
	set-signal-mask SIGNAL_BUILD;
	
	hide cagelight_emit;
	turn cagelight to y-axis <0> speed <1000>;
	
	spin cylinderdeco around x-axis speed <30> accelerate <10>;

	sleep 6000;
	set INBUILDSTANCE to FALSE;
	
	hide cagelight_emit;
	turn cagelight_emit to y-axis <0> now;
	
	turn upturret to y-axis <0> speed <160>;
	wait-for-turn upturret around y-axis;

	move loturret to y-axis [0] speed [12];
	move upturret to y-axis [0] speed [12];
	move nano to z-axis [0] speed [12];
	move cagelight to y-axis [0] speed [12];
	sleep 200;
	
	turn arml to z-axis <0> speed <180>;
	turn armr to z-axis <0> speed <180>;
	turn lpanel to z-axis <0> speed <120>;
	turn rpanel to z-axis <0> speed <120>;
	turn solar to x-axis <0> speed <50>;
	
	readyToBuild = 0;
}

QueryNanoPiece(pieceIndex)
{
	pieceIndex = beam;

}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode solar type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lpanel type BITMAPONLY | NOHEATCLOUD;
		explode rpanel type BITMAPONLY | NOHEATCLOUD;
		explode flwheel type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode solar type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lpanel type FALL | NOHEATCLOUD;
		explode rpanel type FALL | NOHEATCLOUD;
		explode flwheel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode solar type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lpanel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rpanel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flwheel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode solar type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flwheel type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode lpanel type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode rpanel type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode flwheel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}


