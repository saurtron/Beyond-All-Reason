#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, barrel1a, barrel1b, barrel1c, barrel1d, radar, wake,
       bow, engine, tur1, tur2, tur3,
       tur4, tur5, tur6, sleeves1, gun2, sleeves3, sleeves4, gun5,
       gun6, flare1a, flare1b, flare1c, flare1d, flare2, flare3a, flare3b,
       flare4a, flare4b, flare5, flare6,barrel6,sleeves5,sleeves6,barrel5,barrel2,sleeves2 ;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, restore_delay, 
			Static_Var_7, Static_Var_8, aimDir;

// Signal definitions
#define SIG_MOVE			128

#define BASEPIECE base
#define HITSPEED <10.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 15
#define MAXTILT 200
#include "unit_hitbyweaponid_and_smoke.h"

RockOnWaves()
{
	var rockDir, rockAng, rockSpeed;
	rockDir = <-0.1>;
	rockAng = <-0.1>;
	while( TRUE )
	{
		while( get ABS(rockAng) < <1.11> )
		{
			rockSpeed = <1.25> - get ABS(rockAng);
			turn base to x-axis rockAng speed rockSpeed*2;
			wait-for-turn base around x-axis;
			rockAng = rockAng + rockDir;
		}
		rockDir = 0 - rockDir;
		rockAng = rockAng + rockDir + rockDir;
	}
}


ProjXPW(Func_Var_1, Func_Var_2)
{
	if( Func_Var_2 < -21840 )
	{
		Static_Var_7 = Func_Var_1 * ( Func_Var_2 + 32760 ) / 10920;
	}
	else if( Func_Var_2 > 21840 )
	{
		Static_Var_7 = Func_Var_1 * ( 32760 - Func_Var_2 ) / 10920;
	}
	else if( Func_Var_2 < -10920 )
	{
		Static_Var_7 = 0 - Func_Var_1;
	}
	else if( Func_Var_2 > 10920 )
	{
		Static_Var_7 = Func_Var_1;
	}
	else
	{
		Static_Var_7 = Func_Var_1 * Func_Var_2 / 10920;
	}
}

RockZ(Func_Var_1, Func_Var_2)
{
	signal 16;
	set-signal-mask 16;
	call-script ProjXPW(10920 / Func_Var_2,Func_Var_1);
	Static_Var_8 = Static_Var_8 + Static_Var_7;
	Static_Var_7 = get ABS(Static_Var_8);
	while( Static_Var_7 > 91 )
	{
		turn base to z-axis Static_Var_8 speed Static_Var_7 * 2;
		wait-for-turn base around z-axis;
		Static_Var_8 = Static_Var_8 * -1 / 2;
		Static_Var_7 = get ABS(Static_Var_8);
	}
	turn base to z-axis <0.000000> speed <1.5>;
}

Create()
{
	hide engine;
	hide bow;
	hide wake;
	hide flare2;
	hide flare5;
	hide flare6;
	hide flare3a;
	hide flare3b;
	hide flare1b;
	hide flare1d;
	hide flare1c;
	hide flare1a;
	hide flare4b;
	hide flare4a;
	set ARMORED to 1;
	hide flare1a;
	hide flare1b;
	hide flare1c;
	hide flare1d;
	hide flare3a;
	hide flare3b;
	hide flare4a;
	hide flare4b;
	hide flare2;
	hide flare5;
	hide flare6;
	Static_Var_1 = 0;
	Static_Var_3 = 0;
	Static_Var_2 = 0;
	restore_delay = 3000;	
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script RockOnWaves();
	spin radar around y-axis speed <60.000000>;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

static-var  Stunned;
static-var aimy1velocity, aimy1target, aimy1position, gameFrame;

#define AIMY1_RESTORE_SPEED <1.0>
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn sleeves1 to x-axis <0.000000> speed <45.000000>;
	while ( get ABS(aimy1position) > AIMY1_RESTORE_SPEED){
		if (aimy1position > 0 ) {
			aimy1position = aimy1position - AIMY1_RESTORE_SPEED;
			aimy1velocity = (-1) * AIMY1_RESTORE_SPEED;
		}
		else
		{
			aimy1position = aimy1position + AIMY1_RESTORE_SPEED;
			aimy1velocity = AIMY1_RESTORE_SPEED;
		}
		turn tur1 to y-axis aimy1position speed 30 * AIMY1_RESTORE_SPEED;
		sleep 30;
	}
	aimy1velocity = 0;
}

SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

RestoreAfterDelay2()
{
	sleep restore_delay;
	turn tur2 to y-axis <0.000000> speed <100.000000>;
	turn tur5 to y-axis <0.000000> speed <100.000000>;
	turn tur6 to y-axis <0.000000> speed <100.000000>;
}

RestoreAfterDelay3()
{
	sleep restore_delay;
	turn tur3 to y-axis <0.000000> speed <125.000000>;
	turn sleeves3 to x-axis <0.000000> speed <125.000000>;
	turn tur4 to y-axis <0.000000> speed <125.000000>;
	turn sleeves4 to x-axis <0.000000> speed <125.000000>;
}

waveSplash()
{
	while( TRUE )
	{
		turn base to x-axis <-1.0> speed <1.0>;
		move base to y-axis [0.23] speed [0.17];
		wait-for-turn base around x-axis;
		turn base to x-axis <0.0> speed <1.0>;
		move base to y-axis [0.0] speed [0.17];
		wait-for-turn base around x-axis;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	var waketime;
	start-script waveSplash();
	var bowtime;
	bowtime = 0;
	while( TRUE )
	{
		emit-sfx 1024 + 1 from wake;
		if (bowtime) emit-sfx 1024 + 2 from bow;
		bowtime = !bowtime;
		emit-sfx 1024 + 3 from engine;
		waketime = (get CURRENT_SPEED) * 100 / get MAX_SPEED;
		if( waketime < 50 ) waketime = 50;
		sleep 15000 / waketime;
	}
}

StopMoving()
{
	signal SIG_MOVE;
	turn base to x-axis <0.0> speed <1.0>;
	move base to y-axis [0.0] speed [0.17];
}

SweetSpot(piecenum)
{
	piecenum = base;
}

AimFromWeapon1(piecenum)
{
	piecenum = tur1;
}

QueryWeapon1(piecenum)
{
	piecenum = flare1a + Static_Var_1;
}


//-------------------------------CONSTANT ACCELERATION TURRET TURNING---------------------------
// MaxVelocity and acceleration are in degrees per frame (not second!)
// Jerk is the minimum velocity of the turret
// A high precision requirement can result in overshoots if desired 
// (c) CC BY NC ND Beherith mysterme@gmail.com
#define MAX_AIMY1_VELOCITY <3.00>
#define AIMY1_ACCELERATION <0.12>
#define AIMY1_JERK <0.5>
#define AIMY1_PRECISION <1.2>


static-var aimy1delta, timetozero, deceleratethreshold;


#define SIG_AIM 2
AimWeapon1(heading, pitch)
{

	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	
	//signal SIG_HEAD;
	//We can do this any time
	turn sleeves1 to x-axis <0.000000> - pitch speed <85.000000>;
	
	aimy1target = heading;
	aimy1delta = aimy1target - aimy1position;
	
	while( ( get ABS(aimy1delta) > AIMY1_PRECISION ) OR (get ABS(aimy1velocity) > AIMY1_JERK)){
		if (gameFrame != get(GAME_FRAME)){ //this is to make sure we dont get double-called, as previous aimweapon thread runs before new aimweaponthread can signal-kill previous one 
			gameFrame = get(GAME_FRAME);
	
			//Clamp aimy1position and aimy1delta between <-180>;<180>
			while (aimy1position >  <180>) aimy1position = aimy1position - <360>;
			while (aimy1position < <-180>) aimy1position = aimy1position + <360>;
			while (aimy1delta >  <180>) aimy1delta = aimy1delta - <360>;
			while (aimy1delta < <-180>) aimy1delta = aimy1delta + <360>;
		
			//number of frames required to decelerate to 0
			timetozero = get ABS(aimy1velocity) / AIMY1_ACCELERATION;
			
			//distance from target where we should start decelerating, always 'positive'
			//pos = t * v - (t*(t-1)*a/2)
			deceleratethreshold = timetozero * (get ABS(aimy1velocity)) - (timetozero * (timetozero - 1) * AIMY1_ACCELERATION / 2); 
			
			//get PRINT ( aimy1delta , deceleratethreshold, aimy1velocity, timetozero );
			
			if (get ABS(aimy1delta) <= deceleratethreshold){ //we need to decelerate
				if (aimy1velocity > 0) aimy1velocity = aimy1velocity - AIMY1_ACCELERATION;
				else 				   aimy1velocity = aimy1velocity + AIMY1_ACCELERATION;
			}	
			else //we need to accelerate
			{
				if (aimy1delta > 0) aimy1velocity = get MIN(       MAX_AIMY1_VELOCITY, aimy1velocity + AIMY1_ACCELERATION); 
				else                aimy1velocity = get MAX((-1) * MAX_AIMY1_VELOCITY, aimy1velocity - AIMY1_ACCELERATION);
			}
			
			//Apply jerk at very low velocities
			if (get ABS(aimy1velocity) < AIMY1_JERK){
				if ((aimy1delta >        AIMY1_JERK)) aimy1velocity =        AIMY1_JERK;
				if ((aimy1delta < (-1) * AIMY1_JERK)) aimy1velocity = (-1) * AIMY1_JERK;
			}
			
			aimy1position = aimy1position + aimy1velocity; 
			turn tur1 to y-axis aimy1position now;
			aimy1delta = aimy1target - aimy1position ; 	
		}
		sleep 30;		
	}
	aimy1velocity = 0;
	start-script RestoreAfterDelay();
	aimDir = heading;
	return (1);
}


/*
AimWeapon1(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	turn tur1 to y-axis heading speed <45.000000>;
	turn sleeves1 to x-axis <0.000000> - pitch speed <20.000000>;
	wait-for-turn tur1 around y-axis;
	wait-for-turn sleeves1 around x-axis;
	aimDir = heading;
	start-script RestoreAfterDelay();
	return (1);
}*/

FireWeapon1()
{
}
Shot1()
{
	start-script RockZ(-45, aimDir);
	if( Static_Var_1 == 0 )
	{
	    emit-sfx 1024 + 0 from flare1a;
		move barrel1a to z-axis [-2.000000] speed [500.000000];
		sleep 100;
		move barrel1a to z-axis [0.000000] speed [3.000000];
	}
	else if( Static_Var_1 == 1 )
	{
	    emit-sfx 1024 + 0 from flare1b;
		move barrel1b to z-axis [-2.000000] speed [500.000000];
		sleep 100;
		move barrel1b to z-axis [0.000000] speed [3.000000];
	}
	else if( Static_Var_1 == 2 )
	{
	    emit-sfx 1024 + 0 from flare1c;
		move barrel1c to z-axis [-2.000000] speed [500.000000];
		sleep 100;
		move barrel1c to z-axis [0.000000] speed [3.000000];
	}
	else if( Static_Var_1 == 3 )
	{
	    emit-sfx 1024 + 0 from flare1d;
		move barrel1d to z-axis [-2.000000] speed [500.000000];
		sleep 100;
		move barrel1d to z-axis [0.000000] speed [3.000000];
		hide flare1d;
	}
	++Static_Var_1;
	if( Static_Var_1 >= 4 )
	{
		Static_Var_1 = 0;
	}
}

AimFromWeapon2(piecenum)
{
	piecenum = tur2;
}

QueryWeapon2(piecenum)
{
	piecenum = flare2;
}

AimWeapon2(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	if( heading < -29491 OR heading > 29491 OR heading > -3277 AND heading < 3277 )
	{
		return (0);
	}
	turn tur2 to y-axis heading speed <150.000000>;
	wait-for-turn tur2 around y-axis;
	start-script RestoreAfterDelay2();
	return (1);
}

FireWeapon2()
{
	show flare2;
	sleep 150;
	turn gun2 to z-axis <120.000000> speed <400.000000>;
	hide flare2;
	wait-for-turn gun2 around z-axis;
	turn gun2 to z-axis <0.000000> now;
}

AimFromWeapon3(piecenum)
{
	piecenum = tur3;
}

QueryWeapon3(piecenum)
{
	piecenum = flare3a + Static_Var_2;
}

AimWeapon3(heading, pitch)
{
	signal 8;
	set-signal-mask 8;
	turn tur3 to y-axis heading speed <200.000000>;
	turn sleeves3 to x-axis <0.000000> - pitch speed <150.000000>;
	wait-for-turn tur3 around y-axis;
	wait-for-turn sleeves3 around x-axis;
	start-script RestoreAfterDelay3();
	return (1);
}

FireWeapon3()
{
	Static_Var_2 = !Static_Var_2;
}

AimFromWeapon4(piecenum)
{
	piecenum = tur5;
}

QueryWeapon4(piecenum)
{
	piecenum = flare5;
}

AimWeapon4(heading, pitch)
{
	signal 16;
	set-signal-mask 16;
	if( heading < -29491 OR heading > 29491 )
	{
		return (0);
	}
	turn tur5 to y-axis heading speed <150.000000>;
	wait-for-turn tur5 around y-axis;
	start-script RestoreAfterDelay2();
	return (1);
}

FireWeapon4()
{
	show flare5;
	sleep 150;
	turn gun5 to z-axis <120.000000> speed <400.000000>;
	hide flare5;
	wait-for-turn gun5 around z-axis;
	turn gun5 to z-axis <0.000000> now;
}

AimFromWeapon5(piecenum)
{
	piecenum = tur6;
}

QueryWeapon5(piecenum)
{
	piecenum = flare6;
}

AimWeapon5(heading, pitch)
{
	signal 32;
	set-signal-mask 32;
	if( heading < -29491 OR heading > 29491 OR heading > -3277 AND heading < 3277 )
	{
		return (0);
	}
	turn tur6 to y-axis heading speed <150.000000>;
	wait-for-turn tur6 around y-axis;
	start-script RestoreAfterDelay2();
	return (1);
}

FireWeapon5()
{
	show flare6;
	sleep 150;
	turn gun6 to z-axis <120.000000> speed <400.000000>;
	hide flare6;
	wait-for-turn gun6 around z-axis;
	turn gun6 to z-axis <0.000000> now;
}

AimFromWeapon6(piecenum)
{
	piecenum = tur4;
}

QueryWeapon6(piecenum)
{
	piecenum = flare4a + Static_Var_3;
}

AimWeapon6(heading, pitch)
{
	signal 64;
	set-signal-mask 64;
	turn tur4 to y-axis heading speed <200.000000>;
	turn sleeves4 to x-axis <0.000000> - pitch speed <150.000000>;
	wait-for-turn tur4 around y-axis;
	wait-for-turn sleeves4 around x-axis;
	start-script RestoreAfterDelay3();
	return (1);
}

FireWeapon6()
{
	Static_Var_3 = !Static_Var_3;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode tur4 type BITMAPONLY | NOHEATCLOUD;
		explode sleeves4 type BITMAPONLY | NOHEATCLOUD;
		explode flare4a type BITMAPONLY | NOHEATCLOUD;
		explode flare4b type BITMAPONLY | NOHEATCLOUD;
		explode tur3 type BITMAPONLY | NOHEATCLOUD;
		explode sleeves3 type BITMAPONLY | NOHEATCLOUD;
		explode flare3a type BITMAPONLY | NOHEATCLOUD;
		explode flare3b type BITMAPONLY | NOHEATCLOUD;
		explode tur6 type BITMAPONLY | NOHEATCLOUD;
		explode sleeves6 type BITMAPONLY | NOHEATCLOUD;
		explode gun6 type BITMAPONLY | NOHEATCLOUD;
		explode barrel6 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare6 type BITMAPONLY | NOHEATCLOUD;
		//explode tur5 type BITMAPONLY | NOHEATCLOUD;
		//explode sleeves5 type BITMAPONLY | NOHEATCLOUD;
		//explode gun5 type BITMAPONLY | NOHEATCLOUD;
		//explode barrel5 type BITMAPONLY | NOHEATCLOUD;
		//explode flare5 type BITMAPONLY | NOHEATCLOUD;
		//explode tur2 type BITMAPONLY | NOHEATCLOUD;
		//explode sleeves2 type BITMAPONLY | NOHEATCLOUD;
		//explode gun2 type BITMAPONLY | NOHEATCLOUD;
		//explode flare2 type BITMAPONLY | NOHEATCLOUD;
		//explode barrel2 type BITMAPONLY | NOHEATCLOUD;
		//explode tur1 type BITMAPONLY | NOHEATCLOUD;
		//explode sleeves1 type BITMAPONLY | NOHEATCLOUD;
		//explode barrel1c type BITMAPONLY | NOHEATCLOUD;
		//explode flare1c type BITMAPONLY | NOHEATCLOUD;
		//explode barrel1d type BITMAPONLY | NOHEATCLOUD;
		//explode flare1d type BITMAPONLY | NOHEATCLOUD;
		//explode barrel1a type BITMAPONLY | NOHEATCLOUD;
		//explode flare1a type BITMAPONLY | NOHEATCLOUD;
		//explode barrel1b type BITMAPONLY | NOHEATCLOUD;
		//explode flare1b type BITMAPONLY | NOHEATCLOUD;
		//explode radar type BITMAPONLY | NOHEATCLOUD;
		//explode wake1 type BITMAPONLY | NOHEATCLOUD;
		//explode wake2 type BITMAPONLY | NOHEATCLOUD;
		//explode wake3 type BITMAPONLY | NOHEATCLOUD;
		//explode wake4 type BITMAPONLY | NOHEATCLOUD;
		//explode wake5 type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode tur4 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeves4 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare4a type FALL | NOHEATCLOUD;
		explode flare4b type FALL | NOHEATCLOUD;
		explode tur3 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeves3 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare3a type FALL | NOHEATCLOUD;
		explode flare3b type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode tur6 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeves6 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode gun6 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel6 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare6 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode tur5 type FALL | NOHEATCLOUD;
		//explode sleeves5 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode gun5 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode barrel5 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare5 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode tur2 type FALL | NOHEATCLOUD;
		//explode sleeves2 type FALL | NOHEATCLOUD;
		//explode gun2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode barrel2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode sleeves1 type FALL | NOHEATCLOUD;
		//explode barrel1c type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare1c type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode barrel1d type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare1d type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode barrel1a type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare1a type FALL | NOHEATCLOUD;
		//explode barrel1b type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare1b type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode radar type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode wake1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode wake2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode wake3 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode wake4 type FALL | NOHEATCLOUD;
		//explode wake5 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode tur4 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeves4 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare4a type SMOKE | FALL | NOHEATCLOUD;
		explode flare4b type SMOKE | FALL | NOHEATCLOUD;
		explode tur3 type SMOKE | FALL | NOHEATCLOUD;
		explode sleeves3 type SMOKE | FALL | NOHEATCLOUD;
		explode flare3a type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode flare3b type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode tur6 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode sleeves6 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode gun6 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel6 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode flare6 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode tur5 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode sleeves5 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode gun5 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode barrel5 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare5 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode tur2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode sleeves2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode gun2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode barrel2 type SMOKE | FALL | NOHEATCLOUD;
		//explode tur1 type BITMAPONLY | NOHEATCLOUD;
		//explode sleeves1 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode barrel1c type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare1c type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode barrel1d type SMOKE | FALL | NOHEATCLOUD;
		//explode flare1d type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode barrel1a type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare1a type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode barrel1b type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare1b type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode radar type SMOKE | FALL | NOHEATCLOUD;
		//explode wake1 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode wake2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode wake3 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode wake4 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode wake5 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode tur4 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeves4 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare4a type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode flare4b type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode tur3 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeves3 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare3a type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare3b type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode tur6 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode sleeves6 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode gun6 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode barrel6 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare6 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode tur5 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode sleeves5 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode gun5 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode barrel5 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode flare5 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode tur2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode sleeves2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode gun2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode barrel2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode tur1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode sleeves1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode barrel1c type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode flare1c type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode barrel1d type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare1d type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode barrel1a type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare1a type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode barrel1b type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode flare1b type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode radar type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode wake1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode wake2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode wake3 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode wake4 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode wake5 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
