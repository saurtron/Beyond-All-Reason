	#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret, gun, flare, flare1, flare2, flare3, flare4, flare5, flare6, hatch1, hatch2, hatch3, hatch4, hatch5, hatch6, wheel1, wheel2, wheel3, wheel4, smoke, pillar;

static-var  weapon, restore_delay, target, lastheading, lastpitch, justfired, shot, opened, moving;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_MOVE			8
#define SIG_OPEN			16

#define BASEPIECE base
#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 5
#define MAXTILT 100

Create()
{
	hide flare;
	hide flare1;
	hide flare2;
	hide flare3;
	hide flare4;
	hide flare5;
	hide flare6;
	hide smoke;
	restore_delay = 3000;
	weapon = 0;
	return (0);
}

Raise()
{
	sleep 1000;
	if(moving == 0)
	{
		move pillar to y-axis [10] speed [4.000000];
	}
}

Lower()
{

	move pillar to y-axis [0] speed [5.000000];
}

Steering(currentSpeed)
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while(1)
	{
		currentSpeed = <3.92> *((get CURRENT_SPEED) * 100 / get MAX_SPEED);
		if (currentSpeed < <100>) currentSpeed = <100>;
		spin wheel1 around x-axis speed currentSpeed;
		spin wheel2 around x-axis speed currentSpeed;
		spin wheel3 around x-axis speed currentSpeed;
		spin wheel4 around x-axis speed currentSpeed;
		sleep 66;
	}
}

StartMoving()
{
	moving = 1;
	start-script Steering();
	start-script Lower();
}

StopMoving()
{
	start-script Raise();
	signal SIG_MOVE;
	stop-spin wheel1 around x-axis;
	stop-spin wheel2 around x-axis;
	stop-spin wheel3 around x-axis;
	stop-spin wheel4 around x-axis;
	moving = 0;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1;
	return (0);
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	set-signal-mask 0;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

Close()
{
	opened = 0;
	sleep 1000;
	turn hatch5 to z-axis <0.000000> speed <90.000000>;
	sleep 250;
	turn hatch6 to z-axis <0.000000> speed <90.000000>;
	sleep 250;
	turn hatch3 to z-axis <0.000000> speed <90.000000>;
	sleep 250;
	turn hatch4 to z-axis <0.000000> speed <90.000000>;
	sleep 250;
	turn hatch1 to z-axis <0.000000> speed <90.000000>;
	sleep 250;
	turn hatch2 to z-axis <0.000000> speed <90.000000>;
}

Open()
{
	signal SIG_OPEN;
	set-signal-mask SIG_OPEN;
	if(justfired == 1)													//Prevents opening if unit fired a shot, so the hatches close for the reload
	{
		return (0);
	}
	opened = 1;
	turn hatch5 to z-axis <90.000000> speed <90.000000>;
	sleep 400;
	turn hatch6 to z-axis <-90.000000> speed <90.000000>;
	sleep 400;
	turn hatch3 to z-axis <90.000000> speed <90.000000>;
	sleep 400;
	turn hatch4 to z-axis <-90.000000> speed <90.000000>;
	sleep 400;
	turn hatch1 to z-axis <90.000000> speed <90.000000>;
	sleep 400;
	turn hatch2 to z-axis <-90.000000> speed <90.000000>;
	sleep 1200;
	if(shot == 0)														//Closes if no shot was taken (attack command canceled)
	{
		start-script Close();
	}
}

AimPrimary(heading, pitch)												//Beamer script
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <500.000000>;
	turn gun to x-axis <0.000000> - pitch speed <250.000000>;
	// if the turret can turn to its new heading in one frame, just return true and do not wait for turn
	if ( ( get ABS ( lastheading - heading ) < 3000 ) AND ( get ABS ( lastpitch - pitch ) < 1500 ) )
	{
		lastheading = heading;
		lastpitch = pitch;
		return (1);
	}
	// if turret needs more than one frame to turn to new heading, wait for the turn
	// seems to take 3 frames for wait-for-turn to process
	wait-for-turn turret around y-axis;
	wait-for-turn gun around x-axis;
	// after waiting for the turn, set the lastheading and lastpitch variables
	lastheading = heading;
	lastpitch = pitch;
	return (1);
}

AimFromPrimary(piecenum)
{
	piecenum = flare;
}

FirePrimary()														//Sets target to 1 and just as the laser shot ends sets it to 0, so the next shot sets it to 1 the next milisecond, so its 1 whenever the laser is firing and 0 when it isn't
{
	target = 1;
	sleep 99;
	target = 0;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

AimSecondary(heading, pitch)
{
	while( target == 0)												//Doesn't shoot if laser isn't shooting
	{
		return (0);
	}
	if(opened == 0)													//Opens if it isn't already
	{
		start-script Open(0);
	}
	sleep 3000;
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;														//Delay before the shot, making it look like the laser needs to lock on first (If reduced then hatch opening speed may need to be increased)
	return (1);
}

AimFromSecondary(piecenum)
{
	piecenum = flare;
}

FireSecondary()
{
	justfired = 1;													//Used to delay next opening of hatches, so they close between shots
	shot = 1;														//Checks if a shot was taken
	sleep 125;														//Sleep a bit, to change var between burst shots, first one is delayed so it doesn't change before the first shot. Couldn't get ShotSecondary to work
	weapon = 1;
	sleep 250;
	weapon = 2;
	sleep 250;
	weapon = 3;
	sleep 250;
	weapon = 4;
	sleep 150;
	weapon = 5;
	sleep 250;
	weapon = 0;
	start-script Close();
	shot = 0;
	sleep 7000;														//Combined sleep in this script must be about 1 second shorter than the reload time, so the hatches open on time for next shot
	justfired = 0;													//Enables hatches opening for next shot
}

QuerySecondary(piecenum)
{
	if( weapon == 0 )												//Firing point selection for missiles
	{
	    piecenum = flare5;
	}
	else if( weapon == 1 )
	{
	    piecenum = flare6;
	}
	else if( weapon == 2 )
	{
	    piecenum = flare3;
	}
	else if( weapon == 3 )
	{
	    piecenum = flare4;
	}
	else if( weapon == 4 )
	{
	    piecenum = flare1;
	}
	else if( weapon == 5 )
	{
	    piecenum = flare2;
	}
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode hatch1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode hatch4 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare1 type BITMAPONLY | NOHEATCLOUD;
		//explode flare2 type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode hatch1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode hatch4 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode hatch5 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare1 type FALL | NOHEATCLOUD;
		//explode flare2 type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type SMOKE | FALL | NOHEATCLOUD;
		explode hatch1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode hatch4 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode hatch5 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode hatch1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode hatch4 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode hatch5 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode flare2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
