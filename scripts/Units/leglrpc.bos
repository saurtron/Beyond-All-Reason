#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

//piece  base, flare, turret, barrel, sleeve;

piece base, turretBase, turretSleeve, barrelPivot, 
barrelSleeveA, barrelA, flareA,
barrelSleeveB, barrelB, flareB,
barrelSleeveC, barrelC, flareC,
exhaustCell, exhaustSmokeCell,
exhaustDoorA, exhaustDoorB, exhaustDoorC,
exhaustSmokeA,
exhaustSmokeB;

static-var guncount, issmoking;
// Signal definitions
#define SIG_AIM				2


Create()
{

	hide flareA;
	hide flareB;
	hide flareC;
	hide exhaustSmokeCell;
	hide exhaustSmokeA;
	hide exhaustSmokeB;

	guncount = 7;
	issmoking = 0;

	move exhaustCell to z-axis [9] now;
	turn exhaustDoorA to x-axis <-45> now;
	turn exhaustDoorB to x-axis <-45> now;
	turn exhaustDoorC to x-axis <-45> now;

	move barrelSleeveA to z-axis [-30] now;
	move barrelSleeveB to z-axis [-30] now;
	move barrelSleeveC to z-axis [-30] now;

	move barrelA to z-axis [-25] now;
	move barrelB to z-axis [-25] now;
	move barrelC to z-axis [-25] now;

	while( get BUILD_PERCENT_LEFT )
	{
		sleep 200;
	}

	spin barrelPivot around z-axis speed <145>;

	move barrelSleeveA to z-axis [0] speed [25];
	sleep 200;
	move barrelSleeveB to z-axis [0] speed [25];
	sleep 200;
	move barrelSleeveC to z-axis [0] speed [25];
	sleep 200;

	move barrelA to z-axis [0] speed [20];
	sleep 200;
	move barrelB to z-axis [0] speed [20];
	sleep 200;
	move barrelC to z-axis [0] speed [20];
	sleep 200;
	wait-for-move barrelC along z-axis;
	stop-spin barrelPivot around z-axis;
	turn barrelPivot to z-axis <0> speed <400>;
	
}

lua_UnitScriptLight(lightIndex, count)
{
	return 0;
}

#define SMOKEPIECE base
#include "smokeunit_thread_nohit.h"

SmokeItUp()
{	
	if (issmoking == 0 OR TRUE)
	{
		issmoking = 1;
		emit-sfx 257 from exhaustSmokeA;
		emit-sfx 257 from exhaustSmokeB;
		emit-sfx 257 from exhaustSmokeCell;
		sleep 1000;
		emit-sfx 257 from exhaustSmokeA;
		emit-sfx 257 from exhaustSmokeB;
		emit-sfx 257 from exhaustSmokeCell;
		sleep 1000;
		emit-sfx 257 from exhaustSmokeA;
		emit-sfx 257 from exhaustSmokeB;
		emit-sfx 257 from exhaustSmokeCell;
		sleep 1000;
		emit-sfx 257 from exhaustSmokeA;
		emit-sfx 257 from exhaustSmokeB;
		emit-sfx 257 from exhaustSmokeCell;
		sleep 1000;
		emit-sfx 257 from exhaustSmokeA;
		emit-sfx 257 from exhaustSmokeB;
		emit-sfx 257 from exhaustSmokeCell;
		sleep 1000;
		emit-sfx 257 from exhaustSmokeA;
		emit-sfx 257 from exhaustSmokeB;
		emit-sfx 257 from exhaustSmokeCell;
		sleep 1000;
		emit-sfx 257 from exhaustSmokeA;
		emit-sfx 257 from exhaustSmokeB;
		emit-sfx 257 from exhaustSmokeCell;
		sleep 1000;
		emit-sfx 257 from exhaustSmokeA;
		emit-sfx 257 from exhaustSmokeB;
		emit-sfx 257 from exhaustSmokeCell;
		sleep 1000;
		issmoking = 0;
	}
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turretBase to y-axis heading speed <5.000000>;
	turn turretSleeve to x-axis <0.000000> - pitch speed <3.500000>;
	wait-for-turn turretBase around y-axis;
	wait-for-turn turretSleeve around x-axis;
	return (1);
}

FirePrimary()
{
	
	//shotcount = shotcount + 1;
	//move barrel to z-axis [-8.000000] speed [500.000000];

	//barrelA
	call-script lua_UnitScriptLight(1, guncount);
	call-script lua_UnitScriptLight(2, guncount);
	//barrelB
	call-script lua_UnitScriptLight(3, guncount);
	call-script lua_UnitScriptLight(4, guncount);
	//barrelC
	call-script lua_UnitScriptLight(5, guncount);
	call-script lua_UnitScriptLight(6, guncount);
	//exhaust glows
	call-script lua_UnitScriptLight(7, guncount);
	call-script lua_UnitScriptLight(8, guncount);
	call-script lua_UnitScriptLight(9, guncount);
	call-script lua_UnitScriptLight(10, guncount);
	call-script lua_UnitScriptLight(11, guncount);

	wait-for-turn barrelPivot around y-axis;
	sleep 50;
	wait-for-turn barrelPivot around y-axis;
	sleep 50;
	wait-for-turn barrelPivot around y-axis;

	/**sleep 200;
	//wait-for-move barrelC along z-axis;
	move barrelA to z-axis [0.000000] speed [3.500000];
	move barrelB to z-axis [0.000000] speed [3.500000];
	move barrelC to z-axis [0.000000] speed [3.500000];**/
	sleep 7500;
	move exhaustCell to z-axis [9] speed [5];
	turn exhaustDoorA to x-axis <-45> speed <20>;
	turn exhaustDoorB to x-axis <-45> speed <20>;
	turn exhaustDoorC to x-axis <-45> speed <20>;
}

TargetCleared(Func_Var_1)
{
	if( Func_Var_1 == 1 )
	{
		signal SIG_AIM;
		stop-spin turretBase around y-axis;
		stop-spin turretSleeve around x-axis;
	}
}

Shot1(heading, pitch) {

	if (guncount == 7){
		emit-sfx 1024 + 0 from flareA;
		move barrelA to z-axis [-15] now;
		move barrelSleeveA to z-axis [-10] now;
		sleep 100;
		turn barrelPivot to z-axis <-120> speed <400>;
		//wait-for-turn barrelPivot around z-axis;
		guncount = 10;
	}
	if (guncount == 10){
		wait-for-turn barrelPivot around z-axis;
		emit-sfx 1024 + 0 from flareB;
		move barrelB to z-axis [-15] now;
		move barrelSleeveB to z-axis [-10] now;
		sleep 100;
		turn barrelPivot to z-axis <-240> speed <400>;
		//wait-for-turn barrelPivot around z-axis;
		guncount = 13;
	}
	if (guncount == 13){
		wait-for-turn barrelPivot around z-axis;
		emit-sfx 1024 + 0 from flareC;
		move barrelC to z-axis [-15] now;
		move barrelSleeveC to z-axis [-10] now;
		move exhaustCell to z-axis [0] speed [100];
		turn exhaustDoorA to x-axis <0> speed <300>;
		turn exhaustDoorB to x-axis <0> speed <300>;
		turn exhaustDoorC to x-axis <0> speed <300>;
		start-script SmokeItUp();
		sleep 100;
		turn barrelPivot to z-axis <0> speed <400>;
		//wait-for-turn barrelPivot around z-axis;
		guncount = 7;
		sleep 200;
		//wait-for-move barrelC along z-axis;
		move barrelSleeveA to z-axis [0.000000] speed [8.000000];
		sleep 200;
		move barrelSleeveB to z-axis [0.000000] speed [8.000000];
		sleep 200;
		move barrelSleeveC to z-axis [0.000000] speed [8.000000];
		wait-for-move barrelSleeveA along z-axis;
		move barrelA to z-axis [0.000000] speed [3.500000];
		sleep 200;
		move barrelB to z-axis [0.000000] speed [3.500000];
		sleep 200;
		move barrelC to z-axis [0.000000] speed [3.500000];

	}
}

QueryPrimary(piecenum)
{
	piecenum = guncount;
}

AimFromPrimary(piecenum)
{
	piecenum = barrelPivot;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turretBase type BITMAPONLY | NOHEATCLOUD;
		explode turretSleeve type BITMAPONLY | NOHEATCLOUD;
		explode barrelA type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrelB type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrelC type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flareA type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turretBase type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrelA type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrelB type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrelC type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flareA type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turretBase type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode turretSleeve type BITMAPONLY | NOHEATCLOUD;
		explode barrelA type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode barrelB type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode barrelC type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode flareA type SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turretBase type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode turretSleeve type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode barrelA type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrelB type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrelC type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flareA type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
