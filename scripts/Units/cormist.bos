#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, base, gun, turret, exhaust;

static-var  restore_delay, gun_1, fired, aiming;

// Signal definitions
#define SIG_AIM				4
#define SIG_AIM_2			8
#define SIG_FIRED			16
#define SIG_AIMING			32

#define BASEPIECE base
#define HITSPEED <75.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 1
#define MAXTILT 100

#include "unit_hitbyweaponid_and_smoke.h"

Create()
{
	hide flare1;
	hide flare2;
	hide flare1;
	hide flare2;
	fired = 0;
	aiming = 0;
	gun_1 = flare1;
	restore_delay = 3000;
}

ResetFire()
{
	signal SIG_FIRED;
	set-signal-mask SIG_FIRED;
	fired = 1;
	sleep 2000;
	fired = 0;
}


ResetAiming()
{
	signal SIG_AIMING;
	set-signal-mask SIG_AIMING;
	aiming = 1;
	sleep 500;
	aiming = 0;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
    fired = 0;
	turn turret to y-axis <0.000000> speed <90.021978>;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimWeapon1(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	start-script ResetAiming();
	turn turret to y-axis heading speed <250.060440>;
	turn gun to x-axis -1*pitch speed <200>;
	wait-for-turn turret around y-axis;
	wait-for-turn gun around x-axis;
	start-script RestoreAfterDelay();
	//sleep 300;
	if(fired == 1)
	{
		return (0);
	}
	return (1);
}

FireWeapon1()
{
	start-script ResetFire();
	if( gun_1 == 0 )
	{
		emit-sfx 1024 + 0 from exhaust;
		show flare1;
		sleep 150;
		hide flare1;
	}
	if( gun_1 == 1 )
	{
		emit-sfx 1024 + 0 from exhaust;
		show flare2;
		sleep 150;
		hide flare2;
	}
	gun_1 = !gun_1;
	return (0);
}

AimFromWeapon1(piecenum)
{
	piecenum = gun;
}

QueryWeapon1(piecenum)
{
	piecenum = gun_1;
}

AimWeapon2(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	if(aiming == 1)
	{
		return (0);
	}
	turn turret to y-axis heading speed <250.060440>;
	turn gun to x-axis -1*pitch speed <200>;
	wait-for-turn turret around y-axis;
	wait-for-turn gun around x-axis;
	start-script RestoreAfterDelay();
	sleep 33;
	if(fired == 1)
	{
		return (0);
	}
	return (1);
}

FireWeapon2()
{
	start-script ResetFire();
	if( gun_1 == 0 )
	{
		emit-sfx 1024 + 0 from exhaust;
		show flare1;
		sleep 150;
		hide flare1;
	}
	if( gun_1 == 1 )
	{
		emit-sfx 1024 + 0 from exhaust;
		show flare2;
		sleep 150;
		hide flare2;
	}
	gun_1 = !gun_1;
	return (0);
}

AimFromWeapon2(piecenum)
{
	piecenum = gun;
}

QueryWeapon2(piecenum)
{
	piecenum = gun_1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}
Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode gun type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode exhaust type BITMAPONLY | NOHEATCLOUD;
		//explode flare1 type BITMAPONLY | NOHEATCLOUD;
		//explode flare2 type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FALL | NOHEATCLOUD;
		explode gun type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode exhaust type FALL | NOHEATCLOUD;
		//explode flare1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode gun type SMOKE | FALL | NOHEATCLOUD;
		//explode exhaust type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode flare1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode gun type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode exhaust type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode flare1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
