#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

//piece  base, turret, barrel, sleeve, flare ,smoke1, smoke2, smoke3;
piece  base, chamber_flare_fixed, chamber_flare, barrel_glow, barrel_glow_overcharge, flare, gun, chamber, r1, r2, r3, l1, l2, l3, hood, smoke1, aimfromy;

static-var  fireMode, bMoving, moveSpeed, currentSpeed, animSpeed, terrain,  restore_delay, activated, statechg_DesiredState, statechg_StateChanging, shooting, pshotcount, sshotcount, weapon1_default_range, weapon2_default_range, reloading, xoffset, yoffset;

// Signal definitions
#define SIG_AIM				2
#define SIG_MOVE			4

UnitSpeed()
{
	while(TRUE)
	{
		currentSpeed = (get CURRENT_SPEED)*20/moveSpeed;
		if (currentSpeed<4) currentSpeed=4;
		animSpeed = 1800 / currentSpeed;
		sleep 142;
	}
}

Smoke()
{
	while( TRUE )
	{
		if ( bMoving )
		{
			if( terrain == 4 )
			{
				emit-sfx 1024 + 1 from smoke1;
				//emit-sfx 1024 + 1 from smoke2;
				//emit-sfx 1024 + 1 from smoke3;
			}
		}
		sleep animSpeed;
	}
}



#define BASEPIECE base
#define HITSPEED <45.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 7
#define MAXTILT 100

#include "unit_hitbyweaponid_and_smoke.h"

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <50.000000>;
	turn base to z-axis <0> - anglez speed <50.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
}

Create()
{
	
	
	turn gun to x-axis <0.000000> speed <45.000000>;
	turn gun to y-axis <0.000000> speed <45.000000>;
	
	
	activated = 1;
	fireMode = 0;
	call-script InitState();
	shooting = 0;
	pshotcount = 0;	
	sshotcount = 0;	

	xoffset	= [3];
	yoffset	= [1];
	
	weapon1_default_range = get WEAPON_RANGE(1);
	weapon2_default_range = get WEAPON_RANGE(2);
	
	get WEAPON_RANGE(-1,get MIN(weapon1_default_range,weapon2_default_range));
	get WEAPON_RANGE(-2,get MIN(weapon1_default_range,weapon2_default_range));
	

	turn r2 to y-axis <3> now;
	turn r3 to y-axis <6> now;
	turn l2 to y-axis <-3> now;
	turn l3 to y-axis <-6> now;


	//activate eg normal weapon eg hide rods
	move r1 to x-axis xoffset now;
	move r2 to x-axis xoffset now;
	move r3 to x-axis xoffset now;
	move l1 to x-axis 0-xoffset now;
	move l2 to x-axis 0-xoffset now;
	move l3 to x-axis 0-xoffset now;
	
	move r1 to y-axis 0-yoffset now;
	move r2 to y-axis 0-yoffset now;
	move r3 to y-axis 0-yoffset now;
	move l1 to y-axis 0-yoffset now;
	move l2 to y-axis 0-yoffset now;
	move l3 to y-axis 0-yoffset now;



	hide r1;
	hide r2;
	hide r3;
	hide l1;
	hide l2;
	hide l3;
	//hide smoke3;
	hide flare;
	//hide smoke2;
	hide smoke1;
	bMoving = FALSE;
	moveSpeed = get (MAX_SPEED);
	animSpeed = 100;
	restore_delay = 3000;
	start-script SmokeUnit();
}



//FIREMODE == ACTIVESTATE. NOT LINKED TO WEAPON ORDER.


// (de)activate->request->stop/go->(de)activatescr. fml.



activatescr()
{	
	if( TRUE )
	{
		
		signal SIG_AIM;
		fireMode = 1;






	//move chamber to z-axis [-4.000000] speed [500.000000];
	//wait-for-move chamber along z-axis;

		//activate eg normal weapon eg hide rods
		move r1 to x-axis xoffset speed [0.600000];
		move r2 to x-axis xoffset speed [0.600000];
		move r3 to x-axis xoffset speed [0.600000];
		move l1 to x-axis 0-xoffset speed [0.600000];
		move l2 to x-axis 0-xoffset speed [0.600000];
		move l3 to x-axis 0-xoffset speed [0.600000];
		
		move r1 to y-axis 0-yoffset speed [0.20000];
		move r2 to y-axis 0-yoffset speed [0.20000];
		move r3 to y-axis 0-yoffset speed [0.20000];
		move l1 to y-axis 0-yoffset speed [0.20000];
		move l2 to y-axis 0-yoffset speed [0.20000];
		move l3 to y-axis 0-yoffset speed [0.20000];

		wait-for-move r1 along y-axis;



		hide r1;
		hide r2;
		hide r3;
		hide l1;
		hide l2;
		hide l3;
	

		get WEAPON_RANGE(-1,get MIN(weapon1_default_range,weapon2_default_range));//prevent danceoffs
		get WEAPON_RANGE(-2,get MIN(weapon1_default_range,weapon2_default_range));	
	
		sleep 3000;

	}

	

	sleep 33;
}



deactivatescr()
{


	if( TRUE )
	{

		signal SIG_AIM;
		fireMode = 0;//secondary weapon/ normal fire
		
		show r1;
		show r2;
		show r3;
		show l1;
		show l2;
		show l3;
		
		//deac eg full weapon eg show rods
		move r1 to x-axis [0.000000] speed [0.600000];
		move r2 to x-axis [0.000000] speed [0.600000];
		move r3 to x-axis [0.000000] speed [0.600000];
		move l1 to x-axis [0.000000] speed [0.600000];
		move l2 to x-axis [0.000000] speed [0.600000];
		move l3 to x-axis [0.000000] speed [0.600000];

		move r1 to y-axis [0] speed [0.200000];
		move r2 to y-axis [0] speed [0.200000];
		move r3 to y-axis [0] speed [0.200000];
		move l1 to y-axis [0] speed [0.200000];
		move l2 to y-axis [0] speed [0.200000];
		move l3 to y-axis [0] speed [0.200000];
		wait-for-move r1 along y-axis;

		get WEAPON_RANGE(-1,get MAX(weapon1_default_range,weapon2_default_range));
		get WEAPON_RANGE(-2,get MAX(weapon1_default_range,weapon2_default_range));



		sleep 3000;

	}

	sleep 33;
}




Go()
{
	if( !activated )
	{
		call-script activatescr();
	}
	activated = 1;
}

Stop()
{
	activated = 0;
	call-script deactivatescr();

}

Activate()
{
	start-script RequestState(1);
}

Deactivate()
{
	signal SIG_AIM;
	start-script RequestState(0);
}




InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Stop();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Go();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

//nani
setSFXoccupy(state)
{
	terrain = state;
}
//also nani
SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

StartMoving()
{
	bMoving = TRUE;  
  signal SIG_MOVE;
  set-signal-mask SIG_MOVE;
  start-script UnitSpeed();
	start-script Smoke();
}


StopMoving()
{
	bMoving = FALSE;
  signal SIG_MOVE;
}



static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn gun to x-axis <0.000000> speed <45.000000>;
	turn gun to y-axis <0.000000> speed <45.000000>;
	//turn turret to x-axis <0.000000> speed <23.000000>;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	shooting = 0;
	start-script ExecuteRestoreAfterDelay();
}










lua_UnitScriptLight(lightIndex, count)
{
	return 0;
}


#define TURNRATE 200

ResetAim() {
	sleep 9000;
	turn gun to x-axis 0 speed <60>;
}

AimPrimary(heading, pitch)
{
	
	//potshotmode

	if (pitch < <-10>) { return(0); }

    if (shooting==1) {return(0);}
    if (fireMode!=0) {return(0);}//if inactive, go to secondary weapon eg normalfire
	
	
	reloading = (get GAME_FRAME) < (get WEAPON_RELOADSTATE(2));
	if (reloading) {
		return(0);
	}
	

	//start-script ResetAim();
	
	//get PRINT(heading);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	if ((bMoving AND heading>1200) OR (bMoving AND heading<-1200)) return 0;
	
	turn gun to x-axis 0 - pitch speed <35>;//*
	//*
	while(heading > TURNRATE) {
		set HEADING to (get HEADING) + TURNRATE;
		heading=heading - TURNRATE;
		sleep 30;
	}
	while(heading < 0 - TURNRATE) {
		set HEADING to (get HEADING) - TURNRATE;
		heading=heading + TURNRATE;
		sleep 30;
	}
	set HEADING to (get HEADING) + heading;//*/
	wait-for-turn gun around x-axis;

	start-script RestoreAfterDelay();

	return 1;
	

/*


	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	//turn gun to y-axis heading speed <55.000000>;
	turn gun to x-axis <0.000000> - pitch speed <35.000000>;
	//turn chamber to x-axis <0.000000> - pitch speed <35.000000>;
	//wait-for-turn turret around y-axis;
	wait-for-turn gun around x-axis;
	//wait-for-turn chamber around x-axis;
	return (1);
	//*/
	
	
	
}



















AimSecondary(heading, pitch)
{
	
	if (pitch < <-10>) { return(0); }
	
	// FIRE EVERYTHING
	
    if (shooting==1) {return(0);}

	if( fireMode != 1 )//if not active, go to primary eg overcharge
	{
		return(0);
	}


	reloading = (get GAME_FRAME) < (get WEAPON_RELOADSTATE(2));
	if (reloading) {
		return(0);
	}


/*
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	//turn gun to y-axis heading speed <55.000000>;
	turn gun to x-axis <0.000000> - pitch speed <35.000000>;
	//turn chamber to x-axis <0.000000> - pitch speed <35.000000>;
	//wait-for-turn turret around y-axis;
	wait-for-turn gun around x-axis;
	//wait-for-turn chamber around x-axis;
	start-script RestoreAfterDelay();
	return (1);
	*/
	
	//get PRINT(heading);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	if ((bMoving AND heading>800) OR (bMoving AND heading<-800)) return 0;
	//start-script ResetAim();
	turn gun to x-axis 0 - pitch speed <35>;//*
	while(heading > TURNRATE) {
		set HEADING to (get HEADING) + TURNRATE;
		heading=heading - TURNRATE;
		sleep 30;
	}
	while(heading < 0 - TURNRATE) {
		set HEADING to (get HEADING) - TURNRATE;
		heading=heading + TURNRATE;
		sleep 30;
	}
	set HEADING to (get HEADING) + heading;//*/
	wait-for-turn gun around x-axis;

	start-script RestoreAfterDelay();
	return 1;
}



FireSecondary()
{
	
	if( fireMode != 1 )
	{
		return(0);
	}

    shooting=1;
    pshotcount = pshotcount + 1;
    //emit-sfx 1024 + 2 from flare;
    call-script lua_UnitScriptLight(1, pshotcount);



	//call-script lua_UnitScriptLight(1, 1);//, shotcount);

	//emit-sfx 1024 + 0 from flare;
	//emit-sfx 1024 + 2 from chamber;
	move gun to z-axis [-2.5] speed [350.000000];
	//wait-for-move gun along z-axis;
	
	move chamber to z-axis [-4.000000] speed [500.000000];
	wait-for-move chamber along z-axis;
	
	
	move chamber to z-axis [0.000000] speed [4.000000];
	wait-for-move chamber along z-axis;	
	
	move gun to z-axis [0.000000] speed [6.000000];
	wait-for-move gun along z-axis;
	
	start-script SetMaxReloadTime(2500);
	sleep 2500;
	shooting=0;
	
	
}



FirePrimary()
{

	if( fireMode != 0 )
	{
		return(0);
	}
	
    shooting=1;
    sshotcount = sshotcount + 1;



	show r1;
	show r2;
	show r3;
	show l1;
	show l2;
	show l3;
	
	move r1 to x-axis xoffset speed [100.000000];
	move r2 to x-axis xoffset speed [100.000000];
	move r3 to x-axis xoffset speed [100.000000];
	move l1 to x-axis 0-xoffset speed [100.000000];
	move l2 to x-axis 0-xoffset speed [100.000000];
	move l3 to x-axis 0-xoffset speed [100.000000];
	move r1 to y-axis 0-yoffset speed [100.000000];
	move r2 to y-axis 0-yoffset speed [100.000000];
	move r3 to y-axis 0-yoffset speed [100.000000];
	move l1 to y-axis 0-yoffset speed [100.000000];
	move l2 to y-axis 0-yoffset speed [100.000000];
	move l3 to y-axis 0-yoffset speed [100.000000];


    call-script lua_UnitScriptLight(1, sshotcount);


	//emit-sfx 1024 + 0 from flare;
	//emit-sfx 1024 + 2 from chamber;
	move gun to z-axis [-4.000000] speed [500.000000];
	//wait-for-move gun along z-axis;
	
	move chamber to z-axis [-6.000000] speed [600.000000];
	wait-for-move chamber along z-axis;
	
	
	move chamber to z-axis [0.000000] speed [3.000000];
	wait-for-move chamber along z-axis;	
	
	move gun to z-axis [0.000000] speed [6.000000];
	wait-for-move gun along z-axis;
	

	

	move r1 to x-axis [0.000000] speed [0.250000];
	move r2 to x-axis [0.000000] speed [0.400000];
	move r3 to x-axis [0.000000] speed [0.70000];
	move l1 to x-axis [0.000000] speed [0.250000];
	move l2 to x-axis [0.000000] speed [0.400000];
	move l3 to x-axis [0.000000] speed [0.700000];
	move r1 to y-axis [0] speed [0.0830000];
	move r2 to y-axis [0] speed [0.1330000];
	move r3 to y-axis [0] speed [0.233000];
	move l1 to y-axis [0] speed [0.083000];
	move l2 to y-axis [0] speed [0.1330000];
	move l3 to y-axis [0] speed [0.233000];

	start-script SetMaxReloadTime(6000);
	sleep 6000;
	shooting=0;

}



QueryPrimary(piecenum)
{
	piecenum = chamber_flare_fixed;
}
QuerySecondary(piecenum)
{
	piecenum = chamber_flare_fixed;
}

AimFromPrimary(piecenum)
{

	piecenum = aimfromy;//aimfromy
}
AimFromSecondary(piecenum)
{

	piecenum = aimfromy;
}











SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode gun type BITMAPONLY | NOHEATCLOUD;
		explode hood type BITMAPONLY | NOHEATCLOUD;
		explode chamber type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode gun type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode hood type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode chamber type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode gun type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode hood type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode chamber type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode flare type SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode gun type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode hood type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode chamber type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
