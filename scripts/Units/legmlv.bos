
#include "../recoil_common_includes.h"

#include "sfxtype.h"
#include "exptype.h"

#define SIG_BUILD		2	

piece  flare1, flare2, base, aimy1, turret, aimx1, sleeve, nanogun, larmor, rarmor, 
	   susfl, susfr, susbl, susbr, wheelfl, wheelfr, wheelbl, wheelbr;

static-var  notBuilding, bMoving, statechg_DesiredState, statechg_StateChanging, currentSpeed, wheelSpeed, movespeed, animSpeed, maxSpeed, animFramesPerKeyframe, gun;

#define BASEPIECE base
#define HITSPEED <65.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 1
#define MAXTILT 100

#include "unit_hitbyweaponid_and_smoke.h"

WheelControl()
{
	while(TRUE)
	{
		currentSpeed = (get CURRENT_SPEED)*20/moveSpeed;
		wheelSpeed = currentSpeed * 30; 
		if (currentSpeed<1) currentSpeed=1;	// prevent infinite timing			
		spin wheelfl around x-axis speed  (<1> * wheelSpeed);
		spin wheelfr around x-axis speed  (<1> * wheelSpeed);			
		spin wheelbl around x-axis speed  (<1> * wheelSpeed);			
		spin wheelbr around x-axis speed  (<1> * wheelSpeed);			 
		sleep 98; //200
	}
}

Go()
{
	turn rarmor to z-axis <-30> speed <60>;
	turn larmor to z-axis <30> speed <60>;
	
	turn susfl to x-axis <15> speed <30>;
	turn susfr to x-axis <15> speed <30>;
	turn susbl to x-axis <-45> speed <90>;
	turn susbr to x-axis <-45> speed <90>;
	
	move base to y-axis [4] speed [8];
	turn base to x-axis <10> speed <40>;
	
	
	wait-for-turn susfl around x-axis;
	turn turret to x-axis <90> speed <180>;
	wait-for-turn turret around x-axis;
	move aimy1 to z-axis [7] speed [16];
	
	move nanogun to y-axis [-4] speed [8];
}

Stop()
{
	set INBUILDSTANCE to 0;
	
	turn turret to z-axis <0> speed <180>;
	turn aimx1 to x-axis <0> speed <180>;
	wait-for-turn turret around x-axis;	

	move nanogun to y-axis [0] speed [8];
	
	turn aimy1 to y-axis <0> speed <240>;
	move aimy1 to z-axis [0] speed [20];
	
	wait-for-turn aimy1 around y-axis;
	turn turret to x-axis <0> speed <180>;
	
	wait-for-turn turret around x-axis;
	turn rarmor to z-axis <0> speed <60>;
	turn larmor to z-axis <0> speed <60>;
	
	turn susfl to x-axis <0> speed <30>;
	turn susfr to x-axis <0> speed <30>;
	turn susbl to x-axis <0> speed <90>;
	turn susbr to x-axis <0> speed <90>;
	
	move base to y-axis [0] speed [8];
	turn base to x-axis <0> speed <40>;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script Stop();
			notBuilding = 1;
			currentstate = 1;
		}
		else
		{
			call-script Go();
			notBuilding = 0;
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	hide flare1;
	hide flare2;
	moveSpeed = get MAX_SPEED;
	bMoving = FALSE;
	notBuilding = 1;
	gun = 0;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	animSpeed = 4;
	SLEEP_UNTIL_UNITFINISHED;
	start-script RequestState(1);
	start-script WheelControl();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(heading, pitch)
{
	show flare1;
	show flare2;
	start-script RequestState(0);
	while( notBuilding ) sleep 100;
	signal SIG_BUILD;
	turn aimy1 to y-axis heading + <180> speed <360.000000>;
	turn aimx1 to x-axis pitch - <-5> speed <180>;
	wait-for-turn turret around y-axis;
	set INBUILDSTANCE to 1;
}

StopBuilding()
{
    signal SIG_BUILD;	
	set-signal-mask SIG_BUILD;
	sleep 6000;
	set-signal-mask 0;
	signal SIG_BUILD;	
	start-script RequestState(1);
}

StartMoving()
{
 return (0);
}

StopMoving()
{
 return (0);
}

QueryNanoPiece(piecenum)
{
	piecenum = gun;
	gun = !gun;
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	turn aimy1 to y-axis heading + <180> speed <360>;
	wait-for-turn turret around y-axis;
	set INBUILDSTANCE to 1;
	return (1);
}

/*
TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
}
*/

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode rarmor type BITMAPONLY | NOHEATCLOUD;
		explode sleeve type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode rarmor type BITMAPONLY | NOHEATCLOUD;
		explode sleeve type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rarmor type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rarmor type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode sleeve type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		return corpsetype;
}
