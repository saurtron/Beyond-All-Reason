#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

//INCREMENT THIS COUNTER FOR EVERY HOUR OF YOUR LIFE WASTED HERE: 80

piece head, torso, luparm, biggun, ruparm,rloarm,lflare, nano, laserflare, pelvis, rthigh, lthigh ,lleg ,rleg,rfoot,
		lfoot, dish, barrel, aimy1, aimx1, aimx2, hatpoint, teleport, railturretl, railsleevel, railflarel, sleeve, barrelr, flare, 
		barrel1l, barrel2l, barrel3l, barrel4l, railturretr, railsleever, railflarer, barrel1r, barrel2r, barrel3r, barrel4r, Ref_Point,
		turretmis, misbox, misflare, vortex1, vortex2, vortex3, ltoesflare, rtoesflare, flare1, flare2, flare3, flare4, flare5, flare6,
		laserflarelight, sensorflare1, sensorflare2, sensorflare3, eaterbeamflare, tlbase, tlturret, tlflare, plunger;

static-var isAiming, isBuilding, isAimingEaterBeam, eaterBeamIncrement, buildHeading, buildPitch,
			leftArm, rightArm,animSpeed, torsoaim, gun_1, wpn1_lasthead, wpn4_lasthead, wpn5_lasthead, torsoPriority, currentHealth,
			
			//general logic variables
			cycle, farSenseWaitThreshold, eaterBeamAggro,
			
			//for turbofire weapons
			turboMisAimReady, lastTurboWeapon10Shot, disableTurbo10ShotChange, disableTurbo11BarrelChange, turboOffTime, turboOnTime, turboWeaponChangeIncriment,
			
			//for special weapons
			enableEaterBeam, specialIncrementThreshold, eaterBeamDisableCycle, eaterBeamBonusGiven,
			
			//for sensor logic
			incrimentSensedVTOL, incrimentSensedGroundScout, incrimentSensedGroundNear,	groundScoutSensed,  groundNearSensed, VTOLsensed,
			incrimentSensedFar, highestSensorValue,
			
			suspendWeapon, turboWeaponSelect, specialWeaponSelect;//debug row
// Signal definitions
#define SIG_AIM 2
#define SIG_WALK 4
#define SIG_AIM_2 8
#define SIG_FIRE1 16
#define SIG_AIMMIS 32
#define SIG_LARM 64
#define SIG_TL 128

// Generated for D:\spring\animation\armcom_anim_walk_v4.blend
// Using https://github.com/Beherith/Skeletor_S3O
// this animation uses the static-var animFramesPerKeyframe which contains how many frames each keyframe takes
static-var maxSpeed, animFramesPerKeyframe, bMoving;
Walk() {//Created by https://github.com/Beherith/Skeletor_S3O from D:\spring\animation\armcom_anim_walk_v4.blend
	// (c) CC BY NC ND Beherith mysterme@gmail.com
	set-signal-mask SIG_WALK;
	if (bMoving) { //Frame:4
			if (leftArm) turn biggun to x-axis <-48.215180> speed <113.735764> / animSpeed; //delta=-3.79
			turn head to x-axis <-2.620635> speed <39.654598> / animSpeed; //delta=1.32
			turn head to y-axis <-3.829846> speed <114.895376> / animSpeed; //delta=-3.83
			turn lfoot to x-axis <-33.266887> speed <1084.110406> / animSpeed; //delta=36.14
			turn lleg to x-axis <55.932201> speed <1005.195679> / animSpeed; //delta=-33.51
			turn lthigh to x-axis <-55.237751> speed <1023.679605> / animSpeed; //delta=34.12
			turn lthigh to z-axis <10.085981> speed <605.673206> / animSpeed; //delta=-20.19
			turn lthigh to y-axis <15.046731> speed <118.088344> / animSpeed; //delta=3.94
			if (leftArm) turn luparm to x-axis <9.919362> speed <279.367450> / animSpeed; //delta=9.31
			if (leftArm) turn luparm to z-axis <-12.399998> speed <114.000041> / animSpeed; //delta=-3.80
			if (leftArm) turn luparm to y-axis <0.965138> speed <187.380006> / animSpeed; //delta=-6.25
			turn pelvis to z-axis <-1.666667> speed <49.999997> / animSpeed; //delta=1.67
			turn pelvis to y-axis <-2.296296> speed <68.888891> / animSpeed; //delta=-2.30
			turn rfoot to x-axis <-24.788553> speed <756.115081> / animSpeed; //delta=25.20
			turn rleg to x-axis <21.945633> speed <114.672797> / animSpeed; //delta=3.82
			if (rightArm) turn rloarm to x-axis <-56.129627> speed <87.888962> / animSpeed; //delta=2.93
			turn rthigh to x-axis <3.073465> speed <750.722777> / animSpeed; //delta=-25.02
			turn rthigh to z-axis <1.955836> speed <223.218383> / animSpeed; //delta=7.44
			turn rthigh to y-axis <-0.370374> speed <346.061345> / animSpeed; //delta=11.54
			if (rightArm) turn ruparm to x-axis <21.424041> speed <98.073542> / animSpeed; //delta=3.27
			if (rightArm) turn ruparm to y-axis <1.762963> speed <52.888889> / animSpeed; //delta=1.76
			turn aimy1 to x-axis <-4.288164> speed <60.727696> / animSpeed; //delta=2.02
			turn aimy1 to z-axis <1.713372> speed <51.401158> / animSpeed; //delta=-1.71
			turn aimy1 to y-axis <7.879434> speed <236.383029> / animSpeed; //delta=7.88
		sleep ((33*animSpeed) -1);
	}
	while(bMoving) {
		if (bMoving) { //Frame:8
			if (leftArm) turn biggun to x-axis <-46.675856> speed <46.179694> / animSpeed; //delta=-1.54
			turn head to x-axis <-1.563179> speed <31.723679> / animSpeed; //delta=-1.06
			turn head to y-axis <-6.127755> speed <68.937274> / animSpeed; //delta=-2.30
			turn lfoot to x-axis <3.301643> speed <1097.055898> / animSpeed; //delta=-36.57
			turn lleg to x-axis <21.188054> speed <1042.324382> / animSpeed; //delta=34.74
			turn lthigh to x-axis <-49.309980> speed <177.833127> / animSpeed; //delta=-5.93
			turn lthigh to z-axis <12.410994> speed <69.750404> / animSpeed; //delta=-2.33
			turn lthigh to y-axis <17.664281> speed <78.526514> / animSpeed; //delta=2.62
			if (leftArm) turn luparm to x-axis <17.175860> speed <217.694940> / animSpeed; //delta=-7.26
			if (leftArm) turn luparm to y-axis <2.994882> speed <60.892341> / animSpeed; //delta=2.03
			move pelvis to y-axis [-1.370370] speed [8.888887] / animSpeed; //delta=-0.30
			turn pelvis to z-axis <-4.074074> speed <72.222229> / animSpeed; //delta=2.41
			turn pelvis to y-axis <-5.185185> speed <86.666661> / animSpeed; //delta=-2.89
			turn rfoot to x-axis <-24.385273> speed <12.098399> / animSpeed; //delta=-0.40
			turn rleg to x-axis <2.775391> speed <575.107266> / animSpeed; //delta=19.17
			if (rightArm) turn rloarm to x-axis <-61.570378> speed <163.222533> / animSpeed; //delta=5.44
			turn rthigh to x-axis <24.923063> speed <655.487959> / animSpeed; //delta=-21.85
			turn rthigh to z-axis <7.511525> speed <166.670667> / animSpeed; //delta=-5.56
			turn rthigh to y-axis <-5.809679> speed <163.179149> / animSpeed; //delta=-5.44
			if (rightArm) turn ruparm to x-axis <16.696394> speed <141.829407> / animSpeed; //delta=4.73
			if (rightArm) turn ruparm to y-axis <5.908277> speed <124.359412> / animSpeed; //delta=4.15
			turn aimy1 to x-axis <-3.674753> speed <18.402335> / animSpeed; //delta=-0.61
			turn aimy1 to z-axis <4.188244> speed <74.246156> / animSpeed; //delta=-2.47
			turn aimy1 to y-axis <13.926961> speed <181.425790> / animSpeed; //delta=6.05
		sleep ((33*animSpeed) -1);
		}
		if (bMoving) { //Frame:12
			if (leftArm) turn biggun to x-axis <-46.110552> speed <16.959121> / animSpeed; //delta=-0.57
			turn head to x-axis <0.023005> speed <47.585527> / animSpeed; //delta=-1.59
			turn head to y-axis <-7.659692> speed <45.958102> / animSpeed; //delta=-1.53
			turn lfoot to x-axis <11.411680> speed <243.301125> / animSpeed; //delta=-8.11
			turn lleg to x-axis <-6.333642> speed <825.650884> / animSpeed; //delta=27.52
			turn lthigh to x-axis <-28.939382> speed <611.117960> / animSpeed; //delta=-20.37
			turn lthigh to z-axis <10.100023> speed <69.329144> / animSpeed; //delta=2.31
			turn lthigh to y-axis <14.540810> speed <93.704134> / animSpeed; //delta=-3.12
			if (leftArm) turn luparm to x-axis <20.474264> speed <98.952127> / animSpeed; //delta=-3.30
			if (leftArm) turn luparm to y-axis <5.388938> speed <71.821661> / animSpeed; //delta=2.39
			move pelvis to y-axis [-2.000000] speed [18.888888] / animSpeed; //delta=-0.63
			turn pelvis to z-axis <-5.000000> speed <27.777769> / animSpeed; //delta=0.93
			turn pelvis to y-axis <-6.000000> speed <24.444453> / animSpeed; //delta=-0.81
			turn rfoot to x-axis <-34.556331> speed <305.131751> / animSpeed; //delta=10.17
			turn rleg to x-axis <32.187523> speed <882.363941> / animSpeed; //delta=-29.41
			if (rightArm) turn rloarm to x-axis <-64.499997> speed <87.888552> / animSpeed; //delta=2.93
			turn rthigh to x-axis <18.715526> speed <186.226115> / animSpeed; //delta=6.21
			turn rthigh to z-axis <9.760341> speed <67.464476> / animSpeed; //delta=-2.25
			turn rthigh to y-axis <-5.182428> speed <18.817525> / animSpeed; //delta=0.63
			if (rightArm) turn ruparm to x-axis <12.622570> speed <122.214735> / animSpeed; //delta=4.07
			if (rightArm) turn ruparm to y-axis <6.799999> speed <26.751678> / animSpeed; //delta=0.89
			turn aimy1 to x-axis <-2.141225> speed <46.005832> / animSpeed; //delta=-1.53
			turn aimy1 to z-axis <5.140116> speed <28.556180> / animSpeed; //delta=-0.95
			turn aimy1 to y-axis <15.758869> speed <54.957239> / animSpeed; //delta=1.83
		sleep ((33*animSpeed) -1);
		}
		if (bMoving) { //Frame:16
			if (leftArm) turn biggun to x-axis <-47.068049> speed <28.724907> / animSpeed; //delta=0.96
			turn head to x-axis <-0.505722> speed <15.861819> / animSpeed; //delta=0.53
			turn head to y-axis <-6.127755> speed <45.958102> / animSpeed; //delta=1.53
			turn lfoot to x-axis <2.879686> speed <255.959826> / animSpeed; //delta=8.53
			turn lleg to x-axis <40.292208> speed <1398.775490> / animSpeed; //delta=-46.63
			turn lthigh to x-axis <-49.313423> speed <611.221232> / animSpeed; //delta=20.37
			turn lthigh to z-axis <11.258773> speed <34.762504> / animSpeed; //delta=-1.16
			turn lthigh to y-axis <17.221502> speed <80.420765> / animSpeed; //delta=2.68
			if (leftArm) turn luparm to x-axis <19.047441> speed <42.804693> / animSpeed; //delta=1.43
			move pelvis to y-axis [-2.833333] speed [25.000005] / animSpeed; //delta=-0.83
			turn pelvis to z-axis <-3.962963> speed <31.111110> / animSpeed; //delta=-1.04
			turn pelvis to y-axis <-5.026455> speed <29.206358> / animSpeed; //delta=0.97
			turn rfoot to x-axis <-27.196287> speed <220.801335> / animSpeed; //delta=-7.36
			turn rleg to x-axis <78.322421> speed <1384.046960> / animSpeed; //delta=-46.13
			turn rleg to z-axis <-0.165893> speed <4.758378> / animSpeed; //delta=0.16
			turn rleg to y-axis <0.140044> speed <4.092714> / animSpeed; //delta=0.14
			if (rightArm) turn rloarm to x-axis <-62.031478> speed <74.055575> / animSpeed; //delta=-2.47
			turn rthigh to x-axis <-2.425270> speed <634.223885> / animSpeed; //delta=21.14
			turn rthigh to z-axis <5.889018> speed <116.139691> / animSpeed; //delta=3.87
			turn rthigh to y-axis <2.215249> speed <221.930321> / animSpeed; //delta=7.40
			if (rightArm) turn ruparm to x-axis <12.782766> speed <4.805883> / animSpeed; //delta=-0.16
			if (rightArm) turn ruparm to y-axis <6.141609> speed <19.751703> / animSpeed; //delta=-0.66
			turn aimy1 to x-axis <-3.061342> speed <27.603503> / animSpeed; //delta=0.92
			turn aimy1 to z-axis <4.074019> speed <31.982933> / animSpeed; //delta=1.07
			turn aimy1 to y-axis <13.926961> speed <54.957239> / animSpeed; //delta=-1.83
		sleep ((33*animSpeed) -1);
		}
		if (bMoving) { //Frame:20
			if (leftArm) turn biggun to x-axis <-49.335727> speed <68.030323> / animSpeed; //delta=2.27
			turn head to x-axis <-2.091907> speed <47.585562> / animSpeed; //delta=1.59
			turn head to y-axis <-3.829846> speed <68.937274> / animSpeed; //delta=2.30
			turn lfoot to x-axis <-11.362748> speed <427.273021> / animSpeed; //delta=14.24
			turn lleg to x-axis <55.773467> speed <464.437769> / animSpeed; //delta=-15.48
			turn lthigh to x-axis <-43.832869> speed <164.416621> / animSpeed; //delta=-5.48
			turn lthigh to z-axis <4.706604> speed <196.565054> / animSpeed; //delta=6.55
			turn lthigh to y-axis <8.321622> speed <266.996423> / animSpeed; //delta=-8.90
			if (leftArm) turn luparm to x-axis <15.615877> speed <102.946916> / animSpeed; //delta=3.43
			if (leftArm) turn luparm to y-axis <5.076670> speed <9.368019> / animSpeed; //delta=-0.31
			turn pelvis to z-axis <-2.000000> speed <58.888879> / animSpeed; //delta=-1.96
			turn pelvis to y-axis <-2.772487> speed <67.619039> / animSpeed; //delta=2.25
			turn rfoot to x-axis <-39.119034> speed <357.682424> / animSpeed; //delta=11.92
			turn rleg to x-axis <104.636879> speed <789.433742> / animSpeed; //delta=-26.31
			turn rleg to z-axis <0.031377> speed <5.918091> / animSpeed; //delta=-0.20
			turn rleg to y-axis <-0.045903> speed <5.578386> / animSpeed; //delta=-0.19
			if (rightArm) turn rloarm to x-axis <-56.185181> speed <175.388910> / animSpeed; //delta=-5.85
			turn rthigh to x-axis <-29.245227> speed <804.598715> / animSpeed; //delta=26.82
			turn rthigh to z-axis <3.330593> speed <76.752755> / animSpeed; //delta=2.56
			turn rthigh to y-axis <-1.498384> speed <111.408996> / animSpeed; //delta=-3.71
			if (rightArm) turn ruparm to x-axis <13.904138> speed <33.641183> / animSpeed; //delta=-1.12
			if (rightArm) turn ruparm to y-axis <2.429630> speed <111.359389> / animSpeed; //delta=-3.71
			turn aimy1 to x-axis <-3.981459> speed <27.603503> / animSpeed; //delta=0.92
			turn aimy1 to z-axis <2.056047> speed <60.539158> / animSpeed; //delta=2.02
			turn aimy1 to y-axis <7.879434> speed <181.425790> / animSpeed; //delta=-6.05
		sleep ((33*animSpeed) -1);
		}
		if (bMoving) { //Frame:24
			if (leftArm) turn biggun to x-axis <-52.006372> speed <80.119348> / animSpeed; //delta=2.67
			turn head to x-axis <-3.149363> speed <31.723676> / animSpeed; //delta=1.06
			turn head to y-axis <0.000000> speed <114.895376> / animSpeed; //delta=3.83
			turn lfoot to x-axis <-23.280778> speed <357.540911> / animSpeed; //delta=11.92
			turn lleg to x-axis <46.510843> speed <277.878733> / animSpeed; //delta=9.26
			turn lthigh to x-axis <-23.415420> speed <612.523459> / animSpeed; //delta=-20.42
			turn lthigh to z-axis <0.280779> speed <132.774760> / animSpeed; //delta=4.43
			turn lthigh to y-axis <1.272165> speed <211.483711> / animSpeed; //delta=-7.05
			if (leftArm) turn luparm to x-axis <11.452920> speed <124.888703> / animSpeed; //delta=4.16
			if (leftArm) turn luparm to y-axis <3.308728> speed <53.038265> / animSpeed; //delta=-1.77
			move pelvis to y-axis [-2.000000] speed [25.555551] / animSpeed; //delta=0.85
			turn pelvis to z-axis <-0.000000> speed <60.000006> / animSpeed; //delta=-2.00
			turn pelvis to y-axis <0.000000> speed <83.174607> / animSpeed; //delta=2.77
			turn rfoot to x-axis <-45.278120> speed <184.772566> / animSpeed; //delta=6.16
			turn rleg to x-axis <90.786697> speed <415.505474> / animSpeed; //delta=13.85
			turn rleg to z-axis <0.843235> speed <24.355743> / animSpeed; //delta=-0.81
			turn rleg to y-axis <-0.860075> speed <24.425185> / animSpeed; //delta=-0.81
			if (rightArm) turn rloarm to x-axis <-49.299998> speed <206.555473> / animSpeed; //delta=-6.89
			turn rthigh to x-axis <-43.951970> speed <441.202285> / animSpeed; //delta=14.71
			turn rthigh to z-axis <-2.997201> speed <189.833832> / animSpeed; //delta=6.33
			turn rthigh to y-axis <-9.866792> speed <251.052245> / animSpeed; //delta=-8.37
			if (rightArm) turn ruparm to x-axis <16.947865> speed <91.311783> / animSpeed; //delta=-3.04
			if (rightArm) turn ruparm to y-axis <0.900000> speed <45.888888> / animSpeed; //delta=-1.53
			turn aimy1 to x-axis <-4.594870> speed <18.402335> / animSpeed; //delta=0.61
			turn aimy1 to z-axis <-0.000000> speed <61.681404> / animSpeed; //delta=2.06
			turn aimy1 to y-axis <0.000000> speed <236.383029> / animSpeed; //delta=-7.88
		sleep ((33*animSpeed) -1);
		}
		if (bMoving) { //Frame:28
			if (leftArm) turn biggun to x-axis <-53.142724> speed <34.090567> / animSpeed; //delta=1.14
			turn head to x-axis <-2.620635> speed <15.861851> / animSpeed; //delta=-0.53
			turn head to y-axis <3.829846> speed <114.895376> / animSpeed; //delta=3.83
			turn lfoot to x-axis <-28.343677> speed <151.886946> / animSpeed; //delta=5.06
			turn lleg to x-axis <27.564644> speed <568.385957> / animSpeed; //delta=18.95
			turn lthigh to x-axis <1.812986> speed <756.852171> / animSpeed; //delta=-25.23
			turn lthigh to z-axis <-2.460308> speed <82.232611> / animSpeed; //delta=2.74
			turn lthigh to y-axis <0.746525> speed <15.769200> / animSpeed; //delta=-0.53
			if (leftArm) turn luparm to x-axis <8.807109> speed <79.374337> / animSpeed; //delta=2.65
			if (leftArm) turn luparm to y-axis <-0.396598> speed <111.159777> / animSpeed; //delta=-3.71
			move pelvis to y-axis [-1.129630] speed [26.111112] / animSpeed; //delta=0.87
			turn pelvis to z-axis <1.997872> speed <59.936146> / animSpeed; //delta=-2.00
			turn pelvis to y-axis <2.771879> speed <83.156358> / animSpeed; //delta=2.77
			turn rfoot to x-axis <-33.707871> speed <347.107447> / animSpeed; //delta=-11.57
			turn rleg to x-axis <56.067203> speed <1041.584826> / animSpeed; //delta=34.72
			turn rleg to z-axis <-0.026719> speed <26.098608> / animSpeed; //delta=0.87
			turn rleg to y-axis <0.009522> speed <26.087929> / animSpeed; //delta=0.87
			if (rightArm) turn rloarm to x-axis <-43.425926> speed <176.222159> / animSpeed; //delta=-5.87
			turn rthigh to x-axis <-55.080896> speed <333.867775> / animSpeed; //delta=11.13
			turn rthigh to z-axis <-10.747290> speed <232.502653> / animSpeed; //delta=7.75
			turn rthigh to y-axis <-16.084974> speed <186.545461> / animSpeed; //delta=-6.22
			if (rightArm) turn ruparm to x-axis <22.234335> speed <158.594124> / animSpeed; //delta=-5.29
			if (rightArm) turn ruparm to y-axis <-0.812436> speed <51.373077> / animSpeed; //delta=-1.71
			turn aimy1 to x-axis <-4.288164> speed <9.201174> / animSpeed; //delta=-0.31
			turn aimy1 to z-axis <-2.053859> speed <61.615764> / animSpeed; //delta=2.05
			turn aimy1 to y-axis <-7.879434> speed <236.383029> / animSpeed; //delta=-7.88
		sleep ((33*animSpeed) -1);
		}
		if (bMoving) { //Frame:32
			if (leftArm) turn biggun to x-axis <-55.253092> speed <63.311038> / animSpeed; //delta=2.11
			turn head to x-axis <-1.563179> speed <31.723670> / animSpeed; //delta=-1.06
			turn head to y-axis <6.127755> speed <68.937274> / animSpeed; //delta=2.30
			turn lfoot to x-axis <-21.408024> speed <208.069572> / animSpeed; //delta=-6.94
			turn lleg to x-axis <3.737072> speed <714.827163> / animSpeed; //delta=23.83
			turn lthigh to x-axis <24.379452> speed <676.993988> / animSpeed; //delta=-22.57
			turn lthigh to z-axis <-7.321217> speed <145.827258> / animSpeed; //delta=4.86
			turn lthigh to y-axis <5.849079> speed <153.076646> / animSpeed; //delta=5.10
			if (leftArm) turn luparm to x-axis <2.317686> speed <194.682700> / animSpeed; //delta=6.49
			if (leftArm) turn luparm to y-axis <-5.045461> speed <139.465893> / animSpeed; //delta=-4.65
			turn pelvis to z-axis <3.963673> speed <58.974037> / animSpeed; //delta=-1.97
			turn pelvis to y-axis <5.026658> speed <67.643372> / animSpeed; //delta=2.25
			turn rfoot to x-axis <-0.546122> speed <994.852480> / animSpeed; //delta=-33.16
			turn rleg to x-axis <21.731893> speed <1030.059292> / animSpeed; //delta=34.34
			if (rightArm) turn rloarm to x-axis <-39.457405> speed <119.055627> / animSpeed; //delta=-3.97
			turn rthigh to x-axis <-48.555555> speed <195.760223> / animSpeed; //delta=-6.53
			turn rthigh to z-axis <-12.921380> speed <65.222706> / animSpeed; //delta=2.17
			turn rthigh to y-axis <-18.341445> speed <67.694124> / animSpeed; //delta=-2.26
			if (rightArm) turn ruparm to x-axis <27.520808> speed <158.594175> / animSpeed; //delta=-5.29
			if (rightArm) turn ruparm to y-axis <-1.893975> speed <32.446164> / animSpeed; //delta=-1.08
			turn aimy1 to x-axis <-3.674753> speed <18.402335> / animSpeed; //delta=-0.61
			turn aimy1 to z-axis <-4.074748> speed <60.626684> / animSpeed; //delta=2.02
			turn aimy1 to y-axis <-13.926961> speed <181.425790> / animSpeed; //delta=-6.05
		sleep ((33*animSpeed) -1);
		}
		if (bMoving) { //Frame:36
			if (leftArm) turn biggun to x-axis <-56.389444> speed <34.090567> / animSpeed; //delta=1.14
			turn head to x-axis <0.023005> speed <47.585536> / animSpeed; //delta=-1.59
			turn head to y-axis <7.659692> speed <45.958102> / animSpeed; //delta=1.53
			turn lfoot to x-axis <-33.511695> speed <363.110120> / animSpeed; //delta=12.10
			turn lleg to x-axis <32.254462> speed <855.521701> / animSpeed; //delta=-28.52
			turn lthigh to x-axis <18.565433> speed <174.420577> / animSpeed; //delta=5.81
			turn lthigh to z-axis <-9.818104> speed <74.906625> / animSpeed; //delta=2.50
			turn lthigh to y-axis <5.332458> speed <15.498655> / animSpeed; //delta=-0.52
			if (leftArm) turn luparm to x-axis <-3.274263> speed <167.758466> / animSpeed; //delta=5.59
			if (leftArm) turn luparm to y-axis <-6.556594> speed <45.333998> / animSpeed; //delta=-1.51
			move pelvis to y-axis [-2.000000] speed [25.555555] / animSpeed; //delta=-0.85
			turn pelvis to z-axis <5.000000> speed <31.089813> / animSpeed; //delta=-1.04
			turn pelvis to y-axis <6.000000> speed <29.200275> / animSpeed; //delta=0.97
			turn rfoot to x-axis <4.673420> speed <156.586261> / animSpeed; //delta=-5.22
			turn rleg to x-axis <17.968366> speed <112.905793> / animSpeed; //delta=3.76
			if (rightArm) turn rloarm to x-axis <-38.000000> speed <43.722158> / animSpeed; //delta=-1.46
			turn rthigh to x-axis <-40.972853> speed <227.481055> / animSpeed; //delta=-7.58
			turn rthigh to z-axis <-12.483621> speed <13.132763> / animSpeed; //delta=-0.44
			turn rthigh to y-axis <-18.495587> speed <4.624260> / animSpeed; //delta=-0.15
			if (rightArm) turn ruparm to x-axis <29.923749> speed <72.088224> / animSpeed; //delta=-2.40
			if (rightArm) turn ruparm to y-axis <-2.615000> speed <21.630765> / animSpeed; //delta=-0.72
			turn aimy1 to x-axis <-2.141225> speed <46.005832> / animSpeed; //delta=-1.53
			turn aimy1 to z-axis <-5.140116> speed <31.961046> / animSpeed; //delta=1.07
			turn aimy1 to y-axis <-15.758869> speed <54.957239> / animSpeed; //delta=-1.83
		sleep ((33*animSpeed) -1);
		}
		if (bMoving) { //Frame:40
			if (leftArm) turn biggun to x-axis <-55.431951> speed <28.724805> / animSpeed; //delta=-0.96
			turn head to x-axis <-0.505722> speed <15.861819> / animSpeed; //delta=0.53
			turn head to y-axis <6.127755> speed <45.958102> / animSpeed; //delta=-1.53
			turn lfoot to x-axis <-26.332418> speed <215.378302> / animSpeed; //delta=-7.18
			turn lleg to x-axis <78.044494> speed <1373.700965> / animSpeed; //delta=-45.79
			turn lleg to z-axis <0.174770> speed <5.001042> / animSpeed; //delta=-0.17
			turn lleg to y-axis <-0.146625> speed <4.279269> / animSpeed; //delta=-0.14
			turn lthigh to x-axis <-2.370128> speed <628.066816> / animSpeed; //delta=20.94
			turn lthigh to z-axis <-5.835163> speed <119.488247> / animSpeed; //delta=-3.98
			turn lthigh to y-axis <-2.219125> speed <226.547492> / animSpeed; //delta=-7.55
			if (leftArm) turn luparm to x-axis <-3.054371> speed <6.596772> / animSpeed; //delta=-0.22
			if (leftArm) turn luparm to y-axis <-6.061839> speed <14.842650> / animSpeed; //delta=0.49
			move pelvis to y-axis [-2.851852] speed [25.555558] / animSpeed; //delta=-0.85
			turn pelvis to z-axis <3.933333> speed <31.999991> / animSpeed; //delta=1.07
			turn pelvis to y-axis <4.992593> speed <30.222230> / animSpeed; //delta=-1.01
			turn rfoot to x-axis <5.697123> speed <30.711083> / animSpeed; //delta=-1.02
			turn rleg to x-axis <37.499340> speed <585.929212> / animSpeed; //delta=-19.53
			if (rightArm) turn rloarm to x-axis <-40.468516> speed <74.055472> / animSpeed; //delta=2.47
			turn rthigh to x-axis <-47.862042> speed <206.675650> / animSpeed; //delta=6.89
			turn rthigh to z-axis <-11.534632> speed <28.469671> / animSpeed; //delta=-0.95
			turn rthigh to y-axis <-17.767171> speed <21.852473> / animSpeed; //delta=0.73
			if (rightArm) turn ruparm to x-axis <28.884286> speed <31.183878> / animSpeed; //delta=1.04
			if (rightArm) turn ruparm to y-axis <-1.954060> speed <19.828204> / animSpeed; //delta=0.66
			turn aimy1 to x-axis <-3.061342> speed <27.603503> / animSpeed; //delta=0.92
			turn aimy1 to z-axis <-4.043559> speed <32.896722> / animSpeed; //delta=-1.10
			turn aimy1 to y-axis <-13.926961> speed <54.957239> / animSpeed; //delta=1.83
		sleep ((33*animSpeed) -1);
		}
		if (bMoving) { //Frame:44
			if (leftArm) turn biggun to x-axis <-53.164273> speed <68.030323> / animSpeed; //delta=-2.27
			turn head to x-axis <-2.091907> speed <47.585562> / animSpeed; //delta=1.59
			turn head to y-axis <3.829846> speed <68.937274> / animSpeed; //delta=-2.30
			turn lfoot to x-axis <-38.582946> speed <367.515848> / animSpeed; //delta=12.25
			turn lleg to x-axis <104.269176> speed <786.740462> / animSpeed; //delta=-26.22
			turn lleg to z-axis <-0.034635> speed <6.282160> / animSpeed; //delta=0.21
			turn lleg to y-axis <0.050427> speed <5.911553> / animSpeed; //delta=0.20
			turn lthigh to x-axis <-29.086507> speed <801.491385> / animSpeed; //delta=26.72
			turn lthigh to z-axis <-3.433171> speed <72.059742> / animSpeed; //delta=-2.40
			turn lthigh to y-axis <1.068465> speed <98.627710> / animSpeed; //delta=3.29
			if (leftArm) turn luparm to x-axis <-1.515114> speed <46.177713> / animSpeed; //delta=-1.54
			if (leftArm) turn luparm to y-axis <-4.161596> speed <57.007282> / animSpeed; //delta=1.90
			turn pelvis to z-axis <2.088889> speed <55.333337> / animSpeed; //delta=1.84
			turn pelvis to y-axis <2.874074> speed <63.555555> / animSpeed; //delta=-2.12
			turn rfoot to x-axis <-11.381223> speed <512.350363> / animSpeed; //delta=17.08
			turn rleg to x-axis <55.770656> speed <548.139483> / animSpeed; //delta=-18.27
			if (rightArm) turn rloarm to x-axis <-46.314813> speed <175.388910> / animSpeed; //delta=5.85
			turn rthigh to x-axis <-43.758461> speed <123.107432> / animSpeed; //delta=-4.10
			turn rthigh to z-axis <-5.082535> speed <193.562904> / animSpeed; //delta=-6.45
			turn rthigh to y-axis <-9.017982> speed <262.475666> / animSpeed; //delta=8.75
			if (rightArm) turn ruparm to x-axis <26.384334> speed <74.998551> / animSpeed; //delta=2.50
			if (rightArm) turn ruparm to y-axis <-0.722308> speed <36.952569> / animSpeed; //delta=1.23
			turn aimy1 to x-axis <-3.981459> speed <27.603503> / animSpeed; //delta=0.92
			turn aimy1 to z-axis <-2.147426> speed <56.883980> / animSpeed; //delta=-1.90
			turn aimy1 to y-axis <-7.879434> speed <181.425790> / animSpeed; //delta=6.05
		sleep ((33*animSpeed) -1);
		}
		if (bMoving) { //Frame:48
			if (leftArm) turn biggun to x-axis <-50.493628> speed <80.119348> / animSpeed; //delta=-2.67
			turn head to x-axis <-3.149363> speed <31.723676> / animSpeed; //delta=1.06
			turn head to y-axis <0.000000> speed <114.895376> / animSpeed; //delta=-3.83
			turn lfoot to x-axis <-44.880435> speed <188.924672> / animSpeed; //delta=6.30
			turn lleg to x-axis <90.690391> speed <407.363547> / animSpeed; //delta=13.58
			turn lleg to z-axis <-1.028354> speed <29.811568> / animSpeed; //delta=0.99
			turn lleg to y-axis <1.046484> speed <29.881704> / animSpeed; //delta=1.00
			turn lthigh to x-axis <-43.881824> speed <443.859502> / animSpeed; //delta=14.80
			turn lthigh to z-axis <2.753780> speed <185.608529> / animSpeed; //delta=-6.19
			turn lthigh to y-axis <9.180887> speed <243.372656> / animSpeed; //delta=8.11
			if (leftArm) turn luparm to x-axis <2.662867> speed <125.339441> / animSpeed; //delta=-4.18
			if (leftArm) turn luparm to y-axis <-1.793232> speed <71.050921> / animSpeed; //delta=2.37
			move pelvis to y-axis [-2.000000] speed [25.555551] / animSpeed; //delta=0.85
			turn pelvis to z-axis <-0.000000> speed <62.666668> / animSpeed; //delta=2.09
			turn pelvis to y-axis <0.000000> speed <86.222221> / animSpeed; //delta=-2.87
			turn rfoot to x-axis <-23.519080> speed <364.135724> / animSpeed; //delta=12.14
			turn rleg to x-axis <46.484300> speed <278.590678> / animSpeed; //delta=9.29
			if (rightArm) turn rloarm to x-axis <-53.199999> speed <206.555576> / animSpeed; //delta=6.89
			turn rthigh to x-axis <-23.439316> speed <609.574354> / animSpeed; //delta=-20.32
			turn rthigh to z-axis <-0.344027> speed <142.155249> / animSpeed; //delta=-4.74
			turn rthigh to y-axis <-1.531381> speed <224.598052> / animSpeed; //delta=7.49
			if (rightArm) turn ruparm to x-axis <23.351554> speed <90.983396> / animSpeed; //delta=3.03
			if (rightArm) turn ruparm to y-axis <0.479402> speed <36.051284> / animSpeed; //delta=1.20
			turn aimy1 to x-axis <-4.594870> speed <18.402335> / animSpeed; //delta=0.61
			turn aimy1 to z-axis <-0.000000> speed <64.422792> / animSpeed; //delta=-2.15
			turn aimy1 to y-axis <0.000000> speed <236.383029> / animSpeed; //delta=7.88
		sleep ((33*animSpeed) -1);
		}
		if (bMoving) { //Frame:52
			if (leftArm) turn biggun to x-axis <-48.215180> speed <68.353460> / animSpeed; //delta=-2.28
			turn head to x-axis <-2.620635> speed <15.861851> / animSpeed; //delta=-0.53
			turn head to y-axis <-3.829846> speed <114.895376> / animSpeed; //delta=-3.83
			turn lfoot to x-axis <-33.266887> speed <348.406447> / animSpeed; //delta=-11.61
			turn lleg to x-axis <55.932201> speed <1042.745719> / animSpeed; //delta=34.76
			turn lleg to z-axis <0.028179> speed <31.695983> / animSpeed; //delta=-1.06
			turn lleg to y-axis <-0.009821> speed <31.689154> / animSpeed; //delta=-1.06
			turn lthigh to x-axis <-55.237751> speed <340.677815> / animSpeed; //delta=11.36
			turn lthigh to z-axis <10.085981> speed <219.966025> / animSpeed; //delta=-7.33
			turn lthigh to y-axis <15.046731> speed <175.975325> / animSpeed; //delta=5.87
			if (leftArm) turn luparm to x-axis <9.919362> speed <217.694824> / animSpeed; //delta=-7.26
			if (leftArm) turn luparm to y-axis <0.965138> speed <82.751096> / animSpeed; //delta=2.76
			move pelvis to y-axis [-1.074074] speed [27.777776] / animSpeed; //delta=0.93
			turn pelvis to z-axis <-1.666667> speed <49.999997> / animSpeed; //delta=1.67
			turn pelvis to y-axis <-2.296296> speed <68.888891> / animSpeed; //delta=-2.30
			turn rfoot to x-axis <-24.788553> speed <38.084179> / animSpeed; //delta=1.27
			turn rleg to x-axis <21.945633> speed <736.160009> / animSpeed; //delta=24.54
			if (rightArm) turn rloarm to x-axis <-56.129627> speed <87.888859> / animSpeed; //delta=2.93
			turn rthigh to x-axis <3.073465> speed <795.383403> / animSpeed; //delta=-26.51
			turn rthigh to z-axis <1.955836> speed <68.995906> / animSpeed; //delta=-2.30
			turn rthigh to y-axis <-0.370374> speed <34.830198> / animSpeed; //delta=1.16
			if (rightArm) turn ruparm to x-axis <21.424041> speed <57.825406> / animSpeed; //delta=1.93
			if (rightArm) turn ruparm to y-axis <1.762963> speed <38.506840> / animSpeed; //delta=1.28
			turn aimy1 to x-axis <-4.288164> speed <9.201174> / animSpeed; //delta=-0.31
			turn aimy1 to z-axis <1.713372> speed <51.401158> / animSpeed; //delta=-1.71
			turn aimy1 to y-axis <7.879434> speed <236.383029> / animSpeed; //delta=7.88
		sleep ((33*animSpeed) -1);
		}
	}
}
// Call this from MotionControl()!
StopWalking() {
	move pelvis to y-axis [-1.000000] speed [6.944444];
	if (leftArm) turn biggun to x-axis <-52.006372> speed <7>;
	turn head to x-axis <-1.298815> speed <3>;
	turn head to y-axis <0.000000> speed <7>;
	turn lfoot to x-axis <2.870126> speed <70>;
	turn lleg to x-axis <22.425678> speed <90>;
	turn lleg to y-axis <0.000000> speed <2>;
	turn lleg to z-axis <0.000000> speed <2>;
	turn lthigh to x-axis <-21.115098> speed <64>;
	turn lthigh to y-axis <11.110453> speed <17>;
	turn lthigh to z-axis <-10.103126> speed <38>;
	if (leftArm) turn luparm to x-axis <19.231610> speed <17>;
	if (leftArm) turn luparm to y-axis <7.211138> speed <12>;
	if (leftArm) turn luparm to z-axis <-16.200000> speed <7>;
	turn pelvis to y-axis <0.000000> speed <5>;
	turn pelvis to z-axis <0.000000> speed <4.5>;
	turn rfoot to x-axis <0.415283> speed <62>;
	turn rleg to x-axis <25.768060> speed <87>;
	turn rleg to y-axis <0.000000> speed <1.6>;
	turn rleg to z-axis <0.000000> speed <1.6>;
	if (rightArm) turn rloarm to x-axis <-53.199995> speed <13>;
	turn rthigh to x-axis <-21.950628> speed <64>;
	turn rthigh to y-axis <-11.905752> speed <17>;
	turn rthigh to z-axis <9.396449> speed <38>;
	if (rightArm) turn ruparm to x-axis <24.693159> speed <10>;
	if (rightArm) turn ruparm to y-axis <0.000000> speed <8>;
	if (rightArm) turn ruparm to z-axis <12.399998> speed <-1.8>;
	turn aimy1 to x-axis <-2.263907> speed <3.8>;
	turn aimy1 to y-axis <0.000000> speed <15>;
	turn aimy1 to z-axis <0.000000> speed <4.6>;
}
// REMEMBER TO animspeed = 4 in Create() !!
UnitSpeed(){
	maxSpeed = get MAX_SPEED; // this returns cob units per frame i think
	animFramesPerKeyframe = 18; //we need to calc the frames per keyframe value, from the known animtime
	maxSpeed = maxSpeed + (maxSpeed /(2*animFramesPerKeyframe)); // add fudge
	while(TRUE){
		animSpeed = (get CURRENT_SPEED);
		if (animSpeed<7) animSpeed=7;
		animSpeed = (maxSpeed * 54 / 10) / animSpeed;
		//get PRINT(maxSpeed, animFramesPerKeyframe, animSpeed); //how to print debug info from bos
		if (animSpeed<12) animSpeed = 18;
		if (animspeed>54) animSpeed = 54;
		sleep 131;
	}
}
StartMoving(){
  signal SIG_WALK;
  set-signal-mask SIG_WALK;
	bMoving=TRUE;
	start-script Walk();
	start-script UnitSpeed();
}
StopMoving(){
	signal SIG_WALK;
	bMoving = FALSE;
	call-script StopWalking();
}



AmIBored() {
	//--[[Spring.Echo("isAiming: " , isAiming, "isBuilding: " , isBuilding, "isAiming == false and isBuilding == false", isAiming == false and isBuilding == false)]]--
	//return isAiming == false and isBuilding == false and isMoving == false
	if (isAiming == 0){
		if (isBuilding == 0){
			if (bMoving == 0){
				return (1);
			}
		}
	}
	return (0);
}

//declare variables specific to UnitTimer functions

static-var vortexSpinSpeed1, vortexSpinSpeed2, vortexSpinSpeed3, oldEaterBeamIncrement,
 lastSelect;

UnitTimer()
{
	while ( TRUE ){
		
		//eater beam stuff
		if (torsoPriority == 10){ //if eater beam is aiming, increment
			eaterBeamIncrement = (eaterBeamIncrement + 1);
		}
		if (enableEaterBeam == 1 && eaterBeamIncrement < 10){ //below 5 seconds charge time
		spin vortex1 around z-axis speed <150>;
		spin vortex2 around z-axis speed <100>;
		spin vortex3 around z-axis speed <50>;
		}
		if (eaterBeamIncrement > 9 && eaterBeamIncrement < 20){ //5-10 seconds charge time
		spin vortex1 around z-axis speed <450>;
		spin vortex2 around z-axis speed <300>;
		spin vortex3 around z-axis speed <150>;
		}
		if (eaterBeamIncrement > 19){ // 10+ seconds charge time
		spin vortex1 around z-axis speed <1350>;
		spin vortex2 around z-axis speed <900>;
		spin vortex3 around z-axis speed <450>;
		}
		if (eaterBeamAggro > 8000000){ //if damaged enough, enable eater beam and enter vulnerable state
		enableEaterBeam = 1;
		eaterBeamAggro = 0;
		set ARMORED to 0;
		eaterBeamDisableCycle = cycle+40;
		}
		if (enableEaterBeam == 1 && eaterBeamBonusGiven == 0){ //this gauruntees that the eater beam will get at least a little charge each time it starts
			eaterBeamIncrement = eaterBeamIncrement + rand(1, 4);
			eaterBeamBonusGiven = 1;
		}
		if (enableEaterBeam == 0){
			eaterBeamBonusGiven = 0; //this resets bonus, allowing it to be given next time eater beam is enabled
		}
		
		if (enableEaterBeam == 1 OR eaterBeamIncrement >= specialIncrementThreshold){ // telegraph eater beam and special charge
		show nano;
		}
		else{
		hide nano;
		}
		
		
		//update values
		cycle = cycle+1;
		currentHealth = (get HEALTH);
		oldEaterBeamIncrement = eaterBeamIncrement;
		eaterBeamAggro = eaterBeamAggro+rand(50000, 75000);
		turboOffTime = 10+currentHealth/5; //this defines the portion of the turboWeaponChangeIncriment timer that turbo weapons are off.
		
		
		//turboWeapon Selector
		if (turboWeaponChangeIncriment > turboOffTime && turboWeaponSelect == 0){ 
			incrimentSensedVTOL	= (incrimentSensedVTOL + rand(1, 15)) / 2;
			incrimentSensedGroundScout = (incrimentSensedGroundScout + rand(1, 15)) / 2;
			incrimentSensedGroundNear = (incrimentSensedGroundNear + rand(1, 15)) / 2;
			incrimentSensedFar = (incrimentSensedFar + rand(1, 15)) / 2;
			turboOnTime = turboOffTime+rand(200, 300); //this defines the portion of turboWeaponChangeIncriment timer that turbo weapons are selected, then kept activated.
			
			//figure out the highest value
			highestSensorValue = incrimentSensedGroundNear; // Assume one is highest, arbitrarily
			if (incrimentSensedVTOL > highestSensorValue) {
				highestSensorValue = incrimentSensedVTOL;
			}
			if (incrimentSensedGroundScout > highestSensorValue) {
				highestSensorValue = incrimentSensedGroundScout;
			}
			if (incrimentSensedFar > highestSensorValue) {
				highestSensorValue = incrimentSensedFar;
			}
			
			//set turboWeaponSelect based on which value matches highestSensorValue
			if (incrimentSensedVTOL == highestSensorValue){
			turboWeaponSelect = 8;
			incrimentSensedVTOL = 0;
			}
			if (incrimentSensedGroundScout == highestSensorValue){
			turboWeaponSelect = 9;
			incrimentSensedGroundScout = 0;
			}
			if (incrimentSensedGroundNear == highestSensorValue){
			turboWeaponSelect = 10;
			incrimentSensedGroundNear = 0;
			}
			if (incrimentSensedFar== highestSensorValue){
			turboWeaponSelect = 11;
			incrimentSensedFar = 0;
			}
			
			//select special weapons
			if (turboWeaponSelect == 9 OR turboWeaponSelect == 10){
				specialWeaponSelect = 7; //d gun
			}
			//select special weapons
			if (turboWeaponSelect == 8 OR turboWeaponSelect == 11){
				specialWeaponSelect = 12; //special botcannon
			}
		}
		if (turboWeaponChangeIncriment > turboOnTime){
			turboWeaponChangeIncriment = 0;
			turboWeaponSelect = 0;
		}
			
		
		//change turbo telegraph lights showing
		if (turboWeaponSelect == 8){show misflare;}  //turbo missile launcher lights
		else{hide misflare;}
		if (turboWeaponSelect == 9){show lflare;}//turbo shotgun arm lights
		else{hide lflare;}
		if (turboWeaponSelect == 10){show laserflarelight;} //turbo gatlinggun lights
		else{hide laserflarelight;}
		if (turboWeaponSelect == 11){show railflarer; show railflarel;} //turbo lrpc lights
		else{hide railflarer; hide railflarel;}
		
		//disable expired weapons
		if (turboWeaponSelect != 8){
		turboMisAimReady = 0;
		}
		if (eaterBeamIncrement > specialIncrementThreshold OR eaterBeamDisableCycle < cycle){
			enableEaterBeam = 0;
		}
		
		//reset telegraphs
		if (eaterBeamIncrement < 1 && enableEaterBeam == 0){ //eater beam charged reset
		spin vortex1 around z-axis speed <25>;
		spin vortex2 around z-axis speed <50>;
		stop-spin vortex3 around z-axis;
		}
		
		//if vulnerable period expired (while aiming eaterbeam) then restore armored condition
		if (enableEaterBeam == 0){
		set ARMORED to 1;
		}
		
		//reset logic
		groundScoutSensed = 0; //this variable prevents ground_near sensor weapon from aiming/firing when set to 1
		VTOLsensed = 0;
		groundNearSensed = 0;
		
		//debug
		//eaterBeamIncrement = specialIncrementThreshold;
		//get PRINT(turboWeaponSelect, turboWeaponChangeIncriment, turboOffTime, turboOnTime);
		
		sleep 500; //timer repeats every half second
	}
}

//HitByWeaponId(anglex, anglez, weaponid, dmg)	// angle[x|z] is always [-500;500],
//{
//	eaterBeamAggro = dmg + eaterBeamAggro;
//	return (100); //the return value is a percentage of the damage. 100 = 100%
//}

//vars to declare: 

//--------------------------------------------------------
//--start ups :)
//--------------------------------------------------------

Create(){

	hide nano;
	hide misflare;
	hide laserflare;
	hide aimx2;
	hide lflare;
	hide aimx1;
	hide hatpoint;
	hide aimy1;
	hide teleport;
	hide railflarer;
	hide railflarel;
	hide Ref_Point;
	hide ltoesflare;
	hide rtoesflare;
	hide flare;
	hide flare2;
	hide flare3;
	hide flare4;
	hide flare5;
	hide flare6;
	hide eaterbeamflare;
	hide tlflare;
	//turn rloarm to  x-axis <-15> speed <130.0000> ; //-- Turn(rloarm, x-axis, math.rad(-15),math.rad(130))
	turn lflare to x-axis <90> now; //	Turn(lflare, x-axis,math.rad(90))
	turn flare to x-axis <90> now;
	turn nano to x-axis <90> now; //Turn(nano, x-axis,math.rad(90))
	turn laserflare to x-axis <90> now; //	Turn(laserflare, x-axis,math.rad(90))
	//turn head to x-axis <15> now; //tilts head down a little
	spin dish around y-axis speed <100>; //Spin(dish, y-axis, 2.5)
	spin vortex1 around z-axis speed <150>;
	spin vortex2 around z-axis speed <100>;
	spin vortex3 around z-axis speed <50>;
	move plunger to z-axis [0.000000] now;
	animSpeed = 27;
	gun_1 = 1;
	torsoaim = 0;
	bMoving = 0;
	isAiming = 0;
	isBuilding = 0;
	//torsopriority = 0;
	isAimingEaterBeam = 0;
	eaterBeamIncrement = 0;
	oldEaterBeamIncrement = 0;
	lastTurboWeapon10Shot = 1;
	disableTurbo10ShotChange = 0;
	disableTurbo11BarrelChange = 0;
	specialWeaponSelect = 0;
	groundScoutSensed = 0;
	turboOffTime = 0;
	turboOnTime = 10000;
	cycle = 0;
	groundNearSensed = 0;
	VTOLsensed = 0;
	highestSensorValue = 0;
	eaterBeamAggro = 0;
	specialIncrementThreshold = 30;
	eaterBeamDisableCycle = 0;
	turboWeaponChangeIncriment = 0;
	eaterBeamBonusGiven = 0;
	
	//turbo variable initiations
	turboMisAimReady = 0;
	
	turn flare1 to  x-axis <90> speed <1000.0000>;
	turn flare2 to  x-axis <90> speed <1000.0000>;
	turn flare3 to  x-axis <90> speed <1000.0000>;
	turn flare4 to  x-axis <90> speed <1000.0000>;
	turn flare5 to  x-axis <90> speed <1000.0000>;
	turn flare6 to  x-axis <90> speed <1000.0000>;
	
	buildHeading = 0;
	buildPitch = 0;
	leftArm = 1;
	rightArm = 1;
	suspendWeapon = 1; //debug
	turboWeaponSelect = 0;
	call-script StopWalking();
	start-script UnitTimer();
	set ARMORED to 1;
	
	//innitialize AI behavior
	incrimentSensedVTOL	= (incrimentSensedVTOL + rand(15, 30)) / 2;
	incrimentSensedGroundScout = (incrimentSensedGroundScout + rand(15, 30)) / 2;
	incrimentSensedGroundNear = (incrimentSensedGroundNear + rand(15, 30)) / 2;
	incrimentSensedFar = 0;
}

QueryNanoPiece(piecenum)
{
	piecenum = nano;
	return (0);
}

RestoreAfterDelay(){
	set-signal-mask SIG_AIM;
	sleep 100;
	torsopriority = 0;
	sleep 900;
	turn torso to  y-axis <0> speed <45.0000> ; //-- Turn(torso, y-axis, 0, math.rad(305))
	turn biggun to  x-axis <-38> speed <30.0000> ; //-- Turn(biggun, x-axis, math.rad(-38), math.rad(95))
	turn luparm to  x-axis <0> speed <30.0000> ; //-- Turn(luparm, x-axis, 0, math.rad(95))
	turn rloarm to  x-axis <-38> speed <30.0000> ; //-- Turn(rloarm, x-axis, math.rad(-38), math.rad(95))
	turn ruparm to  x-axis <0> speed <30.0000> ; //-- Turn(ruparm, x-axis, 0, math.rad(95))
	turn turretmis to x-axis <0> speed <30.0000> ;
	turn misbox to x-axis <0> speed <30.0000> ;
	stop-spin barrelr around y-axis;
	torsoaim = 0;
	isAiming = 0;
	rightarm = 1;
	leftarm = 1;
	wpn1_lasthead = 1000000;
	wpn4_lasthead = 1000000;
	wpn5_lasthead = 1000000;
}

RestoreAfterDelayTL(){
	set-signal-mask SIG_TL;
	sleep 1000;
	turn tlturret to x-axis <0> speed <45.0000>;
	turn tlturret to y-axis <0> speed <45.0000>;
}
	
ResumeBuilding()
{
	sleep 800;
	if( isBuilding AND ( !isAiming ) )
	{
		turn torso to y-axis buildHeading speed <150.000000>;
		turn luparm to x-axis <-55.000000> - buildPitch speed <45.000000>;
	}
	return (0);
}


//-----------------------------------------------------------------------
//--gun functions;
//-----------------------------------------------------------------------

SweetSpot(piecenum)
{
	piecenum = torso;
	return (0);
}
/////////// pew pew laser
QueryWeapon1(piecenum) //gatling laser gun right arm
{
	piecenum = flare;
	////torsopriority = 0;
	return (0);
}

AimFromWeapon1(piecenum)
{
	piecenum = ruparm;
	return (0);
}

AimWeapon1(heading, pitch) //pew pew
{
	if (suspendWeapon == 0){
		return (0);
	}
	if (turboWeaponSelect == 10){
	return (0);
	}
	if (torsoPriority > 5){
		return (0);
	}
	torsoPriority = 5;
	rightarm = 0;
	//call-script FixArms(0, 1);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn torso to  y-axis heading + <10> speed <150.0000> ; //-- Turn(torso, y-axis, heading, math.rad(300))
	
	
	var gun_xz;
    gun_xz = get PIECE_XZ(rloarm);                                //get packed gun coordinates
    var gun_x;
    gun_x = (gun_xz & 0xffff0000) / 0x00010000;                //unpack x coordinates of gun (credit for unpack code goes to Beherith)
    var gun_z;
    gun_z = (gun_xz & 0x0000ffff);                            //unpack z coordinates of gun
    
    var turret_xz;
    turret_xz = get PIECE_XZ(flare);                        //get packed turret coordinates
    var turret_x;
    turret_x = (turret_xz & 0xffff0000) / 0x00010000;        //unpack x coordinates of turret
    var turret_z;
    turret_z = (turret_xz & 0x0000ffff);                    //unpack z coordinates of turret
    
    var aim_x;
    var aim_z;
    aim_x = gun_x - turret_x;                                //calculate relative coordinates of the gun to the turret (how far away it is in each direction)
    aim_z = gun_z - turret_z;
    
    
    var hull_xz;
    hull_xz = get PIECE_XZ(pelvis);                            //get packed hull coordinates
    var hull_x;
    hull_x = (hull_xz & 0xffff0000) / 0x00010000;            //unpack x coordinates of hull
    var hull_z;
    hull_z = (hull_xz & 0x0000ffff);                        //unpack z coordinates of hull
    
    var smoke_xz;
    smoke_xz = get PIECE_XZ(Ref_Point);                            //get packed smoke coordinates
    var smoke_x;
    smoke_x = (smoke_xz & 0xffff0000) / 0x00010000;            //unpack x coordinates of smoke
    var smoke_z;
    smoke_z = (smoke_xz & 0x0000ffff);                        //unpack z coordinates of smoke
    
    var face_x;
    var face_z;
    face_x = hull_x - smoke_x;                                //calculate relative coordinates of the hull to the smoke (how far away it is in each direction)
    face_z = hull_z - smoke_z;
	
	var cauaim;
    var cauface;
    cauaim = get ATAN(aim_z, aim_x);                        //use arctan (ATAN) to calculate the angle of the turret. The result is in cau, which is the unit this code format uses for angles. Its up to 32768 (180°), positive or negative depending on direction
    cauface = get ATAN(face_z, face_x);                        //use arctan (ATAN) to calculate the angle of the hull. The result is in cau, which is the unit this code format uses for angles. Its up to 32768 (180°), positive or negative depending on direction
    
    //var torsoaim;
    torsoaim = cauface - cauaim;                                //calculate angle of turret relative to the hull
	//torsoaim = heading;
	
	//turn rloarm to  x-axis <-55> speed <50.0000> ; //-- Turn(rloarm, x-axis, math.rad(-55), math.rad(390))
	turn ruparm to x-axis <-40> - pitch speed <75.0000> ; //-- Turn(ruparm,	x-axis, math.rad(-45) - pitch, math.rad(390))
	if (((get ABS(wpn1_lasthead - heading)) > 65536) OR(((get ABS(wpn1_lasthead - heading)) > 1300) AND ((get ABS(wpn1_lasthead - heading)) < 64236)))
	{
		wpn1_lasthead = 1000000;
		wait-for-turn torso around y-axis;
	}
	wpn1_lasthead = heading;
	//wait-for-turn rloarm around x-axis;
	//wait-for-turn ruparm around x-axis;
	isAiming = 1;
	if (turboWeaponSelect == 10){
		return (0);
	}
	if( isBuilding == 1 )
	{
		start-script ResumeBuilding();
	}
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
	spin barrelr around y-axis speed <600.000000>;
	sleep 100;
	//torsopriority = 0;
	return (1);
}

Shot1(zero)
{
	signal SIG_FIRE1;
	set-signal-mask SIG_FIRE1;
	emit-sfx 1024 + 3 from flare;
	return(1);
}

/////////// uw weapon

QueryWeapon2(piecenum) //uw weapon
{
	piecenum = tlturret;
	//torsoPriority = 6;
	return (0);
}

AimFromWeapon2(piecenum)
{
	piecenum = tlturret;
	return (0);
}

AimWeapon2(heading, pitch)
{
	signal SIG_TL;
	set-signal-mask SIG_TL;
	turn tlturret to y-axis heading speed <200.000000>;
	wait-for-turn tlturret around y-axis;
	start-script RestoreAfterDelayTL();
	return (1);
}

FireWeapon2()
{
	move plunger to z-axis [5.000000]  now;

	sleep 25;
	move plunger to z-axis [0.000000] speed [10.000000];
	return (0);
}

QueryWeapon3(piecenum) //left arm shotgun
{
	piecenum = lflare;
	return (0);
}

AimFromWeapon3(piecenum)
{
	piecenum = biggun;
	return (0);
}

FireWeapon3()
{
	//emit-sfx 1024 + 0 from lflare;
	turn luparm to x-axis <20> now;
	turn biggun to x-axis <-100> now;
	move barrel to y-axis [-1.5] now;
	
	turn luparm to x-axis <5> speed <100>;
	turn biggun to x-axis <-85> speed <100>;
	move barrel to y-axis [0] speed [5];
	sleep 100;
	//torsopriority = 0;
	//call-script bigfire();
	return (0);
}

AimWeapon3(heading, pitch)
{
	if (suspendWeapon == 0){
		return (0);
	}
	var reloading;
	reloading = (get GAME_FRAME) < (get WEAPON_RELOADSTATE(3));
	if( reloading ){
		return(0);
	}
	if (torsoPriority > 9){
		return (0);
	}
	if (turboWeaponSelect == 9){
		return (0);
	}
	torsoPriority = 9;
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	isAiming = 1;
	leftArm = 0;
	//call-script FixArms(1, 0);
	turn torso to  y-axis heading speed <150.0000> ; //-- Turn(torso, y-axis, heading, math.rad(300))
	turn biggun to  x-axis <-85> speed <390.0000> ; //-- Turn(biggun, x-axis, math.rad(-85), math.rad(390))
	turn luparm to 	x-axis <5> - pitch speed <390.0000> ; //-- Turn(luparm,	x-axis, math.rad(-5) - pitch, math.rad(390))
	wait-for-turn torso around y-axis;
	//wait-for-turn biggun around x-axis;
	wpn5_lasthead = heading;
	start-script RestoreAfterDelay();
	return (1);
}

QueryWeapon4(piecenum) //back LRPC's
{
	if (gun_1){
		piecenum = railflarer;
	}
	else {
		piecenum = railflarel;
	}
}

AimFromWeapon4(piecenum)
{
	if (gun_1){
		piecenum = railflarer;
	}
	else {
		piecenum = railflarel;
	}
}

FireWeapon4()
{	
	if (gun_1){
		emit-sfx 1024 + 0 from railflarer;
		move barrel1r to z-axis [-3.000000] speed [500.000000];
		move barrel2r to z-axis [-3.000000] speed [500.000000];
		move barrel3r to z-axis [-3.000000] speed [500.000000];
		move barrel4r to z-axis [-3.000000] speed [500.000000];
		wait-for-move barrel1r along z-axis;
		move barrel1r to z-axis [0.000000] speed [3.000000];	
		move barrel2r to z-axis [0.000000] speed [3.000000];	
		move barrel3r to z-axis [0.000000] speed [3.000000];	
		move barrel4r to z-axis [0.000000] speed [3.000000];
		sleep 600;
		gun_1 = 2;	
	}
	else {
		emit-sfx 1024 + 0 from railflarel;
		move barrel1l to z-axis [-3.000000] speed [500.000000];
		move barrel2l to z-axis [-3.000000] speed [500.000000];
		move barrel3l to z-axis [-3.000000] speed [500.000000];
		move barrel4l to z-axis [-3.000000] speed [500.000000];
		wait-for-move barrel1l along z-axis;
		move barrel1l to z-axis [0.000000] speed [3.000000];	
		move barrel2l to z-axis [0.000000] speed [3.000000];	
		move barrel3l to z-axis [0.000000] speed [3.000000];	
		move barrel4l to z-axis [0.000000] speed [3.000000];
		sleep 600;
		gun_1 = 0;	
	}
	gun_1 = !gun_1;
}

AimWeapon4(heading, pitch)
{
	if (suspendWeapon == 0){
		return (0);
	}
	if (turboWeaponSelect == 11){
		return (0);
	}
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn railturretr to y-axis heading - torsoaim speed <100.000000>;
	turn railsleever to x-axis <0> - pitch speed <200.000000>;
	turn railturretl to y-axis heading - torsoaim speed <100.000000>;
	turn railsleevel to x-axis <0> - pitch speed <200.000000>;
	if (((get ABS(wpn4_lasthead - heading)) > 65536) OR(((get ABS(wpn4_lasthead - heading)) > 3000) AND ((get ABS(wpn4_lasthead - heading)) < 64236)))
	{
		wpn4_lasthead = 1000000;
		wait-for-turn railturretr around y-axis;
		wait-for-turn railsleever around x-axis;
		wait-for-turn railturretl around y-axis;
		wait-for-turn railsleevel around x-axis;
	}
	wpn4_lasthead = heading;
	return (1);
}

QueryWeapon5(piecenum) //back missile launcher
{
	piecenum = misflare;
	return (0);
}

AimFromWeapon5(piecenum)
{
	piecenum = turretmis;
	return (0);
}

FireWeapon5()
{
	emit-sfx 1024 + 2 from misflare;
	return (0);
}
AimWeapon5(heading, pitch)
{
	if (suspendWeapon == 0){
		return (0);
	}
	signal SIG_AIMMIS;
	set-signal-mask SIG_AIMMIS;
	turn turretmis to y-axis heading - torsoaim speed <100.000000>;
	turn misbox to x-axis <0> - pitch speed <80.000000>;
	if (((get ABS(wpn5_lasthead - heading)) > 65536) OR(((get ABS(wpn5_lasthead - heading)) > 3000) AND ((get ABS(wpn5_lasthead - heading)) < 64236)))
	{
		wpn5_lasthead = 1000000;
		wait-for-turn turretmis around y-axis;
		wait-for-turn misbox around x-axis;
	}
	wpn5_lasthead = heading;
	if (turboWeaponSelect == 8){ //don't shoot this weapon if turbo weapon is enabled
		turboMisAimReady = 1;
		return (0);
	}
	return (1);
}

QueryWeapon6(piecenum) //eater beam
{
	piecenum = eaterbeamflare;
	////torsopriority = 0;
	return (0);
}

AimFromWeapon6(piecenum)
{
	piecenum = eaterbeamflare;
	return (0);
}

FireWeapon6()
{
	//emit-sfx 1024 + 2 from misflare;
	//isAimingEaterBeam = 0;
	sleep 100;
	//torsopriority = 0;
	return (0);
}
AimWeapon6(heading, pitch)
{
	if (suspendWeapon == 0){
		return (0);
	}
	//if( get PIECE_Y(head) > 0 ){
	//	return (0);
	//}
	if (enableEaterBeam != 1){
		return (0);
	}
	if (torsoPriority > 10){
		return (0);
	}
	torsoPriority = 10;
	rightarm = 0;
	leftarm = 0;
	//call-script FixArms(0, 1);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	isAimingEaterBeam = 1;
	turn torso to  y-axis heading speed <150.0000> ; //-- Turn(torso, y-axis, heading, math.rad(300))
	stop-spin barrelr around y-axis;
	wait-for-turn torso around y-axis;
	isAiming = 1;
	if( isBuilding == 1 )
	{
		start-script ResumeBuilding();
	}
	start-script RestoreAfterDelay();
	return (1);
}

QueryWeapon7(piecenum) //SPECIAL dgun
{
	piecenum = nano;
	////torsopriority = 0;
	return (0);
}

AimFromWeapon7(piecenum)
{
	piecenum = nano;
	return (0);
}

FireWeapon7()
{
	//emit-sfx 1024 + 2 from misflare;
	eaterBeamIncrement = 0;
	enableEaterBeam = 0;
	sleep 100;
	return (0);
}
AimWeapon7(heading, pitch)
{
	if (suspendWeapon == 0){
		return (0);
	}
	//if( get PIECE_Y(head) > 0 ){
	//	return (0);
	//}
	if(specialWeaponSelect != 7){
		return (0);
	}
	if( eaterBeamIncrement < specialIncrementThreshold ){
		return (0);
	}
	var reloading;
	reloading = (get GAME_FRAME) < (get WEAPON_RELOADSTATE(7));
	if( reloading ){
		return (0);
	}
		if (torsoPriority > 15){
		return (0);
	}
	torsoPriority = 15;
	rightarm = 0;
	leftarm = 0;
	//call-script FixArms(0, 1);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn torso to  y-axis heading speed <150.0000> ; //-- Turn(torso, y-axis, heading, math.rad(300))
	//torsoaim = heading;
	//turn biggun to  x-axis <0> speed <100.0000> ; //-- Turn(biggun, x-axis, math.rad(-38), math.rad(95))
	//turn luparm to  x-axis <0> speed <100.0000> ; //-- Turn(luparm, x-axis, 0, math.rad(95))
	//turn rloarm to  x-axis <0> speed <100.0000> ; //-- Turn(rloarm, x-axis, math.rad(-38), math.rad(95))
	//turn ruparm to  x-axis <0> speed <100.0000> ; //-- Turn(ruparm, x-axis, 0, math.rad(95))
	stop-spin barrelr around y-axis;
	wait-for-turn torso around y-axis;
	//wait-for-turn rloarm around x-axis;
	//wait-for-turn ruparm around x-axis;
	isAiming = 1;
	if( isBuilding == 1 )
	{
		start-script ResumeBuilding();
	}
	start-script RestoreAfterDelay();
	return (1);
}

QueryWeapon8(piecenum) //TURBO back missile launcher
{
	piecenum = misflare;
	return (0);
}

AimFromWeapon8(piecenum)
{
	piecenum = turretmis;
	return (0);
}

FireWeapon8()
{
	emit-sfx 1024 + 2 from misflare;
	return (0);
}
AimWeapon8(heading, pitch)
{
	if (suspendWeapon == 0){
		return (0);
	}
	if (turboWeaponSelect != 8){
		return (0);
	}
	if (turboMisAimReady == 0){
		return (0);
	}
	return (1);
}

QueryWeapon9(piecenum) //TURBO left arm shotgun
{
	piecenum = lflare;
	return (0);
}

AimFromWeapon9(piecenum)
{
	piecenum = biggun;
	return (0);
}

FireWeapon9()
{
	//emit-sfx 1024 + 0 from lflare;
	move barrel to y-axis [-1.5] now;
	move barrel to y-axis [0] speed [5];
	sleep 50;
	//call-script bigfire();
	signal SIG_LARM;
	set-signal-mask SIG_LARM;
	//torsopriority = 0;
	//turn rloarm to  x-axis <-38> speed <30.0000> ; //-- Turn(rloarm, x-axis, math.rad(-38), math.rad(95))
	//turn ruparm to  x-axis <0> speed <30.0000> ; //-- Turn(ruparm, x-axis, 0, math.rad(95))
	return (0);
}

AimWeapon9(heading, pitch)
{
	if (suspendWeapon == 0){
		return (0);
	}
	if (turboWeaponSelect != 9){
		return (0);
	}
	var reloading;
	reloading = (get GAME_FRAME) < (get WEAPON_RELOADSTATE(9));
	if( reloading ){
		return (0);
	}
		if (torsoPriority > 11){
		return (0);
	}
	torsoPriority = 11;
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	isAiming = 1;
	leftArm = 0;
	//call-script FixArms(1, 0);
	turn torso to  y-axis heading speed <150.0000> ; //-- Turn(torso, y-axis, heading, math.rad(300))
	turn biggun to  x-axis <-85> speed <360.0000> ; //-- Turn(biggun, x-axis, math.rad(-85), math.rad(390))
	turn luparm to 	x-axis <5> - pitch speed <360.0000> ; //-- Turn(luparm,	x-axis, math.rad(-5) - pitch, math.rad(390))
	wait-for-turn torso around y-axis;
	//wait-for-turn biggun around x-axis;
	//wait-for-turn luparm around x-axis;
	//wait-for-turn biggun around x-axis;
	wpn5_lasthead = heading;
	start-script RestoreAfterDelay();
	return (1);
}

QueryWeapon10(piecenum) //TURBO gatling laser gun right arm
{
	if (lastTurboWeapon10Shot == 1) piecenum = flare1;
	if (lastTurboWeapon10Shot == 2) piecenum = flare2;
	if (lastTurboWeapon10Shot == 3) piecenum = flare3;
	if (lastTurboWeapon10Shot == 4) piecenum = flare4;
	if (lastTurboWeapon10Shot == 5) piecenum = flare5;
	if (lastTurboWeapon10Shot == 6) piecenum = flare6;
	////torsopriority = 0;
	return (0);
}

AimFromWeapon10(piecenum)
{
	piecenum = ruparm;
	return (0);
}

AimWeapon10(heading, pitch) //pew pew
{
	if (suspendWeapon == 0){
		return (0);
	}
	if (torsoPriority > 8){
		return (0);
	}
	if (turboWeaponSelect != 10){
		return (0);
	}
	torsoPriority = 8;
	rightarm = 0;
	//call-script FixArms(0, 1);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn torso to  y-axis heading + <10> speed <150.0000> ; //-- Turn(torso, y-axis, heading, math.rad(300))
	
	
	var gun_xz;
    gun_xz = get PIECE_XZ(rloarm);                                //get packed gun coordinates
    var gun_x;
    gun_x = (gun_xz & 0xffff0000) / 0x00010000;                //unpack x coordinates of gun (credit for unpack code goes to Beherith)
    var gun_z;
    gun_z = (gun_xz & 0x0000ffff);                            //unpack z coordinates of gun
    
    var turret_xz;
    turret_xz = get PIECE_XZ(flare);                        //get packed turret coordinates
    var turret_x;
    turret_x = (turret_xz & 0xffff0000) / 0x00010000;        //unpack x coordinates of turret
    var turret_z;
    turret_z = (turret_xz & 0x0000ffff);                    //unpack z coordinates of turret
    
    var aim_x;
    var aim_z;
    aim_x = gun_x - turret_x;                                //calculate relative coordinates of the gun to the turret (how far away it is in each direction)
    aim_z = gun_z - turret_z;
    
    
    var hull_xz;
    hull_xz = get PIECE_XZ(pelvis);                            //get packed hull coordinates
    var hull_x;
    hull_x = (hull_xz & 0xffff0000) / 0x00010000;            //unpack x coordinates of hull
    var hull_z;
    hull_z = (hull_xz & 0x0000ffff);                        //unpack z coordinates of hull
    
    var smoke_xz;
    smoke_xz = get PIECE_XZ(Ref_Point);                            //get packed smoke coordinates
    var smoke_x;
    smoke_x = (smoke_xz & 0xffff0000) / 0x00010000;            //unpack x coordinates of smoke
    var smoke_z;
    smoke_z = (smoke_xz & 0x0000ffff);                        //unpack z coordinates of smoke
    
    var face_x;
    var face_z;
    face_x = hull_x - smoke_x;                                //calculate relative coordinates of the hull to the smoke (how far away it is in each direction)
    face_z = hull_z - smoke_z;
	
	var cauaim;
    var cauface;
    cauaim = get ATAN(aim_z, aim_x);                        //use arctan (ATAN) to calculate the angle of the turret. The result is in cau, which is the unit this code format uses for angles. Its up to 32768 (180°), positive or negative depending on direction
    cauface = get ATAN(face_z, face_x);                        //use arctan (ATAN) to calculate the angle of the hull. The result is in cau, which is the unit this code format uses for angles. Its up to 32768 (180°), positive or negative depending on direction
    
    //var torsoaim;
    torsoaim = cauface - cauaim;                                //calculate angle of turret relative to the hull
	//torsoaim = heading;
	
	//turn rloarm to  x-axis <-55> speed <50.0000> ; //-- Turn(rloarm, x-axis, math.rad(-55), math.rad(390))
	turn ruparm to x-axis <-40> - pitch speed <75.0000> ; //-- Turn(ruparm,	x-axis, math.rad(-45) - pitch, math.rad(390))
	if (((get ABS(wpn1_lasthead - heading)) > 65536) OR(((get ABS(wpn1_lasthead - heading)) > 1300) AND ((get ABS(wpn1_lasthead - heading)) < 64236)))
	{
		wpn1_lasthead = 1000000;
		wait-for-turn torso around y-axis;
	}
	wpn1_lasthead = heading;
	//wait-for-turn rloarm around x-axis;
	//wait-for-turn ruparm around x-axis;
	isAiming = 1;
	if( isBuilding == 1 )
	{
		start-script ResumeBuilding();
	}
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon10()
{
	spin barrelr around y-axis speed <891.000000>;
	//torsopriority = 0;
	sleep 100;
	return (1);
}

Shot10(zero)
{
	//signal SIG_FIRE1;
	//set-signal-mask SIG_FIRE1;
	//emit-sfx 1024 + 3 from flare;
	if (lastTurboWeapon10Shot == 1 && disableTurbo10ShotChange == 0){
	lastTurboWeapon10Shot = 2;
	disableTurbo10ShotChange = 1;
	}
	if (lastTurboWeapon10Shot == 2 && disableTurbo10ShotChange == 0){
	lastTurboWeapon10Shot = 3;
	disableTurbo10ShotChange = 1;
	}
	if (lastTurboWeapon10Shot == 3 && disableTurbo10ShotChange == 0){
	lastTurboWeapon10Shot = 4;
	disableTurbo10ShotChange = 1;
	}
	if (lastTurboWeapon10Shot == 4 && disableTurbo10ShotChange == 0){
	lastTurboWeapon10Shot = 5;
	disableTurbo10ShotChange = 1;
	}
	if (lastTurboWeapon10Shot == 5 && disableTurbo10ShotChange == 0){
	lastTurboWeapon10Shot = 6;
	disableTurbo10ShotChange = 1;
	}
	if (lastTurboWeapon10Shot == 6 && disableTurbo10ShotChange == 0){
	lastTurboWeapon10Shot = 1;
	disableTurbo10ShotChange = 1;
	}
	disableTurbo10ShotChange = 0;
	return(1);
}

QueryWeapon11(piecenum) //TURBO back LRPC's
{
	if (gun_1 == 1 && disableTurbo11BarrelChange == 0){
		piecenum = railflarer;
	}
	if (gun_1 == 0 && disableTurbo11BarrelChange == 0){
		piecenum = railflarel;
	}
}

AimFromWeapon11(piecenum)
{
	if (gun_1){
		piecenum = railflarer;
	}
	else {
		piecenum = railflarel;
	}
}

FireWeapon11()
{	
	if (gun_1 == 1 && disableTurbo11BarrelChange == 0){
		emit-sfx 1024 + 0 from railflarer;
		move barrel1r to z-axis [-3.000000] speed [500.000000];
		move barrel2r to z-axis [-3.000000] speed [500.000000];
		move barrel3r to z-axis [-3.000000] speed [500.000000];
		move barrel4r to z-axis [-3.000000] speed [500.000000];
		wait-for-move barrel1r along z-axis;
		move barrel1r to z-axis [0.000000] speed [3.000000];	
		move barrel2r to z-axis [0.000000] speed [3.000000];	
		move barrel3r to z-axis [0.000000] speed [3.000000];	
		move barrel4r to z-axis [0.000000] speed [3.000000];
		gun_1 = 1;
		disableTurbo11BarrelChange = 1;
	}
	if (gun_1 == 0 && disableTurbo11BarrelChange == 0) {
		emit-sfx 1024 + 0 from railflarel;
		move barrel1l to z-axis [-3.000000] speed [500.000000];
		move barrel2l to z-axis [-3.000000] speed [500.000000];
		move barrel3l to z-axis [-3.000000] speed [500.000000];
		move barrel4l to z-axis [-3.000000] speed [500.000000];
		wait-for-move barrel1l along z-axis;
		move barrel1l to z-axis [0.000000] speed [3.000000];	
		move barrel2l to z-axis [0.000000] speed [3.000000];	
		move barrel3l to z-axis [0.000000] speed [3.000000];	
		move barrel4l to z-axis [0.000000] speed [3.000000];
		gun_1 = 0;
		disableTurbo11BarrelChange = 1;
	}
	disableTurbo11BarrelChange = 0;
	gun_1 = !gun_1;
}

EndBurst11()
{
	
}

AimWeapon11(heading, pitch)
{
	if (suspendWeapon == 0){
		return (0);
	}
	if (turboWeaponSelect != 11){
		return (0);
	}
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn railturretr to y-axis heading - torsoaim speed <100.000000>;
	turn railsleever to x-axis <0> - pitch speed <200.000000>;
	turn railturretl to y-axis heading - torsoaim speed <100.000000>;
	turn railsleevel to x-axis <0> - pitch speed <200.000000>;
	if (((get ABS(wpn4_lasthead - heading)) > 65536) OR(((get ABS(wpn4_lasthead - heading)) > 3000) AND ((get ABS(wpn4_lasthead - heading)) < 64236)))
	{
		wpn4_lasthead = 1000000;
		wait-for-turn railturretr around y-axis;
		wait-for-turn railsleever around x-axis;
		wait-for-turn railturretl around y-axis;
		wait-for-turn railsleevel around x-axis;
	}
	wpn4_lasthead = heading;
	return (1);
}

QueryWeapon12(piecenum) //SPECIAL bot cannon
{
	piecenum = nano;
	////torsopriority = 0;
	return (0);
}

AimFromWeapon12(piecenum)
{
	piecenum = nano;
	return (0);
}

FireWeapon12()
{
	//emit-sfx 1024 + 2 from misflare;
	eaterBeamIncrement = 0;
	enableEaterBeam = 0;
	sleep 100;
	return (0);
}
AimWeapon12(heading, pitch)
{
	if (suspendWeapon == 0){
		return (0);
	}
	//if( get PIECE_Y(head) > 0 ){
	//	return (0);
	//}
	if(specialWeaponSelect != 12){
		return (0);
	}
	if( eaterBeamIncrement < specialIncrementThreshold ){
		return (0);
	}
	var reloading;
	reloading = (get GAME_FRAME) < (get WEAPON_RELOADSTATE(12));
	if( reloading ){
		return (0);
	}
		if (torsoPriority > 16){
		return (0);
	}
	torsoPriority = 16;
	rightarm = 0;
	leftarm = 0;
	//call-script FixArms(0, 1);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn torso to  y-axis heading speed <150.0000> ; //-- Turn(torso, y-axis, heading, math.rad(300))
	//torsoaim = heading;
	//turn biggun to  x-axis <0> speed <100.0000> ; //-- Turn(biggun, x-axis, math.rad(-38), math.rad(95))
	//turn luparm to  x-axis <0> speed <100.0000> ; //-- Turn(luparm, x-axis, 0, math.rad(95))
	//turn rloarm to  x-axis <0> speed <100.0000> ; //-- Turn(rloarm, x-axis, math.rad(-38), math.rad(95))
	//turn ruparm to  x-axis <0> speed <100.0000> ; //-- Turn(ruparm, x-axis, 0, math.rad(95))
	stop-spin barrelr around y-axis;
	wait-for-turn torso around y-axis;
	//wait-for-turn rloarm around x-axis;
	//wait-for-turn ruparm around x-axis;
	isAiming = 1;
	if( isBuilding == 1 )
	{
		start-script ResumeBuilding();
	}
	start-script RestoreAfterDelay();
	return (1);
}

AimWeapon13(heading, pitch) //VTOL sensor weapon
{
	VTOLsensed = 1;
	return (1);
}

FireWeapon13()
{
	incrimentSensedVTOL = incrimentSensedVTOL+1;
	sleep 100;
	return (1);
}

QueryWeapon13(piecenum)
{
	piecenum = sensorflare1;
}

AimFromWeapon13(piecenum)
{
	piecenum = sensorflare1;
}


AimWeapon14(heading, pitch) //GROUNDSCOUT sensor weapon
{
	groundScoutSensed = 1;
	return (1);
}

FireWeapon14()
{
	incrimentSensedGroundScout = incrimentSensedGroundScout+1;
	sleep 100;
	return (1);
}

QueryWeapon14(piecenum)
{
	piecenum = sensorflare2;
}

AimFromWeapon14(piecenum)
{
	piecenum = sensorflare2;
}



AimWeapon15(heading, pitch) //GROUND_NEAR sensor weapon
{
	if (groundScoutSensed == 1){
		return (0);
	}
	groundNearSensed = 1;
	return (1);
}

FireWeapon15()
{
	incrimentSensedGroundNear = incrimentSensedGroundNear+1;
	sleep 100;
	return (1);
}

QueryWeapon15(piecenum)
{
	piecenum = sensorflare3;
}

AimFromWeapon15(piecenum)
{
	piecenum = sensorflare3;
}


AimWeapon16(heading, pitch) //GROUND_FAR sensor weapon
{
	if(groundNearSensed == 1){
		return (0);
	}
	if(VTOLsensed == 1){
		return (0);
	}
	if(groundScoutSensed == 1){
		return (0);
	}
	return (1);
}

FireWeapon16()
{
	incrimentSensedFar = incrimentSensedFar+1;
	sleep 100;
	return (1);
}

QueryWeapon16(piecenum)
{
	piecenum = sensorflare3;
}

AimFromWeapon16(piecenum)
{
	piecenum = sensorflare3;
}

AimWeapon17(heading, pitch) //TURBO gap delay setting
{
	return (1);
}

FireWeapon17()
{
	if (turboWeaponChangeIncriment <= turboOffTime){ //this is influenced by reloadtime only. This sets the duration of the delay between turbo weapon selections
		turboWeaponChangeIncriment = turboWeaponChangeIncriment+1;
	}
	sleep 100;
	return (1);
}

QueryWeapon17(piecenum)
{
	piecenum = sensorflare3;
}

AimFromWeapon17(piecenum)
{
	piecenum = sensorflare3;
}

Shot17(zero)
{
	if (turboWeaponChangeIncriment > turboOffTime){ //this incriments 1 per shot in the projectiles = x weapondef. The higher the projectile count, the shorter the duration of the turboWeaponSelect
		turboWeaponChangeIncriment = turboWeaponChangeIncriment+1;
	}
}
	
SprayNano(heading, pitch){
	set-signal-mask SIG_AIM;
	sleep 1000;
	while (1){
	
		turn torso to y-axis <10> + buildHeading speed <10>;
		sleep 2000;
		turn torso to y-axis <-10> + buildHeading speed <10>;		
		sleep 2000;
	}

}

StartBuilding(heading, pitch)
{
	signal SIG_AIM;
	isBuilding		= 1;
	turn torso to  y-axis heading speed <150.0000> ; //-- Turn(torso, y-axis, heading, math.rad(300))
	
	set INBUILDSTANCE to 1;
	buildHeading = heading;
	buildPitch = pitch;
	start-script SprayNano(heading,pitch);
	return (0);
}




TargetCleared(Func_Var_1)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	call-script RestoreAfterDelay();
	return (0);
}


StopBuilding()
{
	rightArm = 1;
	isBuilding = 0;
	set INBUILDSTANCE to 0;
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	call-script RestoreAfterDelay();
	return (0);
}

//-----------------------------------------------------------------------
//-- death stuffs
//-----------------------------------------------------------------------

Killed( severity, corpsetype )
{
	corpsetype = 1;
	return(corpsetype);
}
