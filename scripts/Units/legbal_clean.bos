
#include "../recoil_common_includes.h"

piece  	pelvis, aimy1, torso, armor, aimx1, barrel, flare, backblast,
		lthigh, lknee, lleg, lfoot, rthigh, rknee, rleg, rfoot;

static-var  notMoving, moveSpeed, currentSpeed, animSpeed, wpn1_lasthead;
static-var  maxSpeed, animFramesPerKeyframe, isMoving;

// Signal definitions
#define SIGNAL_MOVE 1
#define SIGNAL_AIM1 256

// this animation uses the static-var animFramesPerKeyframe which contains how many frames each keyframe takes
Walk() {
	set-signal-mask SIGNAL_MOVE;
	while(isMoving) {
		if (isMoving) { //Frame:3
			turn barrel to x-axis <-6.752788> speed <103.695200> / animSpeed; 
			turn lfoot to x-axis <27.262591> speed <269.292929> / animSpeed; 
			turn lknee to x-axis <-27.063750> speed <1386.424583> / animSpeed; 
			turn lleg to x-axis <13.602221> speed <1607.505870> / animSpeed; 
			turn lthigh to x-axis <-13.813957> speed <42.147714> / animSpeed; 
			move pelvis to z-axis [0.960679] speed [13.127017] / animSpeed; 
			move pelvis to y-axis [0.150892] speed [46.823655] / animSpeed; 
			turn rfoot to x-axis <11.270560> speed <831.256220> / animSpeed; 
			turn rknee to x-axis <44.006858> speed <1344.987726> / animSpeed; 
			turn rleg to x-axis <-15.229807> speed <1221.440936> / animSpeed; 
			turn rthigh to x-axis <16.959587> speed <650.773713> / animSpeed; 
			turn torso to y-axis <5.672881> speed <46.882009> / animSpeed; 
		sleep ((33*animSpeed) -1);
		}
		if (isMoving) { //Frame:6
			turn barrel to x-axis <-0.833946> speed <177.565252> / animSpeed; 
			turn lfoot to x-axis <9.013191> speed <547.481992> / animSpeed; 
			turn lknee to x-axis <-7.806333> speed <577.722509> / animSpeed; 
			turn lleg to x-axis <3.148210> speed <313.620328> / animSpeed; 
			turn lthigh to x-axis <-3.536730> speed <308.316792> / animSpeed; 
			move pelvis to z-axis [0.161194] speed [23.984558] / animSpeed; 
			move pelvis to y-axis [0.463159] speed [9.368008] / animSpeed; 
			turn rfoot to x-axis <49.740153> speed <1154.087775> / animSpeed; 
			turn rleg to x-axis <-41.547587> speed <789.533378> / animSpeed; 
			turn rthigh to x-axis <-7.687493> speed <739.412399> / animSpeed; 
			turn torso to y-axis <5.057541> speed <18.460221> / animSpeed; 
		sleep ((33*animSpeed) -1);
		}
		if (isMoving) { //Frame:9
			turn barrel to x-axis <6.242725> speed <212.300145> / animSpeed; 
			turn lfoot to x-axis <-21.875971> speed <926.674851> / animSpeed; 
			turn lknee to x-axis <-10.593847> speed <83.625413> / animSpeed; 
			turn lleg to x-axis <18.841051> speed <470.785234> / animSpeed; 
			turn lthigh to x-axis <13.825274> speed <520.860147> / animSpeed; 
			move pelvis to y-axis [2.214942] speed [52.553465] / animSpeed; 
			turn rfoot to x-axis <83.855913> speed <1023.472804> / animSpeed; 
			turn rknee to x-axis <-0.303515> speed <1331.775461> / animSpeed; 
			turn rleg to x-axis <-21.043461> speed <615.123763> / animSpeed; 
			turn rthigh to x-axis <-26.461483> speed <563.219696> / animSpeed; 
			turn torso to y-axis <2.500382> speed <76.714751> / animSpeed; 
		sleep ((33*animSpeed) -1);
		}
		if (isMoving) { //Frame:12
			turn barrel to x-axis <4.652213> speed <47.715360> / animSpeed; 
			turn lfoot to x-axis <-33.092113> speed <336.484266> / animSpeed; 
			turn lknee to x-axis <-17.030107> speed <193.087792> / animSpeed; 
			turn lleg to x-axis <33.728734> speed <446.630492> / animSpeed; 
			turn lthigh to x-axis <34.599686> speed <623.232342> / animSpeed; 
			move pelvis to z-axis [0.877801] speed [23.040959] / animSpeed; 
			move pelvis to y-axis [2.974123] speed [22.775445] / animSpeed; 
			turn rfoot to x-axis <66.756070> speed <512.995291> / animSpeed; 
			turn rknee to x-axis <-38.448856> speed <1144.360246> / animSpeed; 
			turn rleg to x-axis <20.771741> speed <1254.456056> / animSpeed; 
			turn rthigh to x-axis <-26.618992> speed <4.725279> / animSpeed; 
			turn torso to y-axis <-1.016784> speed <105.515006> / animSpeed; 
		sleep ((33*animSpeed) -1);
		}
		if (isMoving) { //Frame:15
			turn barrel to x-axis <-3.397265> speed <241.484348> / animSpeed; 
			turn lfoot to x-axis <-16.189580> speed <507.075976> / animSpeed; 
			turn lknee to x-axis <-0.675451> speed <490.639664> / animSpeed; 
			turn lleg to x-axis <25.396621> speed <249.963409> / animSpeed; 
			turn lthigh to x-axis <38.648062> speed <121.451282> / animSpeed; 
			move pelvis to z-axis [1.398980] speed [15.635387] / animSpeed; 
			move pelvis to y-axis [1.686683] speed [38.623202] / animSpeed; 
			turn rfoot to x-axis <18.453110> speed <1449.088785> / animSpeed; 
			turn rknee to x-axis <-73.006465> speed <1036.728254> / animSpeed; 
			turn rleg to x-axis <66.867982> speed <1382.887245> / animSpeed; 
			turn rthigh to x-axis <-12.529664> speed <422.679836> / animSpeed; 
			turn torso to y-axis <-4.143561> speed <93.803302> / animSpeed; 
		sleep ((33*animSpeed) -1);
		}
		if (isMoving) { //Frame:18
			turn barrel to x-axis <-6.730090> speed <99.984736> / animSpeed; 
			turn lfoot to x-axis <11.385446> speed <827.250775> / animSpeed; 
			turn lknee to x-axis <44.109509> speed <1343.548795> / animSpeed; 
			turn lleg to x-axis <-15.309657> speed <1221.188339> / animSpeed; 
			turn lthigh to x-axis <16.932384> speed <651.470342> / animSpeed; 
			move pelvis to z-axis [0.949719] speed [13.477836] / animSpeed; 
			move pelvis to y-axis [0.140059] speed [46.398733] / animSpeed; 
			turn rfoot to x-axis <27.328439> speed <266.259864> / animSpeed; 
			turn rknee to x-axis <-27.052568> speed <1378.616908> / animSpeed; 
			turn rleg to x-axis <13.567658> speed <1599.009738> / animSpeed; 
			turn rthigh to x-axis <-13.856424> speed <39.802774> / animSpeed; 
			turn torso to y-axis <-5.679441> speed <46.076384> / animSpeed; 
		sleep ((33*animSpeed) -1);
		}
		if (isMoving) { //Frame:21
			turn barrel to x-axis <-0.719080> speed <180.330281> / animSpeed; 
			turn lfoot to x-axis <49.739466> speed <1150.620617> / animSpeed; 
			turn lknee to x-axis <43.897824> speed <6.350539> / animSpeed; 
			turn lleg to x-axis <-41.447896> speed <784.147176> / animSpeed; 
			turn lthigh to x-axis <-7.723534> speed <739.677547> / animSpeed; 
			move pelvis to z-axis [0.153757] speed [23.878872] / animSpeed; 
			move pelvis to y-axis [0.481532] speed [10.244193] / animSpeed; 
			turn rfoot to x-axis <9.001361> speed <549.812333> / animSpeed; 
			turn rknee to x-axis <-7.947343> speed <573.156724> / animSpeed; 
			turn rleg to x-axis <3.280028> speed <308.628877> / animSpeed; 
			turn rthigh to x-axis <-3.515701> speed <310.221666> / animSpeed; 
			turn torso to y-axis <-5.034726> speed <19.341444> / animSpeed; 
		sleep ((33*animSpeed) -1);
		}
		if (isMoving) { //Frame:24
			turn barrel to x-axis <6.290283> speed <210.280895> / animSpeed; 
			turn lfoot to x-axis <83.423992> speed <1010.535777> / animSpeed; 
			turn lknee to x-axis <-0.352558> speed <1327.511451> / animSpeed; 
			turn lleg to x-axis <-20.948667> speed <614.976897> / animSpeed; 
			turn lthigh to x-axis <-26.393007> speed <560.084178> / animSpeed; 
			move pelvis to y-axis [2.237012] speed [52.664423] / animSpeed; 
			turn rfoot to x-axis <-21.922749> speed <927.723302> / animSpeed; 
			turn rknee to x-axis <-10.763298> speed <84.478640> / animSpeed; 
			turn rleg to x-axis <19.002418> speed <471.671682> / animSpeed; 
			turn rthigh to x-axis <13.880146> speed <521.875410> / animSpeed; 
			turn torso to y-axis <-2.456952> speed <77.333220> / animSpeed; 
		sleep ((33*animSpeed) -1);
		}
		if (isMoving) { //Frame:27
			turn barrel to x-axis <4.566438> speed <51.715337> / animSpeed; 
			turn lfoot to x-axis <66.399875> speed <510.723502> / animSpeed; 
			turn lknee to x-axis <-38.363660> speed <1140.333056> / animSpeed; 
			turn lleg to x-axis <20.663376> speed <1248.361290> / animSpeed; 
			turn lthigh to x-axis <-26.624817> speed <6.954294> / animSpeed; 
			move pelvis to z-axis [0.889159] speed [23.189372] / animSpeed; 
			move pelvis to y-axis [2.969250] speed [21.967142] / animSpeed; 
			turn rfoot to x-axis <-33.139774> speed <336.510750> / animSpeed; 
			turn rknee to x-axis <-17.036887> speed <188.207681> / animSpeed; 
			turn rleg to x-axis <33.747896> speed <442.364356> / animSpeed; 
			turn rthigh to x-axis <34.634964> speed <622.644544> / animSpeed; 
			turn torso to y-axis <1.064150> speed <105.633066> / animSpeed; 
		sleep ((33*animSpeed) -1);
		}
		if (isMoving) { //Frame:30
			turn barrel to x-axis <-3.497289> speed <241.911826> / animSpeed; 
			turn lfoot to x-axis <18.314268> speed <1442.568225> / animSpeed; 
			turn lknee to x-axis <-72.738810> speed <1031.254507> / animSpeed; 
			turn lleg to x-axis <66.554197> speed <1376.724604> / animSpeed; 
			turn lthigh to x-axis <-12.649481> speed <419.260063> / animSpeed; 
			move pelvis to z-axis [1.399516] speed [15.310730] / animSpeed; 
			move pelvis to y-axis [1.661633] speed [39.228526] / animSpeed; 
			turn rfoot to x-axis <-16.247610> speed <506.764929> / animSpeed; 
			turn rknee to x-axis <-0.523777> speed <495.393317> / animSpeed; 
			turn rleg to x-axis <25.307562> speed <253.210036> / animSpeed; 
			turn rthigh to x-axis <38.643479> speed <120.255452> / animSpeed; 
			turn torso to y-axis <4.176682> speed <93.375961> / animSpeed; 
		sleep ((33*animSpeed) -1);
		}
	}
}
// Call this from StopMoving()!
StopWalking() {
	animSpeed = 10; // tune restore speed here, higher values are slower restore speeds
	move pelvis to y-axis [0] speed [175.548077] / animSpeed;
	move pelvis to z-axis [0] speed [79.948527] / animSpeed;
	turn barrel to x-axis <0> speed <806.372752> / animSpeed;
	turn lfoot to x-axis <0> speed <4808.560751> / animSpeed;
	turn lknee to x-axis <0> speed <4621.415275> / animSpeed;
	turn lleg to x-axis <0> speed <5358.352901> / animSpeed;
	turn lthigh to x-axis <0> speed <2465.591825> / animSpeed;
	turn rfoot to x-axis <0> speed <4830.295950> / animSpeed;
	turn rknee to x-axis <0> speed <4595.389693> / animSpeed;
	turn rleg to x-axis <0> speed <5330.032461> / animSpeed;
	turn rthigh to x-axis <0> speed <2464.707998> / animSpeed;
	turn torso to y-axis <0> speed <352.110222> / animSpeed;
}
// REMEMBER TO animspeed = 3 in Create() !!
UnitSpeed(){
	maxSpeed = get MAX_SPEED; // this returns cob units per frame i think
	animFramesPerKeyframe = 3; //we need to calc the frames per keyframe value, from the known animtime
	maxSpeed = maxSpeed + (maxSpeed /(2*animFramesPerKeyframe)); // add fudge
	while(TRUE){
		animSpeed = (get CURRENT_SPEED);
		if (animSpeed<1) animSpeed=1;
		animSpeed = (maxSpeed * 4) / animSpeed; 
		//get PRINT(maxSpeed, animFramesPerKeyframe, animSpeed); //how to print debug info from bos
		if (animSpeed<1) animSpeed=1;
		if (animspeed>6) animSpeed = 6;
		sleep 98;
	}
}

#define BASEPIECE pelvis
#define HITSPEED <65.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 1
#define MAXTILT 100

#include "../unit_hitbyweaponid_and_smoke.h"

StartMoving(reversing)
{
	turn lthigh to y-axis <0> speed <60>;
	turn rthigh to y-axis <0> speed <60>;
	
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	isMoving = 1;
	start-script UnitSpeed();
	start-script walk();
	
}

StopMoving()
{
	turn lthigh to y-axis <15> speed <60>;
	turn rthigh to y-axis <-15> speed <60>;
	
	signal SIGNAL_MOVE;
	isMoving = 0;
	start-script StopWalking();
}

Create()
{
	hide flare;
	hide aimx1;
	hide aimy1;
	notMoving = TRUE;
	currentSpeed = 100;
	moveSpeed = get MAX_SPEED;
	animSpeed = 6;
	start-script StopMoving();
}



AimFromWeapon1(pieceIndex)
{
	pieceIndex = aimx1;
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flare;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn aimy1 to y-axis <0.0> speed <90.021978>;
	turn aimx1 to x-axis <0.0> speed <45.010989>;
	wpn1_lasthead = 0xbadface;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	set-signal-mask SIGNAL_AIM1;
	sleep 5000;
	start-script ExecuteRestoreAfterDelay();
}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	turn aimy1 to y-axis heading speed <90.021978>;
	turn aimx1 to x-axis <0.0> - pitch speed <45.010989>;
	if ((wpn1_lasthead == 0xbadface) OR ABSOLUTE_GREATER_THAN(WRAPDELTA(heading - wpn1_lasthead), <7>))
	{
		wpn1_lasthead = 0xbadface;
		wait-for-turn aimy1 around y-axis;
		wait-for-turn aimx1 around x-axis;
	}
	wpn1_lasthead = heading;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
	emit-sfx UNIT_SFX0 from backblast;
	turn torso to y-axis <8> now;
	turn barrel to x-axis <-5> now;
	turn barrel to x-axis <0> speed <5>;
	turn torso to y-axis <0> speed <16>;
	sleep 32;
	// WHY DO WE NEED TO SLEEP A FRAME HERE? well simple!
	// the order of the calls is 
	//1. AimFromWeapon
	//2. FireWeapon1
	//3. QueryWeapon
	// If we swap guns on fireprimary, then we would shoot from other barrel that we aimed from, so we delay swapping barrels by one frame
}

//use call-script DeathAnim(); from Killed()
DeathAnim() 
{
	signal SIGNAL_MOVE;
	signal SIGNAL_AIM1;
	call-script StopWalking();
	turn aimy1 to y-axis <0> speed <180>;
	turn aimx1 to x-axis <0> speed <180>;
	
}


Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		call-script DeathAnim();
		corpsetype = 1 ;
		explode pelvis type BITMAPONLY | NOHEATCLOUD;
		explode aimy1 type BITMAPONLY | NOHEATCLOUD;
		explode rfoot type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode pelvis type FALL | NOHEATCLOUD;
		explode aimy1 type FALL | NOHEATCLOUD;
		explode torso type FALL | NOHEATCLOUD;
		explode armor type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lfoot type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode pelvis type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode aimy1 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode torso type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lleg type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lfoot type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode pelvis type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode aimy1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode torso type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode lthigh type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lknee type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lleg type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
