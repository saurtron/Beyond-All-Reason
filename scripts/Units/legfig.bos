#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

//piece  flarer, flarel, base, thrust, wingl, wingr, wingl2, wingr2, gunl, gunr;
piece chassis, engine, thrust, gun, wingA, wingAconn, wingB, wingBconn, wingC, wingCconn, wingD, wingDconn, flare;

static-var  Static_Var_1, gun_1, statechg_DesiredState, statechg_StateChanging;


activatescr()
{
	turn wingA to z-axis <0> speed <60>;
	turn wingAconn to z-axis <0> speed <60>;
	turn wingB to z-axis <0> speed <60>;
	turn wingbconn to z-axis <0> speed <60>;
	turn wingC to z-axis <0> speed <60>;
	turn wingCconn to z-axis <0> speed <60>;
	turn wingD to z-axis <0> speed <60>;
	turn wingDconn to z-axis <0> speed <60>;
	show thrust;
	sleep 66;
	return (0);
}

deactivatescr()
{
	hide thrust;
	turn wingAconn to z-axis <-80> speed <120>;
	turn wingbconn to z-axis <80> speed <120>;
	turn wingCconn to z-axis <80> speed <120>;
	turn wingDconn to z-axis <-80> speed <120>;
	wait-for-turn wingDconn around z-axis;
	turn wingA to z-axis <60> speed <60>;
	turn wingB to z-axis <-60> speed <60>;
	turn wingC to z-axis <-60> speed <60>;
	turn wingD to z-axis <60> speed <60>;
	sleep 66;
	return (0);
}

#define BASEPIECE chassis
#define HITSPEED <105.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 1
#define MAXTILT 100

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

static-var maxSpeed, currentSpeed;
BarrelRoll() // remember to start-script BarrelRoll(); in Create()!
{
	currentSpeed = (get CURRENT_SPEED);
	maxSpeed = (get MAX_SPEED);
	
	while (TRUE){
		sleep 2000;
		currentSpeed = (get CURRENT_SPEED);
		//get PRINT(maxSpeed, currentSpeed, Static_Var_1);
		if( Rand( 1, 5 ) == 1 AND (maxSpeed < (currentSpeed+100) ) )
		{
			turn chassis to z-axis <240.054945> speed <120.027473>;
			wait-for-turn chassis around z-axis;
			turn chassis to z-axis <120.027473> speed <180.043956>;
			wait-for-turn chassis around z-axis;
			turn chassis to z-axis <0.000000> speed <120.027473>;
		}
	}
}

Create()
{
	//hide flarel;
	//hide flarer;
	hide flare;
	hide thrust;
	turn wingA to z-axis <60> now;
	turn wingAconn to z-axis <-80> now;
	turn wingB to z-axis <-60> now;
	turn wingbconn to z-axis <80> now;
	turn wingC to z-axis <-60> now;
	turn wingCconn to z-axis <80> now;
	turn wingD to z-axis <60> now;
	turn wingDconn to z-axis <-80> now;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 100;
	}
	Static_Var_1 = 0;
	gun_1 = 0;
	call-script InitState();
	start-script BarrelRoll();
	call-script activatescr();
	return (0);
}

Activate()
{
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	start-script RequestState(1);
	return (0);
}

AimPrimary(heading, pitch)
{
	return (1);
}

FirePrimary()
{
	emit-sfx 1024 + 0 from flare;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
	return(0);
}

SweetSpot(piecenum)
{
	piecenum = chassis;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode chassis type BITMAPONLY | NOHEATCLOUD;
		explode engine type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode wingA type BITMAPONLY | NOHEATCLOUD;
		explode wingB type BITMAPONLY | NOHEATCLOUD;
		explode wingC type BITMAPONLY | NOHEATCLOUD;
		explode wingD type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode chassis type BITMAPONLY | NOHEATCLOUD;
		explode engine type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode wingA type BITMAPONLY | NOHEATCLOUD;
		explode wingB type BITMAPONLY | NOHEATCLOUD;
		explode wingC type BITMAPONLY | NOHEATCLOUD;
		explode wingD type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode chassis type BITMAPONLY | NOHEATCLOUD;
		explode engine type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode wingA type BITMAPONLY | NOHEATCLOUD;
		explode wingB type BITMAPONLY | NOHEATCLOUD;
		explode wingC type BITMAPONLY | NOHEATCLOUD;
		explode wingD type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode chassis type BITMAPONLY | NOHEATCLOUD;
		explode engine type BITMAPONLY | NOHEATCLOUD;
		explode wingA type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode wingB type BITMAPONLY | NOHEATCLOUD;
		explode wingC type BITMAPONLY | NOHEATCLOUD;
		explode wingD type BITMAPONLY | NOHEATCLOUD;
	return corpsetype;
}
