#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

//piece  base, link, thrust1, thrust2, thrust3, thrust4;

piece chassis, link,
rightwingPivot, rightWing, rWingMainRotorGuard, rWingMainRotor, rWingMiniRotorGuard, rWingMiniRotor,
leftwingPivot, leftWing, lWingMainRotorGuard, lWingMainRotor, lWingMiniRotorGuard, lWingMiniRotor,
rightGroundThrust, rightMainThrust, rightMiniThrust,
leftGroundThrust, leftMainThrust, leftMiniThrust,
groundBooster;

static-var  Static_Var_1, unitviewer, statechg_DesiredState, statechg_StateChanging;


pickupscr()
{

	sleep 11;
	return (0);
}

dropoffscr()
{

	sleep 15;
	return (0);
}

#define BASEPIECE chassis
#define HITSPEED <105.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 1
#define MAXTILT 100


InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script pickupscr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script dropoffscr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

#define IDLEHOVERSCALE 32
#define IDLEHOVERSPEED 60
#define IDLEBASEPIECE chassis
#include "idlehover.h"

Create()
{

	hide rightGroundThrust;
	hide rightMainThrust;
	hide rightMiniThrust; 
	hide leftGroundThrust; 
	hide leftMainThrust;
	hide leftMiniThrust;

	turn rightwingPivot to x-axis <7> now;
	turn leftwingPivot to x-axis <7> now;

	turn rightWing to z-axis <90> now;
	turn leftWing to z-axis <-90> now;
	
	turn groundBooster to x-axis <-90> now;

	unitviewer = FALSE;
	Static_Var_1 = 0;
	call-script InitState();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script IdleHover();
	return (0);
}


SweetSpot(piecenum)
{
	piecenum = chassis;
	return (0);
}

QueryTransport(Func_Var_1, Func_Var_2)
{
	Func_Var_1 = 1;
	return (0);
}

BeginTransport(Func_Var_1)
{
	move link to y-axis [0.000000] - Func_Var_1 now;
	//move link to y-axis [0.000000] now;
	start-script RequestState(0);
	return (0);
}

EndTransport()
{
	start-script RequestState(1);
	return (0);
}

Activate()
{
	show rightGroundThrust;
	show rightMainThrust;
	show rightMiniThrust; 
	show leftGroundThrust; 
	show leftMainThrust;
	show leftMiniThrust;

	turn rightWing to z-axis <0> speed <50>;
	turn leftWing to z-axis <0> speed <50>;
	
	spin rWingMainRotor around y-axis speed <360> accelerate <5>;
	spin lWingMainRotor around y-axis speed <-360> accelerate <5>;
	spin rWingMiniRotor around y-axis speed <720> accelerate <10>;
	spin lWingMiniRotor around y-axis speed <-720> accelerate <10>;

	return (0);
}

Deactivate()
{
	hide rightGroundThrust;
	hide rightMainThrust;
	hide rightMiniThrust; 
	hide leftGroundThrust; 
	hide leftMainThrust;
	hide leftMiniThrust;

	turn rightWing to z-axis <90> speed <50>;
	turn leftWing to z-axis <-90> speed <50>;

	stop-spin rWingMainRotor around y-axis decelerate <5>;
	stop-spin lWingMainRotor around y-axis decelerate <5>;
	stop-spin rWingMiniRotor around y-axis decelerate <10>;
	stop-spin lWingMiniRotor around y-axis decelerate <10>;

	return (0);
}


StopMoving()
{
	signal 8;
	Static_Var_1 = 0;
	return (0);
}

MoveRate3()
{
	turn rWingMainRotorGuard to x-axis <90.000000> speed <85.000000>;
	turn lWingMainRotorGuard to x-axis <90.000000> speed <85.000000>;

}

MoveRate2()
{
	turn rWingMainRotorGuard to x-axis <70.000000> speed <55.000000>;
	turn lWingMainRotorGuard to x-axis <70.000000> speed <55.000000>;
}

MoveRate1()
{
	turn rWingMainRotorGuard to x-axis <50.000000> speed <75.000000>;
	turn lWingMainRotorGuard to x-axis <50.000000> speed <75.000000>;

}

MoveRate0()
{
	turn rWingMainRotorGuard to x-axis <0.000000> speed <150.000000>;
	turn lWingMainRotorGuard to x-axis <0.000000> speed <150.000000>;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode chassis type BITMAPONLY | NOHEATCLOUD;
		explode link type BITMAPONLY | NOHEATCLOUD;
		explode rightGroundThrust type BITMAPONLY | NOHEATCLOUD;
		explode rightMainThrust type BITMAPONLY | NOHEATCLOUD;
		explode rightMiniThrust type BITMAPONLY | NOHEATCLOUD;
		explode leftGroundThrust type BITMAPONLY | NOHEATCLOUD;
		explode leftMainThrust type BITMAPONLY | NOHEATCLOUD;
		explode leftMiniThrust type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode chassis type BITMAPONLY | NOHEATCLOUD;
		explode link type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rightGroundThrust type BITMAPONLY | NOHEATCLOUD;
		explode rightMainThrust type BITMAPONLY | NOHEATCLOUD;
		explode rightMiniThrust type BITMAPONLY | NOHEATCLOUD;
		explode leftGroundThrust type BITMAPONLY | NOHEATCLOUD;
		explode leftMainThrust type BITMAPONLY | NOHEATCLOUD;
		explode leftMiniThrust type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode chassis type BITMAPONLY | NOHEATCLOUD;
		explode link type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode rightGroundThrust type BITMAPONLY | NOHEATCLOUD;
		explode rightMainThrust type BITMAPONLY | NOHEATCLOUD;
		explode rightMiniThrust type BITMAPONLY | NOHEATCLOUD;
		explode leftGroundThrust type BITMAPONLY | NOHEATCLOUD;
		explode leftMainThrust type BITMAPONLY | NOHEATCLOUD;
		explode leftMiniThrust type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
    explode chassis type BITMAPONLY | NOHEATCLOUD;
    explode link type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
	explode rightGroundThrust type BITMAPONLY | NOHEATCLOUD;
	explode rightMainThrust type BITMAPONLY | NOHEATCLOUD;
	explode rightMiniThrust type BITMAPONLY | NOHEATCLOUD;
	explode leftGroundThrust type BITMAPONLY | NOHEATCLOUD;
	explode leftMainThrust type BITMAPONLY | NOHEATCLOUD;
	explode leftMiniThrust type BITMAPONLY | NOHEATCLOUD;
	return corpsetype;
}
