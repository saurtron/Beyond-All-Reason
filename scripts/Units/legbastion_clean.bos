
#include "../recoil_common_includes.h"

piece  base, base2, base3, sauron, sauronarms, ring1, ring2, ring3, fr1, fr2, fr3, aimfromy, aimy, flare, fireline, lineflare, lightpoint, ambienttop, lp1, lp2, lp3, lp4;

static-var  restore_delay,  shotcount, timer, lastfired, gameframe, wpn1_lasthead, targetswap, isfiring, firetime;

// Signal definitions
#define SIGNAL_AIM1 256
#define SIGNAL_LIGHT 4
#define SIGNAL_IDLE 8

//#define DEBUG
#include "../debug.h"

#include "../opencloseanim.h"

static-var Stunned;

Open()
{
	set ARMORED to 0;

	move base2 to y-axis [0] speed [20];
	move base3 to y-axis [0] speed [20];

	turn sauronarms to x-axis <0.0> speed <85>;
	start-script SpinIdle();

}

Close()
{
	signal SIGNAL_AIM1;
	
	move base2 to y-axis [-10] speed [15];
	move base3 to y-axis [-16] speed [15];
	wait-for-move base2 along y-axis;
	wait-for-move base3 along y-axis;
	
	
	turn sauronarms to x-axis <-90.0> speed <85>;
	turn sauron to y-axis <0> speed <35>;
	
	turn ring1 to x-axis <0.0> speed <85>;
	turn ring2 to x-axis <0.0> speed <85>;
	turn ring2 to y-axis <0.0> speed <85>;
	turn ring3 to z-axis <0.0> speed <85>;
	stop-spin ring1 around x-axis;
	stop-spin ring2 around x-axis;
	stop-spin ring2 around y-axis;
	stop-spin ring3 around z-axis;
	stop-spin fr1 around z-axis;
	stop-spin fr2 around z-axis;
	stop-spin fr3 around z-axis;
	set ARMORED to 1;
}



Activate()
{
	start-script OpenCloseAnim(1);
}

Deactivate()
{
	signal SIGNAL_AIM1;
	start-script OpenCloseAnim(0);
}


lua_UnitScriptLight(lightIndex, count) {
	return 0;
}

Create()
{
	lastfired = get(GAME_FRAME);
	shotcount = 0;
	isfiring = 0;
	firetime = 75;

	wpn1_lasthead = 0xbadface;
	restore_delay = 2000;
	start-script OpenCloseAnim(1);
	SLEEP_UNTIL_UNITFINISHED;
	start-script SweepFire();
	start-script SpinIdle();
}

RestoreAfterDelay() {
	signal SIGNAL_IDLE;
	set-signal-mask SIGNAL_IDLE;

	sleep restore_delay;

	targetswap = 0;
	wpn1_lasthead = 0xbadface;
	timer = 0;
	
	isfiring = 0;

	gameframe = get(GAME_FRAME);
	while(lastfired+200>gameframe) {
		sleep 20;
		gameframe = get(GAME_FRAME);
	}

	if(IsOpen) {
		turn sauronarms to x-axis <0.0> speed <85>;
		turn sauron to y-axis <0> speed <35>;
		start-script SpinIdle();
	}
	return (0);
}

SpinIdle() {
	spin ring1 around x-axis speed <90> accelerate <200>;
	spin ring2 around x-axis speed <60> accelerate <200>;
	spin ring2 around y-axis speed <30> accelerate <200>;
	spin ring3 around z-axis speed <30> accelerate <200>;
	spin fr1 around z-axis speed <30> accelerate <20>;
	spin fr2 around z-axis speed <20> accelerate <20>;
	spin fr3 around z-axis speed <10> accelerate <20>;
}
SpinFiring() {
	spin ring1 around x-axis speed <180> accelerate <200>;
	spin ring2 around x-axis speed <120> accelerate <200>;
	spin ring2 around y-axis speed <60> accelerate <200>;
	spin ring3 around z-axis speed <70> accelerate <200>;
}

#define BASEPIECE base
#define MAXTILT 0
#include "../unit_hitbyweaponid_and_smoke.h"


AimWeapon1(heading, pitch) 
{
	if (!(IsOpen)) return (0);

	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;

	gameframe = get(GAME_FRAME);

	turn sauronarms to x-axis <0.0> - pitch speed <85>;
	turn sauron to y-axis heading speed <35>;
	if ((wpn1_lasthead == 0xbadface) OR ANGLE_DIFFERENCE_GREATER_THAN((heading - wpn1_lasthead), <3>))
	{
		targetswap = 1;
		wpn1_lasthead = 0xbadface;
		wait-for-turn sauron around y-axis;
		wait-for-turn sauronarms around x-axis;
	}

	wpn1_lasthead = heading;
	isfiring = 1;

	start-script RestoreAfterDelay();
	return (1);
}



SweepFire()
{
	signal SIGNAL_SHOOT1;
	set-signal-mask SIGNAL_SHOOT1;
	while (TRUE)
	{
		gameframe = get(GAME_FRAME);
		//get PRINT(123, lastfired, gameframe, gameframe);
		//get PRINT(1235, targetswap, isfiring, timer);
		dbg(targetswap, isfiring, firetime, gameframe);
		if (targetswap == 1 AND isfiring == 1 AND lastfired+firetime>gameframe)
		{
			emit-sfx 2048 from fireline;
			timer = timer + 1;
		}
		if (timer > 150)
		{
			//signal SIG_AIM;
			//timer = 0;
			start-script RestoreAfterDelay();
		}
		sleep 20;
	}
}


FireWeapon1()
{
	gameframe = get(GAME_FRAME);
	//get PRINT(1, lastfired, gameframe);
	//if (lastfired+firetime>gameframe) return (0);
	lastfired = gameframe;
	//get PRINT(11);
	start-script SpinFiring();
	timer = 0;
	//start-script Enlighten();
	//sleep 150;
	start-script RestoreAfterDelay();
	shotcount = shotcount + 1;
	call-script lua_UnitScriptLight(1, shotcount);
	return (1);
}

Shot1() {
}


AimFromWeapon1(pieceIndex)
{
	pieceIndex = aimfromy;
}


QueryWeapon1(pieceIndex)
{
	pieceIndex = lineflare;
}


Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY;
		explode flare type BITMAPONLY;
		explode sauron type BITMAPONLY;
		explode sauronarms type BITMAPONLY;
		explode flare type BITMAPONLY;
		explode fireline type BITMAPONLY;
		explode lineflare type BITMAPONLY;
		explode fr1 type BITMAPONLY;
		explode fr2 type BITMAPONLY;
		explode fr3 type BITMAPONLY;
		explode ring1 type FIRE | SMOKE | FALL;;
		explode ring2 type FIRE | SMOKE | FALL;;
		explode ring3 type FIRE | SMOKE | FALL;
		explode lightpoint type BITMAPONLY;
		explode ambienttop type BITMAPONLY;
		explode aimfromy type BITMAPONLY;
		explode aimy type BITMAPONLY;
		explode lp1 type BITMAPONLY;
		explode lp2 type BITMAPONLY;
		explode lp3 type BITMAPONLY;
		explode lp4 type BITMAPONLY;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY;
		explode flare type FIRE | SMOKE | FALL;
		explode sauron type FIRE | SMOKE | FALL;
		explode sauronarms type FIRE | SMOKE | FALL;
		explode flare type FIRE | SMOKE | FALL;
		explode fireline type FALL;
		explode lineflare type FIRE | SMOKE | FALL;
		explode fr1 type FIRE | SMOKE | FALL;
		explode fr2 type FIRE | SMOKE | FALL;
		explode fr3 type FIRE | SMOKE | FALL;
		explode ring1 type FIRE | SMOKE | FALL;
		explode ring2 type FIRE | SMOKE | FALL;
		explode ring3 type FIRE | SMOKE | FALL;
		explode lightpoint type FALL;
		explode ambienttop type FIRE | SMOKE | FALL;
		explode aimfromy type FIRE | SMOKE | FALL;
		explode aimy type FALL;
		explode lp1 type FIRE | SMOKE | FALL;
		explode lp2 type FALL;
		explode lp3 type FIRE | SMOKE | FALL;
		explode lp4 type FIRE | SMOKE | FALL;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY;
		explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode sauron type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode sauronarms type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode fireline type EXPLODE_ON_HIT | SMOKE | FALL;
		explode lineflare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode fr1 type FIRE | SMOKE | FALL;
		explode fr2 type FIRE | SMOKE | FALL;
		explode fr3 type FIRE | SMOKE | FALL;
		explode ring1 type FIRE | SMOKE | FALL;
		explode ring2 type FIRE | SMOKE | FALL;
		explode ring3 type FIRE | SMOKE | FALL;
		explode lightpoint type FIRE | SMOKE | FALL;
		explode ambienttop type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode aimfromy type FIRE | SMOKE | FALL;
		explode aimy type FIRE | SMOKE | FALL;
		explode lp1 type EXPLODE_ON_HIT | SMOKE | FALL;
		explode lp2 type SMOKE | FALL;
		explode lp3 type EXPLODE_ON_HIT | SMOKE | FALL;
		explode lp4 type FIRE | SMOKE | FALL;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY;
		explode flare type EXPLODE_ON_HIT | FIRE | FALL;
		explode sauron type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode sauronarms type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode flare type EXPLODE_ON_HIT | FIRE | FALL;
		explode fireline type EXPLODE_ON_HIT | FIRE | FALL;
		explode lineflare type EXPLODE_ON_HIT | FIRE | FALL;
		explode fr1 type EXPLODE_ON_HIT | FIRE | FALL;
		explode fr2 type EXPLODE_ON_HIT | FIRE | FALL;
		explode fr3 type EXPLODE_ON_HIT | FIRE | FALL;
		explode ring1 type EXPLODE_ON_HIT | FIRE | FALL;
		explode ring2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode ring3 type EXPLODE_ON_HIT | FIRE | FALL;
		explode lightpoint type EXPLODE_ON_HIT | FIRE | FALL;
		explode ambienttop type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode aimfromy type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode aimy type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode lp1 type EXPLODE_ON_HIT | FIRE | FALL;
		explode lp2 type EXPLODE_ON_HIT | FIRE | FALL;
		explode lp3 type EXPLODE_ON_HIT | FIRE | FALL;
		explode lp4 type EXPLODE_ON_HIT | FIRE | FALL;
		return(corpsetype);

}
