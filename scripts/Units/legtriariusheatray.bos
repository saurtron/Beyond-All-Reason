
#include "../recoil_common_includes.h"

piece  flare2, base, turret, sleeve2, ground, wake, bow, mortar, mturret, mgun, maim, mflare;

static-var  gun_1, restore_delay, aimDir1, aimDir2;

// Signal definitions
#define SIGNAL_AIM1 256
#define SIGNAL_AIM2 512


#define RB_MASS 30
#define RB_LENGTH 7
#define RB_WIDTH 3
#define RB_PITCH_SPEED 200
#define RB_PITCH_ACCELERATION 10
#define RB_ROLL_ACCELERATION 8
#define RB_RECOIL_ENERGY_1 700
#define RB_RECOIL_ENERGY_2 250
#define RB_BOWSPLASH_PIECE bow

#include "../bar_ships_common.h"


Create()
{
	hide bow;
	hide wake;
	hide flare2;
	hide ground;
	restore_delay = 3000;
	start-script InitRockBoat();
	SLEEP_UNTIL_UNITFINISHED;
	start-script BoatPhysics();
}

SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 2;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{

    if (Stunned) {
        return (1);
    }
	set-signal-mask 0;
	turn turret to y-axis <0.0> speed <35.0>;
	turn mturret to y-axis <0.0> speed <35.0>;
	turn sleeve2 to x-axis <0.0> speed <15.0>;

}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}


StartMoving(reversing)
{
}

StopMoving()
{
}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	turn turret to y-axis heading speed <80.0>;
	turn sleeve2 to x-axis RB_AIMPITCHCORRECTION(heading) - pitch speed <40.0>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve2 around x-axis;
	aimDir1 = heading;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
	RB_RECOILBOAT(aimDir1, RB_RECOIL_ENERGY_1);
	emit-sfx 1024 + 0 from flare2;
	move sleeve2 to z-axis [-3.0] speed [500.0];
	wait-for-move sleeve2 along z-axis;
	move sleeve2 to z-axis [0.0] speed [3.0];
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = turret;
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flare2;
}

////legboat todo: mortar


AimWeapon2(heading, pitch)
{
	signal SIGNAL_AIM2;
	set-signal-mask SIGNAL_AIM2;
	aimDir2 = heading;
	turn mturret to y-axis heading speed <30.0>;
	wait-for-turn mturret around y-axis;
	turn mgun to x-axis pitch-<75> speed <15.0>;
	wait-for-turn mgun around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon2()
{
	sleep 100;
	RB_RECOILBOAT(aimDir2, RB_RECOIL_ENERGY_2);//if kept maybe recoil front downwards
}


AimFromWeapon2(pieceIndex)
{
	pieceIndex = maim;
}

QueryWeapon2(pieceIndex)
{
	pieceIndex = mflare;
}


Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode sleeve2 type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve2 type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
