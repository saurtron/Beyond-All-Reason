#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SIG_BUILD	4

// piece , , , , , , ,, , , , , , ,;

piece base, turretbase, turretstrutA, turretstrutB, nano, beam, cagelight, cagelight_emit, ltrack, rtrack;

static-var  restore_delay, statechg_DesiredState, statechg_StateChanging, notBuilding, currentSpeed, moveSpeed, wheelSpeed;


activatescr()
{
	// turn  to z-axis <0.000000> now;
	// turn  to z-axis <-210> speed <360>;
	// turn  to z-axis <0.000000> now;
	// turn  to z-axis <210> speed <360>;
	// sleep 600;

	// move  to y-axis [7] speed [12];
	// move  to y-axis [5] speed [12];
	// sleep 200;

	move turretstrutA to y-axis [3] speed [20];
	wait-for-move turretstrutA along y-axis;
	move turretstrutB to y-axis [3] speed [20];
	wait-for-move turretstrutB along y-axis;
	move nano to y-axis [2] speed [20];
	
}

deactivatescr()
{
	// set INBUILDSTANCE to 0;
	// hide cagelight_emit;
	// turn cagelight to y-axis <0> speed <1000>;
	// turn  to y-axis <0.000000> speed <160.038462>;
	// turn  to y-axis <0.000000> speed <160.038462>;
	// wait-for-turn  around y-axis;

	// move  to y-axis [0] speed [12];
	// move  to y-axis [0] speed [12];
	// sleep 200;

	// turn  to z-axis <0> speed <240>;
	// turn  to z-axis <0> speed <240>;
	// sleep 200;

	set INBUILDSTANCE to 0;
	hide cagelight_emit;
	turn cagelight to y-axis <0> speed <1000>;
	turn nano to x-axis <0> speed <20>;
	wait-for-turn nano around x-axis;
	move nano to y-axis [0] speed [20];
	wait-for-move nano along y-axis;
	move turretstrutB to y-axis [0] speed [20];
	wait-for-move turretstrutB along y-axis;
	move turretstrutA to y-axis [0] speed [20];
}

#define BASEPIECE base
#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 3
#define MAXTILT 100

#include "unit_hitbyweaponid_and_smoke.h"

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script deactivatescr();
			notBuilding = 1;
			currentstate = 1;
		}
		else
		{
			call-script activatescr();
			notBuilding = 0;
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	hide beam;
	hide cagelight_emit;
	restore_delay = 3000;
	notBuilding = 1;
	moveSpeed = get MAX_SPEED;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	hide cagelight_emit;
	start-script RequestState(1);
}

StartBuilding(heading, pitch)
{
	show beam;
	start-script RequestState(0);
	while( notBuilding ) sleep 100;
	signal SIG_BUILD;
	// turn  to y-axis heading speed <160.038462>;
	// wait-for-turn  around y-axis;
	turn nano to y-axis heading speed <160>;
	wait-for-turn nano around y-axis;
	set INBUILDSTANCE to 1;
	show cagelight_emit;
	move cagelight to y-axis [1] speed [20];
	spin cagelight around y-axis speed <250>;
}

StopBuilding()
{
	hide beam;
	signal SIG_BUILD;	
	set-signal-mask SIG_BUILD;
	hide cagelight_emit;
	move cagelight to y-axis [0] speed [20];
	turn cagelight to y-axis <0> speed <1000>;
	sleep 6000;
	set-signal-mask 0;
	signal SIG_BUILD;
	turn nano to y-axis <0> speed <160>;
	wait-for-turn nano around y-axis;	
	start-script RequestState(1);
}

QueryNanoPiece(piecenum)
{
	piecenum = beam;

}


SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		//explode  type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode  type BITMAPONLY | NOHEATCLOUD;
		//explode  type BITMAPONLY | NOHEATCLOUD;
		explode nano type BITMAPONLY | NOHEATCLOUD;
		explode cagelight type BITMAPONLY | NOHEATCLOUD;
		//explode  type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		//explode  type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode  type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nano type FALL | NOHEATCLOUD;
		explode cagelight type FALL | NOHEATCLOUD;
		explode turretbase type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode  type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		//explode  type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode  type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nano type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode cagelight type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turretbase type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode  type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		//explode  type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode  type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode nano type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode ltrack type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode rtrack type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode  type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}


