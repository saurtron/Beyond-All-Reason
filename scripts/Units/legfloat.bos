#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, lankle, lwheel, rankle, rwheel, turret, gun, barrel, aimbit,
       flare, aaturret, aagun, aabarrel, aaflare, smoke, fwater, lknee, rknee;

static-var  restore_delay, oldheading, bAiming, Stunned, moving, Wobble_status, inwater;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_MOVE			8


Steering(heading, steery, currentspeed)
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( get GROUND_WATER_HEIGHT(get UNIT_XZ) > 0 )
		{
			inwater = 0;
			move base to y-axis [0] speed [8];
			turn rankle to x-axis <0.000000> speed <100.000000>;
			turn lankle to x-axis <0.000000> speed <100.000000>;
			turn rknee to x-axis <0.000000> speed <100.000000>;
			turn lknee to x-axis <0.000000> speed <100.000000>;
			heading = get HEADING;
			steery = ( heading - oldheading ) * 3;
			turn rankle to y-axis steery speed <75.000000>;
			turn lankle to y-axis steery speed <75.000000>;
			currentspeed = <5.5> * ((get CURRENT_SPEED) * 100 / get MAX_SPEED);
			if( currentspeed < <100> )
			{
				currentspeed = <100>;
			}
			spin rwheel around x-axis speed currentspeed;
			spin lwheel around x-axis speed currentspeed;
			sleep 66;
			oldheading = heading;
		}
		if( get GROUND_WATER_HEIGHT(get UNIT_XZ) <= 0 )
		{
			move base to y-axis [-11] speed [5.0000000];
			turn rankle to y-axis <0.000000> speed <75.000000>;
			turn lankle to y-axis <0.000000> speed <75.000000>;
			stop-spin rwheel around x-axis decelerate <5.000000>;
			stop-spin lwheel around x-axis decelerate <5.000000>;
			sleep 50;
			turn rknee to x-axis <-24.000000> speed <50.000000>;
			turn lknee to x-axis <-24.000000> speed <50.000000>;
			turn rankle to x-axis <-45.000000> speed <50.000000>;
			turn lankle to x-axis <-45.000000> speed <50.000000>;
			wait-for-move base along y-axis;
			inwater = 1;
		}
	}
}

WobbleUnit()
{
	while( TRUE )
	{
		if( Wobble_status )
		{
			if( inwater ) //Over Water
			{
				move base to y-axis [-10.250000] speed [0.50000];
				wait-for-move base along y-axis;
			}
		}
		else
		{
			if( inwater ) //Over Water
			{
				move base to y-axis [-11.00000] speed [0.50000];
				wait-for-move base along y-axis;
			}
		}
		Wobble_status = !Wobble_status;
		sleep 260;
	}
}

Wake()
{
	var waketime;
    var bowtime;
    bowtime = 0;
	while( TRUE )
	{
	if( get GROUND_WATER_HEIGHT(get UNIT_XZ) < 0 )
		{
        	emit-sfx 1024 + 1 from smoke;
        	if (bowtime AND moving) emit-sfx 1024 + 2 from base;
        	bowtime = !bowtime;
        	waketime = (get CURRENT_SPEED) * 100 / get MAX_SPEED;
        	if( waketime < 20 ) waketime = 20;
        	sleep 15000 / waketime;
        }
    if( get GROUND_WATER_HEIGHT(get UNIT_XZ) >= 0 )
		{
			sleep 500;
		}
    }
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from smoke;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(Func_Var_1, Func_Var_2, Func_Var_3, Func_Var_4)
{
	Func_Var_4 = Func_Var_3 / 100 * 4;
	if( Func_Var_4 < 3 )
	{
		return (0);
	}
	if( Func_Var_4 > 100 )
	{
		Func_Var_4 = 100;
	}
	turn base to z-axis Func_Var_2 * Func_Var_4 / <0.549451> speed <85.000000>;
	turn base to x-axis <0.000000> - Func_Var_1 * Func_Var_4 / <0.549451> speed <85.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <85.000000> / <0.021978>;
	turn base to x-axis <0.000000> speed <85.000000> / <0.021978>;
}

HitByWeaponId(Func_Var_1, Func_Var_2, Func_Var_3, Func_Var_4)
{
	start-script HitByWeapon(Func_Var_4,Func_Var_2,Func_Var_1);
	return (100);
}

StartMoving()
{
	start-script Steering();
	moving = 1;
	turn base to x-axis <-7.000000> speed <11.000000>;
	wait-for-turn base around x-axis;
	turn base to x-axis <0.000000> speed <11.000000>;
}

StopMoving()
{
	moving = 0;
	turn base to x-axis <1.000000> speed <5.000000>;
	wait-for-turn base around x-axis;
	turn base to x-axis <0.000000> speed <5.000000>;
	signal 8;
	stop-spin rwheel around x-axis;
	stop-spin lwheel around x-axis;
}

Create()
{
	hide flare;
	hide fwater;
	hide smoke;
	hide aimbit;
	moving= 0;
	restore_delay = 3000;
	start-script SmokeUnit();
	start-script Wake();
	start-script WobbleUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

ExecuteRestoreAfterDelay()
{
	if(Stunned)
	{
		return (1);
	}
	set-signal-mask 0;
	turn turret to y-axis <0.000000> speed <90.000000>;
	turn gun to x-axis <0.000000> speed <50.000000>;
	turn aaturret to y-axis <0.000000> speed <120.000000>;
	turn aagun to x-axis <0.000000> speed <70.000000>;
	stop-spin aabarrel around z-axis decelerate <5.000000>;
}

SetStunned(State)
{
	Stunned = State;
	if( !Stunned )
	{
		start-script ExecuteRestoreAfterDelay();
	}
}

RestoreAfterDelay()
{
	stop-spin aabarrel around z-axis decelerate <5.000000>;
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <60.000000>;
	turn gun to x-axis <0.000000> - pitch speed <30.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn gun around x-axis;
	bAiming = heading;
	start-script RestoreAfterDelay();
	return (1);
}

Rock_Main_Cannon()
{
	if( get GROUND_WATER_HEIGHT(get UNIT_XZ) >= 0 )
	{
		turn base to z-axis <0.000000> - (GET KSIN(bAiming)) * 3 / 3 speed <125.000000>;
		turn base to x-axis <0.000000> - (GET KCOS(bAiming)) * 9 / 15 speed <75.000000>;
		wait-for-turn base around z-axis;
		wait-for-turn base around x-axis;
		turn base to z-axis <0.000000> speed <45.000000>;
		turn base to x-axis <0.000000> speed <27.000000>;
	}
	if( get GROUND_WATER_HEIGHT(get UNIT_XZ) < 0 )
	{
		turn base to z-axis <0.000000> - (GET KSIN(bAiming)) * 3 / 2 speed <125.000000>;
		turn base to x-axis <0.000000> - (GET KCOS(bAiming)) * 9 / 10 speed <75.000000>;
		wait-for-turn base around z-axis;
		wait-for-turn base around x-axis;
		turn base to z-axis <0.000000> speed <15.000000>;
		turn base to x-axis <0.000000> speed <9.000000>;
	}
}

AimSecondary(heading, pitch)
{ 
    var turret_xz;
    turret_xz = get PIECE_XZ(turret);                                //get packed turret coordinates
    var turret_x;
    turret_x = (turret_xz & 0xffff0000) / 0x00010000;                //unpack x coordinates of turret (credit for unpack code goes to Beherith)
    var turret_z;
    turret_z = (turret_xz & 0x0000ffff);                            //unpack z coordinates of turret
    
    var aimbit_xz;
    aimbit_xz = get PIECE_XZ(aimbit);                        //get packed aimbit coordinates
    var aimbit_x;
    aimbit_x = (aimbit_xz & 0xffff0000) / 0x00010000;        //unpack x coordinates of aimbit
    var aimbit_z;
    aimbit_z = (aimbit_xz & 0x0000ffff);                    //unpack z coordinates of aimbit
    
    var aim_x;
    var aim_z;
    aim_x = turret_x - aimbit_x;                                //calculate relative coordinates of the turret to the aaturret (how far away it is in each direction)
    aim_z = turret_z - aimbit_z;
    
    
    var hull_xz;
    hull_xz = get PIECE_XZ(base);                            //get packed base coordinates
    var hull_x;
    hull_x = (hull_xz & 0xffff0000) / 0x00010000;            //unpack x coordinates of base
    var hull_z;
    hull_z = (hull_xz & 0x0000ffff);                        //unpack z coordinates of base
    
    var smoke_xz;
    smoke_xz = get PIECE_XZ(smoke);                            //get packed smoke coordinates
    var smoke_x;
    smoke_x = (smoke_xz & 0xffff0000) / 0x00010000;            //unpack x coordinates of smoke
    var smoke_z;
    smoke_z = (smoke_xz & 0x0000ffff);                        //unpack z coordinates of smoke
    
    var face_x;
    var face_z;
    face_x = hull_x - smoke_x;                                //calculate relative coordinates of the base to the smoke (how far away it is in each direction)
    face_z = hull_z - smoke_z;
	
	var cauaim;
    var cauface;
    cauaim = get ATAN(aim_z, aim_x);                        //use arctan (ATAN) to calculate the angle of the aaturret. The result is in cau, which is the unit this code format uses for angles. Its up to 32768 (180°), positive or negative depending on direction
    cauface = get ATAN(face_z, face_x);                        //use arctan (ATAN) to calculate the angle of the base. The result is in cau, which is the unit this code format uses for angles. Its up to 32768 (180°), positive or negative depending on direction
    
    var trueaim;
    trueaim = cauaim - cauface;                                //calculate angle of aaturret relative to the base
    
    signal SIG_AIM_2;
    set-signal-mask SIG_AIM_2;
    turn aaturret to y-axis heading + trueaim speed <300.000000>;    //add the result to the y axis heading
    turn aagun to x-axis <0.000000> - pitch speed <65.000000>;        //the rest of the AimSecondary script
    wait-for-turn aaturret around y-axis;
    wait-for-turn aagun around x-axis;
    start-script RestoreAfterDelay();
    return (1);
}

FirePrimary()
{
	start-script Rock_Main_Cannon();
	emit-sfx 1024 + 0 from flare;
	emit-sfx 1024 + 3 from fwater;
	move barrel to z-axis [-3.0000] speed [500.000000];
	wait-for-move barrel along z-axis;
	move barrel to z-axis [0.000000] speed [3.000000];
}

FireSecondary()
{
	spin aabarrel around z-axis speed <900.000000>;
	return (1);
}

AimFromPrimary(piecenum)
{
	piecenum = gun;
}

AimFromSecondary(piecenum)
{
	piecenum = aagun;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

QuerySecondary(piecenum)
{
	piecenum = aaflare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | 128;
		explode turret type BITMAPONLY | 128;
		explode barrel type FIRE | SMOKE | FALL | 128;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | 128;
		explode turret type FALL | 128;
		explode gun type FALL | 128;
		explode barrel type FIRE | SMOKE | FALL | 128;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type FIRE | SMOKE | FALL | 128;
		explode turret type EXPLODE_ON_HIT | SMOKE | FALL | 128;
		explode gun type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | 128;
		explode barrel type EXPLODE_ON_HIT | SMOKE | FALL | 128;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | 128;
	explode turret type EXPLODE_ON_HIT | FIRE | FALL | 128;
	explode gun type EXPLODE_ON_HIT | FIRE | FALL | 128;
	explode barrel type EXPLODE_ON_HIT | FIRE | FALL | 128;
	return (corpsetype);
}
