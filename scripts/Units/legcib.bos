#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

// piece  base, firepoint, thrust;
piece chassis, firepoint, launcher, rThrust, lThrust, 
rWingPivot, rWingA, rWingB, rWingC,
lWingPivot, lWingA, lWingB, lWingC;


static-var  Static_Var_1, gun_2, statechg_DesiredState, statechg_StateChanging, Stunned;

// Signal definitions
#define SIG_AIM_2			2


activatescr()
{
	//sleep 10;
	show lThrust;
	show rThrust;

	turn rWingPivot to z-axis <-25> speed [1];
	turn lWingPivot to z-axis <25> speed [1];
	
	move rWingC to x-axis [0] speed [7];
	move rWingB to x-axis [0] speed [7];
	move lWingC to x-axis [0] speed [7];
	move lWingB to x-axis [0] speed [7];
	wait-for-move rWingB along x-axis;

	move rWingC to y-axis [0] speed [7];
	move rWingB to y-axis [0] speed [7];
	move lWingC to y-axis [0] speed [7];
	move lWingB to y-axis [0] speed [7];
	wait-for-move rWingB along y-axis;

	move rWingC to z-axis [0] speed [7];
	move rWingB to z-axis [0] speed [7];
	move lWingC to z-axis [0] speed [7];
	move lWingB to z-axis [0] speed [7];
	wait-for-move rWingB along z-axis;

}

deactivatescr()
{
	//sleep 10;
	hide lThrust;
	hide rThrust;

	turn rWingPivot to z-axis <0> speed [1];
	turn lWingPivot to z-axis <0> speed [1];

	move rWingC to z-axis [-3.7] speed [10];
	move rWingB to z-axis [-3.7] speed [10];
	move lWingC to z-axis [-3.7] speed [10];
	move lWingB to z-axis [-3.7] speed [10];
	wait-for-move rWingB along z-axis;

	move rWingC to y-axis [-1.4] speed [10];
	move rWingB to y-axis [-1.4] speed [10];
	move lWingC to y-axis [-1.4] speed [10];
	move lWingB to y-axis [-1.4] speed [10];
	wait-for-move rWingB along y-axis;

	move rWingC to x-axis [-7.1] speed [10];
	move rWingB to x-axis [-7.1] speed [10];
	move lWingC to x-axis [7.1] speed [10];
	move lWingB to x-axis [7.1] speed [10];
	//wait-for-move rWingB along x-axis;

}


#define BASEPIECE chassis
#define HITSPEED <105.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 1
#define MAXTILT 100

ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep 500;
	turn launcher to x-axis <-10> speed <10>;
	start-script ExecuteRestoreAfterDelay();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	show lThrust;
	show rThrust;	
	start-script RequestState(0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	//hide thrust;
	//hide firepoint;

	hide rThrust;
	hide lThrust;
	hide firepoint;

	turn rWingPivot to z-axis <-25> now;
	turn lWingPivot to z-axis <25> now;

	turn launcher to x-axis <-10> now;

	move rWingC to y-axis [-1.4] now;
	move rWingB to y-axis [-1.4] now;
	move lWingC to y-axis [-1.4] now;
	move lWingB to y-axis [-1.4] now;
	wait-for-move rWingB along y-axis;

	move rWingC to z-axis [-3.7] now;
	move rWingB to z-axis [-3.7] now;
	move lWingC to z-axis [-3.7] now;
	move lWingB to z-axis [-3.7] now;
	//wait-for-move rWingB along z-axis;

	move rWingC to x-axis [-7.1] now;
	move rWingB to x-axis [-7.1] now;
	move lWingC to x-axis [7.1] now;
	move lWingB to x-axis [7.1] now;
	//wait-for-move rWingB along x-axis;

	while( get BUILD_PERCENT_LEFT )
	{
		sleep 10;
	}
	Static_Var_1 = 3000;
	call-script InitState();
}

Activate()
{
	show lThrust;
	show rThrust;	
	start-script RequestState(0);
	return(0);
}

Deactivate()
{
	hide lThrust;
	hide rThrust;
	start-script RequestState(1);
	return(0);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn launcher to x-axis <10> speed <50>;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	emit-sfx 1024 + 0 from firepoint;
	sleep 100;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = firepoint;
}


SweetSpot(piecenum)
{
	piecenum = chassis;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode chassis type BITMAPONLY | NOHEATCLOUD;
		explode firepoint type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode chassis type BITMAPONLY | NOHEATCLOUD;
		explode firepoint type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode chassis type BITMAPONLY | NOHEATCLOUD;
		explode firepoint type SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode chassis type BITMAPONLY | NOHEATCLOUD;
		explode firepoint type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
