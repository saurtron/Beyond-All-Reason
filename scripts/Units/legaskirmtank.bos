#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

//piece  base, flare, turret, sleeve, barrel, gun, turretl, barrell, flarel, turretr, barrelr, flarer;
piece base, tracks, turretBase, barrelPivot, barrelBack, barrelMid, barrelAim, barrelA, barrelB, barrelC, turretTop, flare;

static-var   statechg_DesiredState, statechg_StateChanging, restore_delay;

// Signal definitions
#define SIG_AIM				2
// #define SIG_AIM_2			4
// #define SIG_AIM_3			8



#define BASEPIECE base
#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 4
#define MAXTILT 100

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script deploy();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script undeploy();
			currentstate = 1;		
		}
	}
	statechg_StateChanging = FALSE;
}

deploy(){

	//move turretBase to y-axis [0] speed [40];
	//wait-for-move turretBase along y-axis;
	//sleep 500;
	// move barrelBack to z-axis [0] speed [12];
	// move barrelMid to z-axis [0] speed [36];
	// move barrelA to z-axis [0] speed [22];
	// move barrelB to z-axis [0] speed [22];
	// move barrelC to z-axis [0] speed [22];
	// move turretBase to z-axis [0] speed [8];
	return (0);
	
}

undeploy(){

	// move barrelBack to z-axis [6] speed [6];
	// move barrelMid to z-axis [-18] speed [18];
	// move barrelA to z-axis [-11] speed [11];
	// move barrelB to z-axis [-11] speed [11];
	// move barrelC to z-axis [-11] speed [11];
	// //wait-for-move barrelC along z-axis;
	// move turretBase to z-axis [4] speed [4];
	// wait-for-move turretBase along z-axis;
	// //sleep 1000;
	// move turretBase to y-axis [-10] speed [20];

}

//rock the unit
RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <50.000000>;
	turn base to z-axis <0> - anglez speed <50.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
}

Create()
{
	hide flare;
	// hide flarer;
	// hide flarel;
	restore_delay = 3000;
	start-script RestoreAfterDelay();
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
	return (0);
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn turretBase to y-axis <0.000000> speed <40>;
	turn barrelPivot to x-axis <0.000000> speed <40>;
	//stop-spin barrelMid around z-axis decelerate <5>;
	wait-for-turn turretBase around y-axis;
	start-script RequestState(1);
	call-script undeploy();
	// turn turretr to y-axis <0.000000> speed <120>;
	// turn turretl to y-axis <0.000000> speed <120>;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	//start-script RequestState(0);
	call-script deploy();
	turn turretBase to y-axis heading speed <85.005495>;
	turn barrelPivot to x-axis <0.000000> - pitch speed <50.005495>;
	wait-for-turn turretBase around y-axis;
	wait-for-turn barrelPivot around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	//spin barrelMid around z-axis speed <720>;// accelerate <10>;
	emit-sfx 1024 + 0 from flare;
	move barrelA to z-axis [-6] now;
	sleep 150;
	move barrelA to z-axis [0] speed [18];
	emit-sfx 1024 + 0 from flare;
	move barrelB to z-axis [-6] now;
	sleep 150;
	move barrelB to z-axis [0] speed [18];
	emit-sfx 1024 + 0 from flare;
	move barrelC to z-axis [-6] now;
	sleep 150;
	move barrelC to z-axis [0] speed [18];
	//stop-spin barrelMid around z-axis decelerate <30>;
	// move sleeve to z-axis [-3.000000] speed [1250.000000];
	// move barrel to z-axis [-6.000000] speed [1250.000000];
	// wait-for-move sleeve along z-axis;
	// move barrel to z-axis [0.000000] speed [7.500000];
	// move sleeve to z-axis [0.000000] speed [7.500000];
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = barrelPivot;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
	return (0);
}

// AimSecondary(heading, pitch)
// {
// 	signal SIG_AIM_2;
// 	set-signal-mask SIG_AIM_2;
// 	turn turretl to y-axis heading speed <180>;
// 	turn barrell to x-axis <0.000000> - pitch speed <60>;
// 	wait-for-turn turretl around y-axis;
// 	wait-for-turn barrell around x-axis;
// 	start-script RestoreAfterDelay();
// 	return (1);
// }

// FireSecondary()
// {
// 	show flarel;
// 	sleep 100;
// 	hide flarel;
// }

// AimFromSecondary(piecenum)
// {
// 	piecenum = barrell;
// 	return (0);
// }

// QuerySecondary(piecenum)
// {
// 	piecenum = flarel;
// 	return (0);
// }

// AimTertiary(heading, pitch)
// {
// 	signal SIG_AIM_3;
// 	set-signal-mask SIG_AIM_3;
// 	turn turretr to y-axis heading speed <180>;
// 	turn barrelr to x-axis <0.000000> - pitch speed <60>;
// 	wait-for-turn turretr around y-axis;
// 	wait-for-turn barrelr around x-axis;
// 	start-script RestoreAfterDelay();
// 	return (1);
// }

// FireTertiary()
// {
// 	show flarer;
// 	sleep 100;
// 	hide flarer;
// }

// AimFromTertiary(piecenum)
// {
// 	piecenum = barrelr;
// 	return (0);
// }

// QueryTertiary(piecenum)
// {
// 	piecenum = flarer;
// 	return (0);
// }

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turretBase type BITMAPONLY | NOHEATCLOUD;
		explode barrelPivot type BITMAPONLY | NOHEATCLOUD;
		explode barrelMid type BITMAPONLY | NOHEATCLOUD;
		explode barrelBack type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turretBase type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrelPivot type FALL | NOHEATCLOUD;
		explode barrelMid type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrelBack type FALL | NOHEATCLOUD;
		//explode flare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turretBase type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrelPivot type SMOKE | FALL | NOHEATCLOUD;
		explode barrelMid type SMOKE | FALL | NOHEATCLOUD;
		explode barrelBack type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turretBase type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode barrelPivot type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode barrelMid type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode barrelBack type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode flare type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
