#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pole, turret, sleeve, barrel, flare, ground;

static-var  gun_1, gun_2, restore_delay, oldHead, wpn1_lasthead;

// Signal definitions
#define SIG_AIM				2
#define SIG_MOVE			8

#define BASEPIECE base
#define HITSPEED <20.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 2
#define MAXTILT 200

#include "unit_hitbyweaponid_and_smoke.h"

SetDirection(heading)
{
	var spd;
	spd = (get ABS(oldHead) - get ABS(heading)) / 2;
	turn ground to y-axis heading speed spd;
	turn base to y-axis 0-heading speed spd;
	oldHead = heading;
}

RockOnWaves()
{
	var rockDir, rockAng, rockSpeed;
	rockDir = <-0.1>;
	rockAng = <-0.1>;
	while( TRUE )
	{
		while( get ABS(rockAng) < <1.31> )
		{
			rockSpeed = <1.45> - get ABS(rockAng);
			turn ground to x-axis rockAng speed rockSpeed*5;
			wait-for-turn ground around x-axis;
			rockAng = rockAng + rockDir;
		}
		rockDir = 0 - rockDir;
		rockAng = rockAng + rockDir + rockDir;
	}
}


Create()
{
	hide ground;
	restore_delay = 3000;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script RockOnWaves();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

static-var  Stunned;

ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn sleeve to y-axis 0 speed <100.000000>;
	spin barrel around z-axis speed <600.000000>;
	sleep restore_delay;
	spin barrel around z-axis speed <300.000000>;
	sleep (restore_delay / 2);
	spin barrel around z-axis speed <150.000000>;
	sleep (restore_delay / 4);
	stop-spin barrel around z-axis;
	wpn1_lasthead = 1000000;

}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

waveSplash()
{
	while( TRUE )
	{
		turn base to x-axis <-3.0> speed <3.0>;
		move base to y-axis [0.23] speed [0.23];
		wait-for-turn base around x-axis;
		turn base to x-axis <0.0> speed <3.0>;
		move base to y-axis [0.0] speed [0.23];
		wait-for-turn base around x-axis;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	var waketime;
	start-script waveSplash();
	while( TRUE )
	{
		emit-sfx 1024 + 1 from ground;
		waketime = (get CURRENT_SPEED) * 80 / get MAX_SPEED;
		if( waketime < 50 ) waketime = 50;
		sleep 13000 / waketime;
	}
}

StopMoving()
{
	signal SIG_MOVE;
	turn base to x-axis <0.0> speed <3.0>;
	move base to y-axis [0.0] speed [0.23];
}
AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn sleeve to y-axis heading speed <200.000000>;
	turn sleeve to x-axis <0.000000> - <5> - pitch speed <100.000000>;
	if (((get ABS(wpn1_lasthead - heading)) > 65536) OR(((get ABS(wpn1_lasthead - heading)) > 1300) AND ((get ABS(wpn1_lasthead - heading)) < 64236)))
	{
		wpn1_lasthead = 1000000;
		wait-for-turn pole around y-axis;
		wait-for-turn sleeve around x-axis;
	}
	wpn1_lasthead = heading;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	spin barrel around z-axis speed <900.000000>;
	emit-sfx 1024 + 0 from flare;
}

AimFromPrimary(piecenum)
{
	piecenum = sleeve;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}


SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode ground type BITMAPONLY | NOHEATCLOUD;
		explode base type BITMAPONLY | NOHEATCLOUD;
		//explode flare12 type BITMAPONLY | NOHEATCLOUD;
		//explode flare11 type BITMAPONLY | NOHEATCLOUD;
		//explode turret2 type BITMAPONLY | NOHEATCLOUD;
		//explode bbarrelb type BITMAPONLY | NOHEATCLOUD;
		//explode flare22 type BITMAPONLY | NOHEATCLOUD;
		//explode bbarrela type BITMAPONLY | NOHEATCLOUD;
		//explode flare21 type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode ground type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare12 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare11 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode turret2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode bbarrelb type FALL | NOHEATCLOUD;
		//explode flare22 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode bbarrela type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare21 type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode ground type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare11 type SMOKE | FALL | NOHEATCLOUD;
		//explode turret2 type SMOKE | FALL | NOHEATCLOUD;
		//explode bbarrelb type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare22 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode bbarrela type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode flare21 type SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode ground type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode flare11 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode turret2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode bbarrelb type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode flare22 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode bbarrela type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare21 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
