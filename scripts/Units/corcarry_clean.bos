
#include "../recoil_common_includes.h"

piece  base, pad1, pad0, dish, wake, bow, beam1, beam2, nano1, nano2, anti, dtr, dtl, dbr, dbl, blink;

static-var  landingPadSelector, oldHead;
static-var  Stunned;

// Signal definitions
#define SIGNAL_MOVE 1
#define SIGNAL_AIM1 256


#define RB_MASS 40
#define RB_LENGTH 8
#define RB_WIDTH 3
#define RB_PITCH_ACCELERATION 10
#define RB_ROLL_ACCELERATION 8
#define RB_WAKE_PIECE wake
#define RB_WAKE_CEG 1024 + 1
#define RB_BOWSPLASH_PIECE bow
#define RB_BOWSPLASH_CEG 1024 + 2

#include "../bar_ships_common.h"

Lights()
{
	while( TRUE )
	{
	    if (!Stunned) {
		    emit-sfx 1024 + 0 from blink;
		}
		sleep 2500;
	}
	sleep 50;
	start-script Lights();
}


Go()
{
	spin dish around y-axis speed <-50.043956> accelerate <2>;
	return (0);
}

Stop()
{
	spin dish around y-axis speed <0.0>;
	return (0);
}

Create()
{
	hide bow;
	hide blink;
	hide anti;
	hide pad0;
	hide pad1;
	hide wake;
	hide nano1;
	hide nano2;
	landingPadSelector = 0;
	start-script InitRockBoat();
	SLEEP_UNTIL_UNITFINISHED;
	start-script BoatPhysics();
}

StartBuilding()
{
	show nano1;
	show nano2;
	return (0);
}

StopBuilding()
{
	hide nano1;
	hide nano2;
	return (0);
}

Activate()
{
	start-script Lights();
	start-script Go();
}

Deactivate()
{
	start-script Stop();
}

StartMoving(reversing)
{

}

StopMoving()
{

}



QueryLandingPad(pieceIndex1, pieceIndex2)
{
	pieceIndex1 = 1;
	pieceIndex2 = 2;
	landingPadSelector = !landingPadSelector;
	if( landingPadSelector )
	{
		pieceIndex1 = 2;
		pieceIndex2 = 1;
	}
}

ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	set-signal-mask 0;
	move dbl to x-axis [0] speed [8];
	move dbl to z-axis [0] speed [8];
	move dbr to x-axis [0] speed [8];
	move dbr to z-axis [0] speed [8];
	move dtl to x-axis [0] speed [8];
	move dtl to z-axis [0] speed [8];
	move dtr to x-axis [0] speed [8];
	move dtr to z-axis [0] speed [8];
}
SetStunned(State)
{
    Stunned = State;
	if (Stunned) {
	    call-script Stop();
	} else {
	    call-script Go();
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep 3000;
	start-script ExecuteRestoreAfterDelay();
}


AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	move dbl to x-axis [-5.6] speed [8];
	move dbl to z-axis [-5.6] speed [8];
	move dbr to x-axis [5.6] speed [8];
	move dbr to z-axis [-5.6] speed [8];
	move dtl to x-axis [-5.6] speed [8];  
	move dtl to z-axis [5.6] speed [8];
	move dtr to x-axis [5.6] speed [8];
	move dtr to z-axis [5.6] speed [8];
	wait-for-move dtr along x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
	sleep 150;
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = anti;
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = anti;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode beam1 type BITMAPONLY | NOHEATCLOUD;
		explode nano1 type BITMAPONLY | NOHEATCLOUD;
		explode beam2 type BITMAPONLY | NOHEATCLOUD;
		explode nano2 type BITMAPONLY | NOHEATCLOUD;
		explode dish type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode beam1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nano1 type FALL | NOHEATCLOUD;
		explode beam2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nano2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode dish type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode beam1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nano1 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode beam2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nano2 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode dish type SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode beam1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode nano1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode beam2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nano2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode dish type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
