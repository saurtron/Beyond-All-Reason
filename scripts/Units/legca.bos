#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

// piece  base, duct1, fan1, duct2, fan2, door1, door2, support, beam, nano, thrust;
piece chassis, mainEngine, mainThrust, smallEngineA, thrustA, smallEngineB, thrustB, nanoStrut, nano, beam;

static-var  Static_Var_1, Static_Var_2;


activatescr()
{
	// spin fan1 around y-axis speed <720> accelerate <720>;
	// spin fan2 around y-axis speed <-720> accelerate <720>;
	// sleep 1457;

	turn mainEngine to x-axis <0> speed <60>;
	show mainThrust;

	turn smallEngineA to x-axis <0> speed <60>;
	show thrustA;

	turn smallEngineB to x-axis <0> speed <60>;
	show thrustB;
	
	return (0);
}

deactivatescr()
{
	//stop-spin fan1 around y-axis decelerate <720>;
	//stop-spin fan2 around y-axis decelerate <720>;
	//sleep 1455;

	turn mainEngine to x-axis <-90> speed <60>;
	hide mainThrust;

	turn smallEngineA to x-axis <-90> speed <60>;
	hide thrustA;

	turn smallEngineB to x-axis <-90> speed <60>;
	hide thrustB;
	
	return (0);

}

#define BASEPIECE chassis
#define HITSPEED <105.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 1
#define MAXTILT 100

#define IDLEHOVERSCALE 32
#define IDLEHOVERSPEED 60
#define IDLEBASEPIECE chassis
#include "idlehover.h"

RequestState(requestedstate, currentstate)
{
	if( Static_Var_2 )
	{
		Static_Var_1 = requestedstate;
		return (0);
	}
	Static_Var_2 = 1;
	currentstate = Static_Var_1;
	Static_Var_1 = requestedstate;
	while( Static_Var_1 != currentstate )
	{
		if( Static_Var_1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
		else
		{
			call-script activatescr();
			currentstate = 0;
		}
	}
	Static_Var_2 = 0;
	return (0);
}

Create()
{
	//hide nano;
	//hide thrust;
	
	hide mainThrust;
	hide thrustA;
	hide thrustB;
	hide beam;

	turn mainEngine to x-axis <-90> now;
	turn smallEngineA to x-axis <-90> now;
	turn smallEngineB to x-axis <-90> now;

	Static_Var_1 = 1;
	Static_Var_2 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script IdleHover();
}

Activate()
{
	show mainThrust;
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	hide mainThrust;
	start-script RequestState(1);
	return (0);
}

StartBuilding()
{
	//show nano;
	//turn support to x-axis <-90> speed <90>;
	//turn beam to x-axis <135> speed <135>;
	//turn door1 to z-axis <-140> speed <280>;
	//turn door2 to z-axis <140> speed <280>;

	show beam;
	move nanoStrut to y-axis [-2.800000] speed [40];
	//wait-for-move nanoStrut along y-axis;
	turn nano to x-axis <20> speed <200.000000>;


	set INBUILDSTANCE to 1;
	return (0);
}

StopBuilding()
{
	//hide nano;
	//turn support to x-axis <0> speed <90>;
	//turn beam to x-axis <0> speed <135>;
	//turn door1 to z-axis <0> speed <280>;
	//turn door2 to z-axis <0> speed <280>;

	hide beam;
	turn nano to x-axis <0> speed <200>;
	//wait-for-turn nano around x-axis;
	move nanoStrut to y-axis [0] speed [40];

	set INBUILDSTANCE to 0;
	return (0);
}

QueryNanoPiece(piecenum)
{
	piecenum = beam;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = chassis;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode chassis type BITMAPONLY | NOHEATCLOUD;
		explode mainEngine type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nanoStrut type BITMAPONLY | NOHEATCLOUD;
		explode beam type BITMAPONLY | NOHEATCLOUD;
		explode nano type BITMAPONLY | NOHEATCLOUD;
		explode smallEngineA type BITMAPONLY | NOHEATCLOUD;
		explode smallEngineB type BITMAPONLY | NOHEATCLOUD;
		explode mainThrust type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode chassis type BITMAPONLY | NOHEATCLOUD;
		explode mainEngine type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nanoStrut type BITMAPONLY | NOHEATCLOUD;
		explode beam type BITMAPONLY | NOHEATCLOUD;
		explode nano type BITMAPONLY | NOHEATCLOUD;
		explode smallEngineA type BITMAPONLY | NOHEATCLOUD;
		explode smallEngineB type BITMAPONLY | NOHEATCLOUD;
		explode mainThrust type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode chassis type BITMAPONLY | NOHEATCLOUD;
		explode mainEngine type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nanoStrut type BITMAPONLY | NOHEATCLOUD;
		explode beam type BITMAPONLY | NOHEATCLOUD;
		explode nano type BITMAPONLY | NOHEATCLOUD;
		explode smallEngineA type BITMAPONLY | NOHEATCLOUD;
		explode smallEngineB type BITMAPONLY | NOHEATCLOUD;
		explode mainThrust type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
    explode chassis type BITMAPONLY | NOHEATCLOUD;
    explode mainEngine type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
    explode nanoStrut type BITMAPONLY | NOHEATCLOUD;
    explode beam type BITMAPONLY | NOHEATCLOUD;
    explode nano type BITMAPONLY | NOHEATCLOUD;
    explode smallEngineA type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
    explode smallEngineB type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
    explode mainThrust type BITMAPONLY | NOHEATCLOUD;
	return corpsetype;
}
