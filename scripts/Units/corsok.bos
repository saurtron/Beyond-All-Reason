
#include "../recoil_common_includes.h"

piece  base, aimy1, aimy2, turret, dclauncher, aimx1, sleeve, barrel1, barrel2, flare1, flare2, flaredc,
       strutl, jetl, bladesl, strutr, jetr, bladesr, wake;

static-var  isAiming, gun1, oldheading, shotcount; 

// Signal definitions
#define SIGNAL_AIM1 256
#define SIGNAL_AIM2 512
#define SIGNAL_MOVE 1
#define SIGNAL_IDLE 8


#define HOVER_BASE base
#define HOVER_BANKSPEED <7>
#define HOVER_ROCKBASE base
#define HOVER_WOBBLE_PERIOD 80
#define HOVER_WOBBLE_AMPLITUDE [0.7]
#define HOVER_WAKEPIECE wake
#define HOVER_WAKE_SFX_1 1024 + 0
#define HOVER_WAKE_SFX_2 1024 + 1
#define HOVER_IDLE_SFX 1024 + 2
#include "../bar_hovercraft_common.h"



#define CATT1_PIECE_Y aimy1
#define CATT1_PIECE_X aimx1
#define CATT1_MAX_VELOCITY <5>
#define CATT1_ACCELERATION <0.6>
#define CATT1_JERK <3>
#define CATT1_PRECISION <5>
#define CATT1_RESTORE_SPEED <1.0>
#define CATT1_RESTORE_DELAY 1000
#include "../constant_acceleration_turret_turning_1.h"


#define BASEPIECE base
#define HITSPEED <25.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 10
#define MAXTILT 200

#include "../unit_hitbyweaponid_and_smoke.h"

swiveljets(heading, steery, currentSpeed)
{
	while(TRUE)
	{
		heading = get HEADING;
		steery = (heading - oldheading)*5;
		turn jetl to z-axis 0 - steery speed <120>;
		turn jetr to z-axis 0 - steery speed <120>;
		
		currentSpeed = <10> *((get CURRENT_SPEED) * 100 / get MAX_SPEED);
		if (currentSpeed < <100>) currentSpeed = <100>;
		spin bladesr around y-axis speed currentSpeed;
		spin bladesl around y-axis speed 0 - currentSpeed;
		
		sleep 66;
		oldheading = heading;
	}
}

StartMoving(reversing)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	turn strutl to x-axis <60> speed <60>;
	turn strutr to x-axis <60> speed <60>;
    start-script swiveljets();
}

StopMoving()
{
	signal SIGNAL_MOVE;
	
	turn strutl to x-axis <0> speed <30>;
	turn strutr to x-axis <0> speed <30>;
	
	spin bladesr around y-axis speed <180>;
	spin bladesl around y-axis speed 0 - <180>;
}

lua_UnitScriptLight(lightIndex, count)
{
	return 0;
}


Create()
{
	hide wake;
	//hide flare1;
	//hide flare2;
	shotcount = 1;
	gun1 = 0;
	oldheading = get HEADING;
	isAiming = FALSE;
	start-script HoverCraftMotion();
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	start-script CATT1_Restore();
	
	isAiming = FALSE;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep 5000;
	start-script ExecuteRestoreAfterDelay();
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flare1 + gun1;
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = aimx1;
}

FireWeapon1()
{	
	if (gun1 == 0)
	{	
		//emit-sfx 1024 + 3 from flare1;
		//corsokglow1
		call-script lua_UnitScriptLight(1, shotcount);
		move barrel1 to z-axis [-8] speed [1200];
		sleep 150;
		move barrel1 to z-axis [0] speed [2];
	}
	if (gun1 == 1)
	{
		//emit-sfx 1024 + 3 from flare2;
		call-script lua_UnitScriptLight(2, shotcount);
		move barrel2 to z-axis [-8] speed [1200];
		sleep 150;
		move barrel2 to z-axis [0] speed [2];
	}
	shotcount = shotcount + 1;
	sleep 1000;
	gun1 = !gun1;
}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	isAiming = TRUE;
	
	call-script CATT1_Aim(heading,pitch);
	
	start-script RestoreAfterDelay();
	return (1);
}

QueryWeapon2(pieceIndex)
{
	pieceIndex = flaredc;
}

AimFromWeapon2(pieceIndex)
{
	pieceIndex = dclauncher;
}

FireWeapon2()
{	
	emit-sfx 1024 + 0 from flaredc;
}

AimWeapon2(heading, pitch)
{
	signal SIGNAL_AIM2;
	set-signal-mask SIGNAL_AIM2;
	start-script RestoreAfterDelay();
	return (1);
}



Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;

	if( severity <= 25 )
	{
		corpsetype = 1;
		explode bladesl type FIRE | SMOKE | FALL | BITMAP4 | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | BITMAP4 | NOHEATCLOUD;
		explode sleeve type FIRE | SMOKE | FALL | BITMAP4 | NOHEATCLOUD;
		explode barrel1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel1 type FALL | BITMAP1 | NOHEATCLOUD;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | BITMAP4 | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode jetl type FIRE | SMOKE | FALL | BITMAP4 | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | BITMAP4 | NOHEATCLOUD;
		return (corpsetype);
	}
		corpsetype = 3;
		explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode jetl type FIRE | SMOKE | FALL | EXPLODE_ON_HIT | BITMAP4 | NOHEATCLOUD;
		explode bladesl type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | EXPLODE_ON_HIT | BITMAP4 | NOHEATCLOUD;
		
	return (corpsetype);
}
