#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece base, turret, launcher, radar, wake1, flare1, flare2, flare3, blink;

static-var  gun_1, restore_delay, fired, aiming;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4
#define SIG_AIM_2			8
#define SIG_FIRED			16
#define SIG_AIMING			32

#define BASEPIECE base
#define HITSPEED <20.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 2
#define MAXTILT 200

#include "unit_hitbyweaponid_and_smoke.h"

Lights()
{
	while( TRUE )
	{
		emit-sfx 1024 + 1 from blink;
		sleep 2500;
	}
	sleep 50;
	start-script Lights();
}

Go()
{
	spin radar around x-axis speed <-50.043956> accelerate <2>;
	return (0);
}

Stop()
{
	spin radar around x-axis speed <0.000000>;
	return (0);
}

Create()
{
	hide flare1;
	hide flare2;
	hide flare3;
	hide wake1;
	fired = 0;
	aiming = 0;
	gun_1 = 1;
	restore_delay = 3000;
	start-script Lights();
	return (0);
}

ResetFire()
{
	signal SIG_FIRED;
	set-signal-mask SIG_FIRED;
	fired = 1;
	sleep 1500;
	fired = 0;
}


ResetAiming()
{
	signal SIG_AIMING;
	set-signal-mask SIG_AIMING;
	aiming = 1;
	sleep 500;
	aiming = 0;
}

Activate()
{
	start-script Go();
}

Deactivate()
{
	start-script Stop();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
	return (0);
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	set-signal-mask 0;
	turn turret to y-axis <0.000000> speed <150.000000>;
	turn turret to x-axis <0.000000> speed <150.000000>;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	var waketime;
	while( TRUE )
	{
		emit-sfx 1024 + 0 from wake1;
		waketime = (get CURRENT_SPEED) * 100 / get MAX_SPEED;
		if( waketime < 50 ) waketime = 50;
		sleep 10000 / waketime;
	}
}

StopMoving()
{
	signal SIG_MOVE;
	return (0);
}


AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	start-script ResetAiming();
	turn turret to y-axis heading speed <300.000000>;
	turn launcher to x-axis <0> - pitch speed <300>;  //?
	wait-for-turn turret around y-axis;
	wait-for-turn launcher around x-axis;
	start-script RestoreAfterDelay();
	if(fired == 1)
	{
		return (0);
	}
	return (1);
}

FirePrimary()
{
	start-script ResetFire();
	++gun_1;
	if( gun_1 == 4 )
	{
		gun_1 = 1;
	}
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = launcher;
	return (0);
}

QueryPrimary(piecenum)
{
	if( gun_1 == 1 )
	{
		piecenum = flare1;
	}
	if( gun_1 == 2 )
	{
		piecenum = flare2;
	}
	if( gun_1 == 3 )
	{
		piecenum = flare3;
	}
	return (0);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	if(aiming == 1)
	{
		return (0);
	}
	turn turret to y-axis heading speed <300.000000>;
	turn launcher to x-axis <0> - pitch speed <300>;  //?
	wait-for-turn turret around y-axis;
	wait-for-turn launcher around x-axis;
	start-script RestoreAfterDelay();
	sleep 33;
	if(fired == 1)
	{
		return (0);
	}
	return (1);
}

FireSecondary()
{
	start-script ResetFire();
	++gun_1;
	if( gun_1 == 4 )
	{
		gun_1 = 1;
	}
	return (0);
}

AimFromSecondary(piecenum)
{
	piecenum = launcher;
	return (0);
}

QuerySecondary(piecenum)
{
	if( gun_1 == 1 )
	{
		piecenum = flare1;
	}
	if( gun_1 == 2 )
	{
		piecenum = flare2;
	}
	if( gun_1 == 3 )
	{
		piecenum = flare3;
	}
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = turret;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode launcher type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode radar type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		//explode flare1 type BITMAPONLY | NOHEATCLOUD;
		//explode flare2 type BITMAPONLY | NOHEATCLOUD;
		//explode wake1 type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode launcher type FALL | NOHEATCLOUD;
		explode radar type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type FALL | NOHEATCLOUD;
		//explode flare1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode wake1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode launcher type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode radar type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare1 type SMOKE | FALL | NOHEATCLOUD;
		//explode flare2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode wake1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode launcher type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode radar type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode flare1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode wake1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
