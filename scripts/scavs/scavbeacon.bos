#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, emit, launcher, arm, blinktop, blinkinside, blink1, blink2, blink3, blink4, turret_base, turret, barrel, recoil;

#define SIG_AIM				2

Lights()
{
	while( TRUE )
	{
		show blink1;
		sleep Rand(1,200);
		show blink2;
		sleep Rand(1,200);
		show blink3;	
		sleep Rand(1,200);
		show blink4;
		sleep Rand(1000,10000);
		hide blink1;
		sleep Rand(1,200);
		hide blink2;
		sleep Rand(1,200);
		hide blink3;
		sleep Rand(1,200);
		hide blink4;
		sleep Rand(1000,10000);

	}
	sleep 2000;
	start-script Lights();
}

TopLight()
{
	while( TRUE )
	{
		show blinktop;
		sleep Rand(150,250);
		hide blinktop;
		sleep Rand(1000,10000);

	}
	sleep 600;
	start-script TopLight();
}

InsideLight()
{
	while( TRUE )
	{
		show blinkinside;
		sleep Rand(1500,3000);
		hide blinkinside;
		sleep Rand(1000,10000);

	}
	sleep 600;
	start-script InsideLight();
}

Create()
{
	hide launcher;
	hide base;
	dont-cache base;
	set ARMORED to 0;
	move launcher to y-axis [10000.000000] speed [50000.000000];
	move launcher to x-axis [0.000000] speed [50000.000000];
	move launcher to z-axis [0.000000] speed [50000.000000];
	turn launcher to y-axis <90.000000> speed <10000.000000>;
	turn launcher to x-axis <90.000000> speed <10000.000000>;
	turn launcher to z-axis <90.000000> speed <10000.000000>;
	sleep 100;
	spin arm around y-axis speed <21.978022>;
	turn arm to x-axis Rand( <0.005495>, <40.989011> ) speed <1000.000000>;
	sleep Rand( 1, 100 );
	//emit-sfx 2048 from launcher;
	show base;
	start-script Lights();
	start-script TopLight();
	start-script InsideLight();
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn turret to x-axis <0> speed <16.00000>;
}

SetStunned(State)
{
    Stunned = State;
	if (Stunned) {
	    call-script ExecuteRestoreAfterDelay();
	}
}

RestoreAfterDelay()
{
	sleep 2200;
	start-script ExecuteRestoreAfterDelay();
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret_base to y-axis heading speed <300.071429>;
	turn turret to x-axis <0.000000> - pitch speed <200.043956>;
	wait-for-turn turret around y-axis;
	wait-for-turn turret around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	emit-sfx 1024 + 0 from recoil;
}

AimFromPrimary(piecenum)
{
	piecenum = recoil;
}

QueryPrimary(piecenum)
{
	piecenum = recoil;
}

SweetSpot(piecenum)
{
	piecenum = turret_base;
}

Killed(severity, corpsetype)
{
	emit-sfx 1025 from emit;
}

QueryNanoPiece(piecenum)
{
	piecenum = base;
}

QueryLandingPad(Func_Var_1)
{
	Func_Var_1 = 1;
}
