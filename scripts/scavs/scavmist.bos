#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"


// One sixth of the full cycle duration, in millisecond
// The larger this value the slower the walk animation
// #define WALK_PERIOD 100


piece	flare, offsetturret, offsetflare, highflare;

static-var aimPriority;

// static-var fire_count, firing, open, maxreloadtime, restore_delay, wpn1_lasthead, animSpeed, maxSpeed, animFramesPerKeyframe, bMoving;

#define SIG_AIM 2
//#define SIG_FIRE1 4
//#define SIG_WALK 8
#define SIG_BUILD 2
//#define SMOKEPIECE1 body


#define BASEPIECE flare
//#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 4
//#define MAXTILT 100

Emitsmoke()
{
	while( TRUE )
	{
		emit-sfx 1024 + 0 from flare;
		sleep 400;
	}
	sleep 50;
	start-script Emitsmoke();
}

Create()
{
	hide flare;
	hide offsetturret;
	hide offsetflare;
	hide highflare;
	dont-shade flare;
	dont-cache flare;
	dont-shade offsetturret;
	dont-cache offsetturret;
	dont-shade offsetflare;
	dont-cache offsetflare;
	dont-shade highflare;
	dont-cache highflare;
	aimPriority = 0;
	
	set ARMORED to 0;
	//emit-sfx 1024 + 0 from flare;
	sleep 500;
	//show flare;
	start-script Emitsmoke();
}

QueryWeapon1(piecenum)
{
	piecenum = highflare;
}

//AimFromWeapon1(piecenum)
//{
//piecenum = highflare;
//}

AimWeapon1(heading, pitch)
{
	return (1);
}

FireWeapon1()
{
	emit-sfx 1024 + 0 from flare;
	sleep 100;
	return(1);
}

QueryWeapon2(piecenum)
{
	piecenum=offsetflare;
}

AimFromWeapon2(piecenum)
{
piecenum = offsetturret;
}


AimWeapon2(heading, pitch)
{
	turn offsetturret to y-axis heading speed <300.071429>;
	wait-for-turn offsetturret around y-axis;
	return (1);
}

FireWeapon2()
{
	emit-sfx 1024 + 0 from flare;
	sleep 100;
	return(1);
}

QueryWeapon3(piecenum)
{
	piecenum=offsetflare;
}

AimFromWeapon3(piecenum)
{
piecenum = offsetturret;
}


AimWeapon3(heading, pitch)
{
	return (1);
}

FireWeapon3()
{
	emit-sfx 1024 + 0 from flare;
	sleep 100;
	return(1);
}

StartBuilding(heading, pitch)
{
	signal SIG_BUILD;
	set-signal-mask SIG_BUILD;
	set INBUILDSTANCE to 1;
}

StopBuilding()
{
	signal SIG_BUILD;	
	set INBUILDSTANCE to 0;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode flare type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode flare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode flare type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
