
#include "../recoil_common_includes.h"

piece  torso,rflare, lflare, pelvis, lthigh, rthigh, luparm,
       ruparm, rarm, larm, rleg, rfoot, lleg, lfoot;

static-var  isMoving, isAiming, restore_delay, gun_1, wpn1_lasthead;

// Signal definitions
#define SIGNAL_AIM1 256


walk()
{

		//maxvelocity = 1.4, speed = 45 elmos/sec
		//animspeed 36 elmos per cycle


		if( isMoving )
		{	
		//step 0 
	
		turn rthigh to x-axis <0> speed <277.500000>;
		turn rleg to x-axis <0> speed <142.500000>;
		turn rfoot to x-axis <0> speed <202.500000>;
		turn lthigh to x-axis <9> speed <427.500000>;
		turn lleg to x-axis <34> speed <450.0>;
		turn lfoot to x-axis <-40> speed <427.500000>;

		turn luparm to x-axis <-10> speed <75.0>;
		turn larm to x-axis <5> speed <75.0>;
		turn ruparm to x-axis <10> speed <75.0>;
		turn rarm to x-axis <25> speed <75.0>;

		move pelvis to y-axis [0] speed [11.250000];
		turn torso to y-axis <-5> speed <37.500000>;

		sleep 130;
		}
		if( isMoving )
		{	
		//step 1
	
		turn rthigh to x-axis <51> speed <382.500000>;
		turn rleg to x-axis <-36> speed <270.0>;
		turn rfoot to x-axis <14> speed <105.0>;
		turn lthigh to x-axis <-44> speed <397.500000>;
		turn lleg to x-axis <34> now;
		turn lfoot to x-axis <0> speed <300.0>;

		turn luparm to x-axis <10> speed <150.0>;
		turn larm to x-axis <25> speed <150.0>;
		turn ruparm to x-axis <-10> speed <150.0>;
		turn rarm to x-axis <5> speed <150.0>;

		move pelvis to y-axis [-1] speed [7.500000];
		turn torso to y-axis <5> speed <75.0>;

		sleep 130;
		}

		if( isMoving )
		{	
		//step 2
	
		turn rthigh to x-axis <66> speed <112.500000>;
		turn rleg to x-axis <-26> speed <75.0>;
		turn rfoot to x-axis <17> speed <22.500000>;
		turn lthigh to x-axis <-37> speed <52.500000>;
		turn lleg to x-axis <-19> speed <397.500000>;
		turn lfoot to x-axis <27> speed <202.500000>;

		turn luparm to x-axis <20> speed <75.0>;
		turn larm to x-axis <35> speed <75.0>;
		turn ruparm to x-axis <-20> speed <75.0>;
		turn rarm to x-axis <-5> speed <75.0>;

		move pelvis to y-axis [-1.5] speed [3.750000];
		turn torso to y-axis <10> speed <37.500000>;

		sleep 130;
		}

		if( isMoving )
		{	
		//step 3
	
		turn rthigh to x-axis <9> speed <427.500000>;
		turn rleg to x-axis <34> speed <450.0>;
		turn rfoot to x-axis <-40> speed <427.500000>;
		turn lthigh to x-axis <0> speed <277.500000>;
		turn lleg to x-axis <0> speed <142.500000>;
		turn lfoot to x-axis <0> speed <202.500000>;
		
		turn luparm to x-axis <10> speed <75.0>;
		turn larm to x-axis <25> speed <75.0>;
		turn ruparm to x-axis <-10> speed <75.0>;
		turn rarm to x-axis <5> speed <75.0>;

		move pelvis to y-axis [0] speed [11.250000];
		turn torso to y-axis <5> speed <37.500000>;

		sleep 130;
		}

		if( isMoving )
		{	
		//step 4
	
		turn rthigh to x-axis <-44> speed <397.500000>;
		turn rleg to x-axis <34> now;
		turn rfoot to x-axis <0> speed <300.0>;
		turn lthigh to x-axis <51> speed <382.500000>;
		turn lleg to x-axis <-36> speed <270.0>;
		turn lfoot to x-axis <14> speed <105.0>;

		turn luparm to x-axis <-10> speed <150.0>;
		turn larm to x-axis <5> speed <150.0>;
		turn ruparm to x-axis <10> speed <150.0>;
		turn rarm to x-axis <25> speed <150.0>;

		move pelvis to y-axis [-1] speed [7.500000];
		turn torso to y-axis <-5> speed <75.0>;

		sleep 130;
		}

		if( isMoving )
		{	
		//step 5
	
		turn rthigh to x-axis <-37> speed <52.500000>;
		turn rleg to x-axis <-19> speed <397.500000>;
		turn rfoot to x-axis <27> speed <202.500000>;
		turn lthigh to x-axis <66> speed <112.500000>;
		turn lleg to x-axis <-26> speed <75.0>;
		turn lfoot to x-axis <17> speed <22.500000>;

		turn luparm to x-axis <-20> speed <75.0>;
		turn larm to x-axis <-5> speed <75.0>;
		turn ruparm to x-axis <20> speed <75.0>;
		turn rarm to x-axis <35> speed <75.0>;

		move pelvis to y-axis [-1.5] speed [3.750000];
		turn torso to y-axis <-10> speed <37.500000>;

		sleep 130;
		}

}

walklegs()
{


		if( isMoving )
		{	
		//step 0 
	
		turn rthigh to x-axis <0> speed <277.500000>;
		turn rleg to x-axis <0> speed <142.500000>;
		turn rfoot to x-axis <0> speed <202.500000>;
		turn lthigh to x-axis <9> speed <427.500000>;
		turn lleg to x-axis <34> speed <450.0>;
		turn lfoot to x-axis <-40> speed <427.500000>;
		move pelvis to y-axis [0] speed [11.250000];

		sleep 130;
		}
		if( isMoving )
		{	
		//step 1
	
		turn rthigh to x-axis <51> speed <382.500000>;
		turn rleg to x-axis <-36> speed <270.0>;
		turn rfoot to x-axis <14> speed <105.0>;
		turn lthigh to x-axis <-44> speed <397.500000>;
		turn lleg to x-axis <34> now;
		turn lfoot to x-axis <0> speed <300.0>;

		move pelvis to y-axis [-1] speed [7.500000];

		sleep 130;
		}

		if( isMoving )
		{	
		//step 2
	
		turn rthigh to x-axis <66> speed <112.500000>;
		turn rleg to x-axis <-26> speed <75.0>;
		turn rfoot to x-axis <17> speed <22.500000>;
		turn lthigh to x-axis <-37> speed <52.500000>;
		turn lleg to x-axis <-19> speed <397.500000>;
		turn lfoot to x-axis <27> speed <202.500000>;

		move pelvis to y-axis [-1.5] speed [3.750000];

		sleep 130;
		}

		if( isMoving )
		{	
		//step 3
	
		turn rthigh to x-axis <9> speed <427.500000>;
		turn rleg to x-axis <34> speed <450.0>;
		turn rfoot to x-axis <-40> speed <427.500000>;
		turn lthigh to x-axis <0> speed <277.500000>;
		turn lleg to x-axis <0> speed <142.500000>;
		turn lfoot to x-axis <0> speed <202.500000>;
		
		move pelvis to y-axis [0] speed [11.250000];

		sleep 130;
		}

		if( isMoving )
		{	
		//step 4
	
		turn rthigh to x-axis <-44> speed <397.500000>;
		turn rleg to x-axis <34> now;
		turn rfoot to x-axis <0> speed <300.0>;
		turn lthigh to x-axis <51> speed <382.500000>;
		turn lleg to x-axis <-36> speed <270.0>;
		turn lfoot to x-axis <14> speed <105.0>;
		move pelvis to y-axis [-1] speed [7.500000];

		sleep 130;
		}

		if( isMoving )
		{	
		//step 5
	
		turn rthigh to x-axis <-37> speed <52.500000>;
		turn rleg to x-axis <-19> speed <397.500000>;
		turn rfoot to x-axis <27> speed <202.500000>;
		turn lthigh to x-axis <66> speed <112.500000>;
		turn lleg to x-axis <-26> speed <75.0>;
		turn lfoot to x-axis <17> speed <22.500000>;

		move pelvis to y-axis [-1.5] speed [3.750000];

		sleep 130;
		}
}

Movement(moving, aiming, justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		moving = isMoving;
		aiming = isAiming;
		if( moving )
		{
			if( aiming )
			{
				call-script walklegs();
			}
			else
			{
				call-script walk();
			}
			justmoved = TRUE;
		}
		else
		{
			if( justmoved )
			{
				turn rthigh to x-axis <0> speed <277.500000>;
				turn rleg to x-axis <0> speed <142.500000>;
				turn rfoot to x-axis <0> speed <202.500000>;
				turn lthigh to x-axis <0> speed <277.500000>;
				turn lleg to x-axis <0> speed <142.500000>;
				turn lfoot to x-axis <0> speed <202.500000>;
		
		
				move pelvis to y-axis [0] speed [11.250000];
				if( !aiming )
				{
					turn luparm to x-axis <0> speed <75.0>;
					turn larm to x-axis <0> speed <75.0>;
					turn ruparm to x-axis <0> speed <75.0>;
					turn rarm to x-axis <0> speed <75.0>;
					turn torso to y-axis <0> speed <37.500000>;
				}
				justmoved = FALSE;
			}
			sleep 100;
		}
	}
}


#define BASEPIECE torso
#include "../unit_hitbyweaponid_and_smoke.h"

Create()
{
	hide rflare;
	hide lflare;
	isMoving = FALSE;
	isAiming = FALSE;
	restore_delay = 3000;
	gun_1 = rflare;
}

SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 2;
}

StartMoving(reversing)
{
	isMoving = TRUE;
}

StopMoving()
{
	isMoving = FALSE;
}



static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn torso to y-axis <0.0> speed <90.0>;
	turn ruparm to x-axis <0.0> speed <45.0>;
	turn rarm to y-axis <0.0> speed <45.0>;
	turn luparm to x-axis <0.0> speed <45.0>;
	wait-for-turn torso around y-axis;
	wait-for-turn ruparm around x-axis;
	wait-for-turn rarm around y-axis;
	wait-for-turn luparm around x-axis;
	wpn1_lasthead = 0xbadface;
	isAiming = FALSE;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	set-signal-mask SIGNAL_AIM1;
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = torso;
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = rflare + gun_1;
}

FireWeapon1()
{
	gun_1 = !gun_1;
}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	isAiming = TRUE;
	turn torso to y-axis heading speed <200.0>;
	turn ruparm to x-axis <0.0> - pitch speed <200.0>;
	turn rarm to x-axis <0.0> speed <200.0>;
	turn luparm to x-axis <0.0> - pitch speed <200.0>;
	turn larm to x-axis <0.0> speed <200.0>;
	if ((wpn1_lasthead == 0xbadface) OR ABSOLUTE_GREATER_THAN(WRAPDELTA(heading - wpn1_lasthead), <7>))
	{
		wpn1_lasthead = 0xbadface;
		wait-for-turn torso around y-axis;
		wait-for-turn luparm around x-axis;
		wait-for-turn ruparm around x-axis;
	}
	start-script RestoreAfterDelay();
	wpn1_lasthead = heading;
	return (1);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode pelvis type BITMAPONLY | NOHEATCLOUD;
		explode rthigh type BITMAPONLY | NOHEATCLOUD;
		explode rleg type BITMAPONLY | NOHEATCLOUD;
		explode rfoot type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lthigh type BITMAPONLY | NOHEATCLOUD;
		explode lleg type BITMAPONLY | NOHEATCLOUD;
		explode lfoot type BITMAPONLY | NOHEATCLOUD;
		explode torso type BITMAPONLY | NOHEATCLOUD;
		explode luparm type BITMAPONLY | NOHEATCLOUD;
		explode larm type BITMAPONLY | NOHEATCLOUD;
		explode lflare type BITMAPONLY | NOHEATCLOUD;
		explode ruparm type BITMAPONLY | NOHEATCLOUD;
		explode rarm type BITMAPONLY | NOHEATCLOUD;
		explode rflare type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode pelvis type BITMAPONLY | NOHEATCLOUD;
		explode rthigh type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rleg type FALL | NOHEATCLOUD;
		explode rfoot type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lthigh type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lleg type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lfoot type FALL | NOHEATCLOUD;
		explode torso type FALL | NOHEATCLOUD;
		explode luparm type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode larm type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lflare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode ruparm type FALL | NOHEATCLOUD;
		explode rarm type FALL | NOHEATCLOUD;
		explode rflare type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode pelvis type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rthigh type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rleg type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rfoot type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode lthigh type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode lleg type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lfoot type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode torso type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode luparm type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode larm type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lflare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode ruparm type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode rarm type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rflare type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode pelvis type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rthigh type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rleg type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rfoot type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lthigh type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lleg type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode lfoot type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode torso type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode luparm type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode larm type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lflare type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode ruparm type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode rarm type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rflare type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
